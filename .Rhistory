dplyr::mutate(Katsuwonus_pelamis = as.logical(Katsuwonus_pelamis))
sp1_RepresentationFeaturePlot <- plot_AQMFeatures(sp1_RepresentationFeature, PUs, land, column = "Katsuwonus_pelamis") + ggtitle("Species Distribution #1", subtitle = "Katsuwonus pelamis") + theme(axis.text = element_text(size = 25))
ggsave(filename = "Workflow-ClimatePriorityArea-sp1RepFeat.png",
plot = sp2_RepresentationFeaturePlot, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
ggsave(filename = "Workflow-ClimatePriorityArea-sp1RepFeat.png",
plot = sp1_RepresentationFeaturePlot, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
sp2_ImportantFeature <- create_ImportantFeatureLayer(sp2, metric_name = "tos", colname = "slpTrends", metric_df = roc_tos_SSP585) %>%
dplyr::mutate(Thunnus_orientalis = as.logical(Thunnus_orientalis))
sp2_ImportantFeaturePlot <- plot_AQMFeatures(sp2_ImportantFeature, PUs, land, column = "Thunnus_orientalis") + ggtitle("Species Distribution #2", subtitle = "Thunnus orientalis") + theme(axis.text = element_text(size = 25))
ggsave(filename = "Workflow-ClimatePriorityArea-sp2ImptFeat.png",
plot = sp2_ImportantFeaturePlot, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
sp2_RepresentationFeature <- create_RepresentationFeature(sp2_ImportantFeature, sp2) %>%
dplyr::mutate(Thunnus_orientalis = as.logical(Thunnus_orientalis))
sp2_RepresentationFeaturePlot <- plot_AQMFeatures(sp2_RepresentationFeature, PUs, land, column = "Thunnus_orientalis") + ggtitle("Species Distribution #2", subtitle = "Thunnus orientalis") + theme(axis.text = element_text(size = 25))
ggsave(filename = "Workflow-CLimatePriorityArea-sp2RepFeat.png",
plot = sp2_RepresentationFeaturePlot, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
source("HelperFunctions/SpatPlan_Extras.R") # Load the extras, including functions and libraries
source("HelperFunctions/SpatPlan_HelperFxns_WestPac.R") # Load helper functions written specifically for this spatial planning project
output_solutions <- "Output/solutions/"
output_summary <- "Output/summary/"
output_lowregret <- "Output/lowregret/"
# Load files
source("SpatPlan_Master_Preliminaries.R")
total_area = nrow(PUs) * PU_size
#### Main Text: Percentile ####
#### Climate warming ####
# Parameters:
# Ensemble: Ensemble mean
# Climate metric: Rate of Climate Warming (SSP 5-8.5)
# Approach: "Percentile"
# 1. Prepare climate layer
# Retain only planning units of each of the biodiversity features that in intersect with areas of low exposure (<= 35th percentile)
aqua_percentile <- create_PercentileLayer(aqua_sf = aqua_sf, metric_name = "tos", colname = "transformed", metric_df = roc_tos_SSP585, PUs = PUs)
# 2. Get list of features
features <- aqua_percentile %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
names()
# 3. Set up the spatial planning problem
out_sf <- cbind(aqua_percentile, roc_tos_SSP585, UniformCost)
p2 <- prioritizr::problem(out_sf, features, "cost") %>%
add_min_set_objective() %>%
add_relative_targets(30/35) %>% # using Effective 30% Protection. Since we only retained planning units that intersect with both biodiversity features and areas <= 35th percentile (0.35), by multiplying this by ~0.875 target, we effectively protect only 30%.
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE)
#### Ocean acidification ####
# Parameters:
# Ensemble: Ensemble mean
# Climate metric: Rate of Ocean Acidification (SSP 5-8.5)
# Approach: "Percentile"
# 1. Prepare climate layer
aqua_percentile <- create_PercentileLayer(aqua_sf = aqua_sf, metric_name = "phos", colname = "transformed", metric_df = roc_phos_SSP585, PUs = PUs)
# 2. Get list of features
features <- aqua_percentile %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
names()
# 3. Set up the spatial planning problem
out_sf <- cbind(aqua_percentile, roc_phos_SSP585, UniformCost)
p3 <- prioritizr::problem(out_sf, features, "cost") %>%
add_min_set_objective() %>%
add_relative_targets(30/35) %>%
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE)
#### Declining oxygen concentration ####
# Parameters:
# Ensemble: Ensemble mean
# Climate metrics: Rate of Declining oxygen concentration (SSP 5-8.5)
# Approach: "Percentile"
# 1. Prepare climate layer
aqua_percentile <- create_PercentileLayer(aqua_sf = aqua_sf, metric_name = "o2os", colname = "transformed", metric_df = roc_o2os_SSP585, PUs = PUs)
# 2. Get list of features
features <- aqua_percentile %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
names()
# 3. Set up the spatial planning problem
out_sf <- cbind(aqua_percentile, roc_o2os_SSP585, UniformCost)
p4 <- prioritizr::problem(out_sf, features, "cost") %>%
add_min_set_objective() %>%
add_relative_targets(30/35) %>%
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE)
#### Climate velocity ####
# Parameters:
# Ensemble: Ensemble mean
# Climate metrics: Climate velocity (SSP 5-8.5)
# Approach: "Percentile"
# 1. Prepare climate layer
aqua_percentile <- create_PercentileLayer(aqua_sf = aqua_sf, metric_name = "velocity", colname = "transformed", metric_df = velocity_SSP585, PUs = PUs)
# 2. Get list of features
features <- aqua_percentile %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
names()
# 3. Set up the spatial planning problem
out_sf <- cbind(aqua_percentile, velocity_SSP585, UniformCost)
p5 <- prioritizr::problem(out_sf, features, "cost") %>%
add_min_set_objective() %>%
add_relative_targets(30/35) %>%
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE)
s2 <- readRDS("Output/solutions/s2-EM-Percentile-tos-585.rds")
s3 <- readRDS("Output/solutions/s3-EM-Percentile-phos-585.rds")
s4 <- readRDS("Output/solutions/s4-EM-Percentile-o2os-585.rds")
s5 <- readRDS("Output/solutions/s5-EM-Percentile-velocity-585.rds")
#### Summary ####
# Feature representation
problem_list <- list(p2, p3, p4, p5)
solution_list <- list(s2, s3, s4, s5)
names <- c("EM_Percentile_tos_585", "EM_Percentile_phos_585", "EM_Percentile_o2os_585", "EM_Percentile_velocity_585")
feat_rep <- tibble(feature = character()) # empty tibble
for(i in 1:length(names)) {
df <- represent_feature(problem_list[[i]], solution_list[[i]], names[i])
feat_rep <- left_join(df, feat_rep, by = "feature")
}
write.csv(feat_rep, paste0(output_summary, "MetricTheme_Percentile_FeatureRepresentation.csv")) # save
# Summary
climateLayer_list <- list(roc_tos_SSP585, roc_phos_SSP585, roc_o2os_SSP585, velocity_SSP585)
metric_list <- c("tos", "phos", "o2os", "velocity")
df <- tibble(run = character()) # empty tibble
for(i in 1:length(names)) {
statistics <- compute_summary(solution_list[[i]], total_area, PU_size, names[i], Cost = "cost")
df <- rbind(statistics, df)
}
climate <- list() # empty list
for (i in 1:length(names)) {
climate[[i]] <- get_ClimateSummary(solution_list, climateLayer_list[[i]], metric_list[i], col_scenario = "585", col_approach = "percentile", col_run = names, climateLayer = "single")
}
climate <- plyr::join_all(climate, by=c("run", "scenario", "approach"), type='left')
summary <- left_join(climate, df, by = "run")
summary
write.csv(summary, paste0(output_summary, "MetricTheme_Percentile_Summary.csv")) # save
ggArea <- plot_statistics(summary, col_name = "percent_area", y_axis = "% area", theme = "metric") + theme(axis.text = element_text(size = 25))
ggArea
ggsave(filename = "Area-MetricTheme-Percentile-585.png",
plot = ggArea, width = 7, height = 5, dpi = 300,
path = "Figures/") # save plot
# Get Kappa Correlation Matrix
list <- c("tos", "phos", "o2os", "velocity")
object_list <- list() # empty list
solution_list <- list(s2, s3, s4, s5)
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], list[i])
object_list[[i]] <- obj
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
# This plots the Correlation Matrix.
plot_corrplot <- function(matrix, num) {
pacman::p_load(corrplot)
# creating corrplot
rownames(matrix) <- matrix[,1]
n <- num + 1 # num represents the number of inputted spatial plans
matrix_f <- matrix[,2:n]
class(matrix_f) <- "numeric"
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
plot <- corrplot(matrix_f, method = "shade", cl.lim = c(-0.2,1), tl.col = "black", addCoef.col = "black",
col=col(200), tl.srt=45)
return(plot)
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
#### Low-regret areas ####
s2_LRplot <- create_LowRegretSf(solution_list, names, PUs)
saveRDS(s2_LRplot, paste0(output_lowregret, "s2-EM-LowRegret-Percentile-585.rds")) # save low-regret solution
ggLowRegret2 <- plot_lowregret(s2_LRplot, land) + theme(axis.text = element_text(size = 25))
ggLowRegret2
feat_rep
ggsave(filename = "LR-Metric-Percentile.png",
plot = ggLowRegret2, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
# Summary of low-regret
summary <- compute_summary(s2_LRplot, total_area, PU_size, "LR-Percentile-585", Cost = "cost")
write.csv(summary, paste0(output_summary, "MetricTheme_Percentile_LowRegretSummary.csv")) # save
source("HelperFunctions/SpatPlan_Extras.R") # Load the extras, including functions and libraries
source("HelperFunctions/SpatPlan_HelperFxns_WestPac.R") # Load helper functions written specifically for this spatial planning project
output_solutions <- "Output/solutions/"
output_summary <- "Output/summary/"
output_lowregret <- "Output/lowregret/"
# Load files
source("SpatPlan_Master_Preliminaries.R")
total_area = nrow(PUs) * PU_size
#### Climate Velocity ####
# Parameters:
# Ensemble: Ensemble mean
# Climate metrics: Climate velocity (SSP 5-8.5)
# Approach: "Climate priority area"
# 1. Prepare the climate layers and features
ImptFeat <- create_ImportantFeatureLayer(aqua_sf, metric_name = "velocity", colname = "transformed", metric_df = velocity_SSP585)
RepFeat <- create_RepresentationFeature(ImptFeat, aqua_sf)
Features <- cbind(ImptFeat, RepFeat) %>%
dplyr::select(-geometry.1)
# 2. Get list of features
features <- Features %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
names()
# 3. Differentiate targets for important features and representative features
targets <- features %>% as_tibble() %>%
setNames(., "Species") %>%
add_column(target = 1) %>%
mutate(target = ifelse(str_detect(Species, pattern = ".1"), 25/95, 1))
Features
targets
# 4. Set up the spatial planning problem
out_sf <- cbind(Features, velocity_SSP585, UniformCost)
p37 <- prioritizr::problem(out_sf, features, "cost") %>%
add_min_set_objective() %>%
add_relative_targets(targets$target) %>%
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE)
# 5. Solve the planning problem
s37 <- prioritizr::solve(p37)
saveRDS(s37, paste0(output_solutions, "s37-EM-ClimatePriorityArea-velocity-585.rds")) # save solution
# 6. Plot the spatial design
s37_plot <- s37 %>%
mutate(solution_1 = as.logical(solution_1))
ggSol37 <- fSpatPlan_PlotSolution(s37_plot, PUs, land) + ggtitle("Climate-smart design: Climate Velocity", subtitle = "Important Feature, SSP 5-8.5") + theme(axis.text = element_text(size = 25))
ggsave(filename = "EM-ClimatePriorityArea-velocity-585.png",
plot = ggSol37, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
s34 <- readRDS("Output/solutions/s34-EM-ClimatePriorityArea-tos-585.rds")
s35 <- readRDS("Output/solutions/s35-EM-ClimatePriorityArea-phos-585.rds")
s36 <- readRDS("Output/solutions/s36-EM-ClimatePriorityArea-o2os-585.rds")
#### Summary ####
# Feature representation
# Load dummy problem, to compare solutions with original distributions and not the filtered distributions
dummy_problem <- readRDS("Output/temp/p10.rds") # "penalty" problem dummy
problem_list <- list(dummy_problem, dummy_problem, dummy_problem, dummy_problem)
solution_list <- list(s34, s35, s36, s37)
names <- c("EM_ClimatePriorityArea_tos_585", "EM_ClimatePriorityArea_phos_585", "EM_ClimatePriorityArea_o2os_585", "EM_ClimatePriorityArea_velocity_585")
feat_rep <- tibble(feature = character()) # empty tibble
for (i in 1:length(names)) {
df <- represent_feature(problem_list[[i]], solution_list[[i]], names[i])
feat_rep <- left_join(df, feat_rep, by = "feature")
}
feat_rep
s34
feat_rep
x <- s34 %>% dplyr::select(solution_1, geometry)
x
eval_feature_representation_summary(dummy_problem, x[,'solution_1'])
?grepl
# This function extracts the percentage of each feature that is selected
represent_feature <- function(p, s, col_name) {
feat_rep <- eval_feature_representation_summary(p, s[, 'solution_1']) %>%
dplyr::select(feature, relative_held) %>%
mutate(relative_held = relative_held*100) %>%
rename(!!sym(col_name) := relative_held)
#if(str_detect(col_name, regex("percentile", ignore_case = TRUE))) {
#  feat_rep %<>% mutate(!!sym(col_name) := .data[[ col_name ]] * 0.35)
#}
if(str_detect(col_name, grepl("penalty|feature", ignore_case = TRUE))) {
feat_rep %<>% add_row(feature = "climate_layer", !!sym(col_name) := NA)
}# else if(str_detect(col_name, regex("ClimatePriorityArea", ignore_case = FALSE))) {
#  feat_rep %<>% mutate(!!sym(col_name) := ifelse(str_detect(feature, ".1"), yes = .data[[ col_name ]] * 0.95, no = .data[[ col_name ]] * 0.05))
}
problem_list <- list(dummy_problem, dummy_problem, dummy_problem, dummy_problem)
solution_list <- list(s34, s35, s36, s37)
names <- c("EM_ClimatePriorityArea_tos_585", "EM_ClimatePriorityArea_phos_585", "EM_ClimatePriorityArea_o2os_585", "EM_ClimatePriorityArea_velocity_585")
feat_rep <- tibble(feature = character()) # empty tibble
for (i in 1:length(names)) {
df <- represent_feature(problem_list[[i]], solution_list[[i]], names[i])
feat_rep <- left_join(df, feat_rep, by = "feature")
}
# This function extracts the percentage of each feature that is selected
represent_feature <- function(p, s, col_name) {
feat_rep <- eval_feature_representation_summary(p, s[, 'solution_1']) %>%
dplyr::select(feature, relative_held) %>%
mutate(relative_held = relative_held*100) %>%
rename(!!sym(col_name) := relative_held)
#if(str_detect(col_name, regex("percentile", ignore_case = TRUE))) {
#  feat_rep %<>% mutate(!!sym(col_name) := .data[[ col_name ]] * 0.35)
#}
if(str_detect(col_name, grepl("penalty|feature", ignore.case = TRUE))) {
feat_rep %<>% add_row(feature = "climate_layer", !!sym(col_name) := NA)
}# else if(str_detect(col_name, regex("ClimatePriorityArea", ignore_case = FALSE))) {
#  feat_rep %<>% mutate(!!sym(col_name) := ifelse(str_detect(feature, ".1"), yes = .data[[ col_name ]] * 0.95, no = .data[[ col_name ]] * 0.05))
}
feat_rep <- tibble(feature = character()) # empty tibble
for (i in 1:length(names)) {
df <- represent_feature(problem_list[[i]], solution_list[[i]], names[i])
feat_rep <- left_join(df, feat_rep, by = "feature")
}
grepl("penalty|feature", col_name, ignore.case = TRUE)
# This function extracts the percentage of each feature that is selected
represent_feature <- function(p, s, col_name) {
feat_rep <- eval_feature_representation_summary(p, s[, 'solution_1']) %>%
dplyr::select(feature, relative_held) %>%
mutate(relative_held = relative_held*100) %>%
rename(!!sym(col_name) := relative_held)
#if(str_detect(col_name, regex("percentile", ignore_case = TRUE))) {
#  feat_rep %<>% mutate(!!sym(col_name) := .data[[ col_name ]] * 0.35)
#}
if(grepl("penalty|feature", col_name, ignore.case = TRUE)) {
feat_rep %<>% add_row(feature = "climate_layer", !!sym(col_name) := NA)
}# else if(str_detect(col_name, regex("ClimatePriorityArea", ignore_case = FALSE))) {
#  feat_rep %<>% mutate(!!sym(col_name) := ifelse(str_detect(feature, ".1"), yes = .data[[ col_name ]] * 0.95, no = .data[[ col_name ]] * 0.05))
}
feat_rep <- tibble(feature = character()) # empty tibble
for (i in 1:length(names)) {
df <- represent_feature(problem_list[[i]], solution_list[[i]], names[i])
feat_rep <- left_join(df, feat_rep, by = "feature")
}
feat_rep
# This function extracts the percentage of each feature that is selected
represent_feature <- function(p, s, col_name) {
feat_rep <- eval_feature_representation_summary(p, s[, 'solution_1']) %>%
dplyr::select(feature, relative_held) %>%
mutate(relative_held = relative_held*100) %>%
rename(!!sym(col_name) := relative_held)
#if(str_detect(col_name, regex("percentile", ignore_case = TRUE))) {
#  feat_rep %<>% mutate(!!sym(col_name) := .data[[ col_name ]] * 0.35)
#}
if(grepl("penalty|feature", col_name, ignore.case = TRUE) == TRUE) {
feat_rep %<>% add_row(feature = "climate_layer", !!sym(col_name) := NA)
}# else if(str_detect(col_name, regex("ClimatePriorityArea", ignore_case = FALSE))) {
#  feat_rep %<>% mutate(!!sym(col_name) := ifelse(str_detect(feature, ".1"), yes = .data[[ col_name ]] * 0.95, no = .data[[ col_name ]] * 0.05))
}
# This function extracts the percentage of each feature that is selected
represent_feature <- function(p, s, col_name) {
feat_rep <- eval_feature_representation_summary(p, s[, 'solution_1']) %>%
dplyr::select(feature, relative_held) %>%
mutate(relative_held = relative_held*100) %>%
rename(!!sym(col_name) := relative_held)
#if(str_detect(col_name, regex("percentile", ignore_case = TRUE))) {
#  feat_rep %<>% mutate(!!sym(col_name) := .data[[ col_name ]] * 0.35)
#}
if(grepl("penalty|feature", col_name, ignore.case = TRUE) == TRUE) {
feat_rep %<>% add_row(feature = "climate_layer", !!sym(col_name) := NA)
}# else if(str_detect(col_name, regex("ClimatePriorityArea", ignore_case = FALSE))) {
#  feat_rep %<>% mutate(!!sym(col_name) := ifelse(str_detect(feature, ".1"), yes = .data[[ col_name ]] * 0.95, no = .data[[ col_name ]] * 0.05))}
return(feat_rep)
}
feat_rep <- tibble(feature = character()) # empty tibble
for (i in 1:length(names)) {
df <- represent_feature(problem_list[[i]], solution_list[[i]], names[i])
feat_rep <- left_join(df, feat_rep, by = "feature")
}
feat_rep
write.csv(feat_rep, paste0(output_summary, "MetricTheme_ClimatePriorityArea_FeatureRepresentation.csv")) # save
# Kernel distribution plots of targets
x <- feat_rep %>%
pivot_longer(!feature, names_to = "metric", values_to = "percent") %>%
dplyr::mutate(row_number = row_number(feature))
x
x
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c(str_detect(metric, "tos") = "#289E3D",
str_detect(metric, "phos") = "#E6C173",
str_detect(metric, "o2os") = "#81B0CC",
str_detect(metric, "velocity") = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
theme_classic()
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c(str_detect(metric, "tos") = "#289E3D",
str_detect(metric, "phos") = "#E6C173",
str_detect(metric, "o2os") = "#81B0CC",
str_detect(metric, "velocity") = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
theme_classic()
x
# Kernel distribution plots of targets
x <- feat_rep %>%
pivot_longer(!feature, names_to = "metric", values_to = "percent") %>%
dplyr::mutate(row_number = row_number(feature)) %>%
dplyr::mutate(metric = case_when(str_detect(metric, "tos") ~ "tos",
str_detect(metric, "phos") ~ "phos",
str_detect(metric, "o2os") ~ "o2os",
str_detect(metric, "velocity") ~ "velocity"))
x
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c("tos" = "#289E3D",
"phos" = "#E6C173",
"o2os" = "#81B0CC",
"velocity" = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
theme_classic()
ggRidge
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c("tos" = "#289E3D",
"phos" = "#E6C173",
"o2os" = "#81B0CC",
"velocity" = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
xlim(30, 100) +
theme_classic()
ggRidge
# Kernel distribution plots of targets
x <- feat_rep %>%
pivot_longer(!feature, names_to = "metric", values_to = "percent") %>%
dplyr::mutate(row_number = row_number(feature))
x
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c(`EM_ClimatePriorityArea_tos_585` = "#289E3D",
`EM_ClimatePriorityArea_phos_585` = "#E6C173",
`EM_ClimatePriorityArea_o2os_585` = "#81B0CC",
`EM_ClimatePriorityArea_velocity_585` = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
xlim(min(x$percent), 100) +
theme_classic()
ggRidge
ggsave(filename = "TargetDist-MetricTheme-ClimatePriorityArea.png",
plot = ggRidge, width = 15, height = 10, dpi = 300,
path = "Figures/") # save plot
# Summary
climateLayer_list <- list(roc_tos_SSP585, roc_phos_SSP585, roc_o2os_SSP585, velocity_SSP585)
metric_list <- c("tos", "phos", "o2os", "velocity")
df <- tibble(run = character()) # empty list
for(i in 1:length(names)) {
statistics <- compute_summary(solution_list[[i]], total_area, PU_size, names[i], Cost = "cost")
df <- rbind(statistics, df)
}
climate <- list() # empty list
for (i in 1:length(names)) {
climate[[i]] <- get_ClimateSummary(solution_list, climateLayer_list[[i]], metric_list[i], col_scenario = "585", col_approach = "ClimatePriorityArea", col_run = names, climateLayer = "single")
}
climate <- plyr::join_all(climate, by=c("run", "scenario", "approach"), type='left')
summary <- left_join(climate, df, by = "run")
summary
write.csv(summary, paste0(output_summary, "MetricTheme_ClimatePriorityArea_Summary.csv")) # save
ggArea <- plot_statistics(summary, col_name = "percent_area", y_axis = "% area", theme = "metric") + theme(axis.text = element_text(size = 25))
ggArea
ggsave(filename = "Area-MetricTheme-ClimatePriorityArea-585.png",
plot = ggArea, width = 7, height = 5, dpi = 300,
path = "Figures/") # save plot
# Get Kappa Correlation Matrix
list <- c("tos", "phos", "o2os", "velocity")
object_list <- list() # empty list
solution_list <- list(s34, s35, s36, s37)
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], list[i])
object_list[[i]] <- obj
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
#### Low-regret Areas ####
s5_LRplot <- create_LowRegretSf(solution_list, names, PUs)
saveRDS(s5_LRplot, paste0(output_lowregret, "s5-EM-LowRegret-ClimatePriorityArea-585.rds")) # save low-regret solution
ggLowRegret5 <- plot_lowregret(s5_LRplot, land) + theme(axis.text = element_text(size = 25))
ggLowRegret5
ggsave(filename = "LR-Metric-ClimatePriorityArea.png",
plot = ggLowRegret5, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
# Summary of low-regret
summary <- compute_summary(s5_LRplot, total_area, PU_size, "LR-ClimatePriorityArea-585", Cost = "cost")
write.csv(summary, paste0(output_summary, "MetricTheme_ClimatePriorityArea_LowRegretSummary.csv")) # save
summary
feat_rep <- read_csv("Output/summary/"MetricTheme_Penalty_FeatureRepresentation.csv") %>% dplyr::select(-1)
feat_rep <- read_csv("Output/summary/MetricTheme_Penalty_FeatureRepresentation.csv") %>% dplyr::select(-1)
source("HelperFunctions/SpatPlan_Extras.R") # Load the extras, including functions and libraries
source("HelperFunctions/SpatPlan_HelperFxns_WestPac.R") # Load helper functions written specifically for this spatial planning project
output_solutions <- "Output/solutions/"
source("HelperFunctions/SpatPlan_HelperFxns_WestPac.R") # Load helper functions written specifically for this spatial planning project
output_solutions <- "Output/solutions/"
output_summary <- "Output/summary/"
output_lowregret <- "Output/lowregret/"
# Load files
source("SpatPlan_Master_Preliminaries.R")
total_area = nrow(PUs) * PU_size
feat_rep <- read_csv("Output/summary/MetricTheme_Penalty_FeatureRepresentation.csv") %>% dplyr::select(-1)
# Kernel distribution plots of targets
x <- feat_rep %>%
pivot_longer(!feature, names_to = "metric", values_to = "percent") %>%
dplyr::mutate(row_number = row_number(feature))
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c(`EM_ClimatePriorityArea_tos_585` = "#289E3D",
`EM_ClimatePriorityArea_phos_585` = "#E6C173",
`EM_ClimatePriorityArea_o2os_585` = "#81B0CC",
`EM_ClimatePriorityArea_velocity_585` = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
xlim(min(x$percent), 100) +
theme_classic()
ggRidge
x
feat_rep <- read_csv("Output/summary/MetricTheme_ClimatePriorityArea_FeatureRepresentation.csv") %>% dplyr::select(-1)
# Kernel distribution plots of targets
x <- feat_rep %>%
pivot_longer(!feature, names_to = "metric", values_to = "percent") %>%
dplyr::mutate(row_number = row_number(feature))
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c(`EM_ClimatePriorityArea_tos_585` = "#289E3D",
`EM_ClimatePriorityArea_phos_585` = "#E6C173",
`EM_ClimatePriorityArea_o2os_585` = "#81B0CC",
`EM_ClimatePriorityArea_velocity_585` = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
xlim(min(x$percent), 100) +
theme_classic()
ggRidge
x
