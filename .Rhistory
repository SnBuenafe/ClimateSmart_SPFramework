# Get mean rate of decline in oxygen concentration (and also the mean of the log) for all designs, starting with uninformed
tmp <- get_ClimateSummary(solution_list1, climate_layer = roc_o2os_SSP585, metric = "o2os", col_scenario = "585", col_approach = NA, col_run = run_list1)
summary <- get_ClimateSummary(solution_list, climate_layer = roc_o2os_SSP585, metric = "o2os", col_scenario = "585", col_approach = "percentile", col_run = run_list) %>%
rbind(., tmp) %>%
left_join(., summary, by = c("run", "scenario", "approach"))
# Get median climate velocity concentrations & also mean of the log! starting from the uninformed
tmp <- get_ClimateSummary(solution_list1, climate_layer = velocity_SSP585, metric = "velocity", col_scenario = "585", col_approach = NA, col_run = run_list1)
summary <- get_ClimateSummary(solution_list, climate_layer = velocity_SSP585, metric = "velocity", col_scenario = "585", col_approach = "percentile", col_run = run_list) %>%
rbind(., tmp) %>%
left_join(., summary, by = c("run", "scenario", "approach"))
#' Graph summary
# Cost
ggSummary_Cost <- plot_statistics(summary, col_name = "log10(total_cost)", y_axis = "log10(cost)", color = 1)
ggSummary_Cost
#' ### Low-regret Areas
#' To create low-regret climate-smart design, we should only select areas that have been selected for all climate-smart designs utilizing different climate metrics
# Select solutions for all climate-smart designs
solution_list <- list(s2, s3, s4, s5)
col_names <- c("percentile_tos_585", "percentile_phos_585", "percentile_o2os_585", "percentile_velocity_585")
LowRegret_Percentile <- create_LowRegretSf(solution_list, col_names, PUs)
(gg_LowRegret <- plot_lowregret(LowRegret_Percentile, land))
gg_LowRegret
#' Check low-regret summary
LowRegret_SummaryPercentile <- compute_summary(LowRegret_Percentile, total_area, PU_size, "low_regret", Cost = "Cost_squish") %>%
mutate(approach = "percentile", scenario = "585")
print(LowRegret_SummaryPercentile)
feat_rep
feat_rep
#' ### Summary of all climate-smart designs
#' 1. Feature Representation
list <- c("percentile_phos_585", "percentile_o2os_585", "percentile_velocity_585")
problem_list <- list(p3, p4, p5)
solution_list <- list(s3, s4, s5)
for (i in 1:length(list)) {
tmp_df <- represent_feature(problem_list[[i]], solution_list[[i]], list[i])
feat_rep <- left_join(tmp_df, feat_rep)
}
# Get the summary and the mean rate of climate warming, also the mean log rate? for all designs
run_list <- c("percentile_phos_585", "percentile_o2os_585", "percentile_velocity_585")
solution_list <- list(s3, s4, s5)
emptyList <- list()
for (i in 1:length(run_list)) {
emptyList[[i]] <- compute_summary(solution_list[[i]], total_area, PU_size, run_list[i], Cost = "Cost_squish")
}
percentileSummary <- do.call(rbind, emptyList)
summary <- summary %>% dplyr::mutate(scenario = "585",
approach = ifelse(run == "uninformed", yes = NA, no = "percentile"))
summary <- get_ClimateSummary(solution_list, climate_layer = roc_tos_SSP585, metric = "tos", col_scenario = "585", col_approach = "percentile", col_run = run_list) %>%
left_join(., percentileSummary) %>%
rbind(summary)
summary
View(summary)
LowRegret_SummaryPercentile
#' We explore 3 climate-smart approaches here:
#' 1. "Feature" approach: treating the climate metric as a feature itself, with its own target
#' 2. "Percentile" approach: filtering the planning units for each of the biodiversity feature by only retaining those that have low exposure or high retention (wrt the species' range)
#' 3. "Penalty" approach: treating the climate metric as a linear penalty, ultimately altering the objective function.
#' We already did percentile in RQ2. Here we're going to do "Feature" and "Penalty" approaches forced under the highest climate scenario.
#'
#' ### "Feature" approach
#' #' ### Climate-smart spatial design (Rate of Climate Warming)
#'
#' 1. Prepare climate layer
ClimateFeature <- create_FeatureLayer(aqua_sf, metric_name = "tos", colname = "slpTrends", metric_df = roc_tos_SSP585)
#' 2. Get list of features
features <- aqua_percentile %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
names()
features <- append(features, "climate_layer") # add "climate_layer" to features
#' 3. Set up the spatial planning problem
out_sf <- cbind(aqua_sf, ClimateFeature, cost)
targets
# using Effective 40% Protection. Since we only considered the climate_layer as 1s if they are under (or above for phos and o2os) the 50th percentile (0.5), we multiply it by 0.8 to get an effective protection of 40%.
targets <- features %>% as_tibble() %>%
setNames(., "Species") %>%
add_column(target = 0.4) %>%
mutate(target = ifelse(Species == "climate_layer", 0.8, 0.4))
p6 <- prioritizr::problem(out_sf, features, "Cost_squish") %>%
add_min_set_objective() %>%
add_relative_targets(targets$target) %>%
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE)
#' 4. Solve the planning problem
s6 <- prioritizr::solve(p6)
#'
#' ### Climate-smart spatial design (Rate of Ocean Acidification)
#'
#' 1. Prepare climate layer
ClimateFeature <- create_FeatureLayer(aqua_sf, metric_name = "phos", colname = "slpTrends", metric_df = roc_phos_SSP585)
#' 3. Set up the spatial planning problem
out_sf <- cbind(aqua_sf, ClimateFeature, cost)
p7 <- prioritizr::problem(out_sf, features, "Cost_squish") %>%
add_min_set_objective() %>%
add_relative_targets(targets$target) %>%
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE)
#' 4. Solve the planning problem
s7 <- prioritizr::solve(p7)
#' ### Climate-smart spatial design (Rate of Oxygen Decline)
#'
#' 1. Prepare climate layer
ClimateFeature <- create_FeatureLayer(aqua_sf, metric_name = "o2os", colname = "slpTrends", metric_df = roc_o2os_SSP585)
#' 3. Set up the spatial planning problem
out_sf <- cbind(aqua_sf, ClimateFeature, cost)
p8 <- prioritizr::problem(out_sf, features, "Cost_squish") %>%
add_min_set_objective() %>%
add_relative_targets(targets$target) %>%
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE)
#' 4. Solve the planning problem
s8 <- prioritizr::solve(p8)
#' ### Climate-smart spatial design (Climate Velocity)
#'
#' 1. Prepare climate layer
ClimateFeature <- create_FeatureLayer(aqua_sf, metric_name = "velocity", colname = "voccMag", metric_df = velocity_SSP585)
#' 3. Set up the spatial planning problem
out_sf <- cbind(aqua_sf, ClimateFeature, cost)
p9 <- prioritizr::problem(out_sf, features, "Cost_squish") %>%
add_min_set_objective() %>%
add_relative_targets(targets$target) %>%
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE)
#' 4. Solve the planning problem
s9 <- prioritizr::solve(p9)
# Feature representation
list <- c("feature_tos_585", "feature_phos_585", "feature_o2os_585", "feature_velocity_585")
problem_list <- list(p6, p7, p8, p9)
solution_list <- list(s6, s7, s8, s9)
for (i in 1:length(list)) {
tmp_df <- represent_feature(problem_list[[i]], solution_list[[i]], list[i])
feat_rep <- left_join(tmp_df, feat_rep)
}
feat_rep
# Computing summaries for all "feature" approach designs
run_list <- c("feature_tos_585", "feature_phos_585", "feature_o2os_585",
"feature_velocity_585")
solution_list <- list(s6, s7, s8, s9)
emptyList <- list()
for (i in 1:length(run_list)) {
emptyList[[i]] <- compute_summary(solution_list[[i]], total_area, PU_size, run_list[i], Cost = "Cost_squish")
}
featureSummary <- do.call(rbind, emptyList)
# Get the mean rate of climate warming for all designs
warming <- get_ClimateSummary(solution_list, climate_layer = roc_tos_SSP585, metric = "tos", col_scenario = "585", col_approach = "feature", col_run = run_list) %>%
left_join(., featureSummary)
# Get the mean rate of ocean acidification for all designs
acidification <- get_ClimateSummary(solution_list, climate_layer = roc_phos_SSP585, metric = "phos", col_scenario = "585", col_approach = "feature", col_run = run_list) %>%
left_join(., warming, by = c("run", "scenario", "approach"))
# Get the mean rate of declining oxygen concentration for all designs
oxygen <- get_ClimateSummary(solution_list, climate_layer = roc_o2os_SSP585, metric = "o2os", col_scenario = "585", col_approach = "feature", col_run = run_list) %>%
left_join(., acidification, by = c("run", "scenario", "approach"))
# Get the mean climate velocity for all designs, then bind it with the summary
summary <- get_ClimateSummary(solution_list, climate_layer = velocity_SSP585, metric = "velocity", col_scenario = "585", col_approach = "feature", col_run = run_list) %>%
left_join(., oxygen, by = c("run", "scenario", "approach")) %>%
rbind(., summary)
head(summary)
#' Get Kappa Correlation Matrix
list <- c("uninformed", "feature_tos_585", "feature_phos_585", "feature_o2os_585", "feature_velocity_585")
object_list <- list() # empty list
solution_list <- list(s1, s6, s7, s8, s9)
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], list[i])
object_list[[i]] <- obj
}
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
#' ### Low-regret Areas
#' To create low-regret climate-smart design, we should only select areas that have been selected for all climate-smart designs utilizing different climate metrics
# Select solutions for all climate-smart designs
solution_list <- list(s6, s7, s8, s9)
col_names <- c("feature_tos_585", "feature_phos_585", "feature_o2os_585", "feature_velocity_585")
LowRegret_Feature <- create_LowRegretSf(solution_list, col_names, PUs)
(gg_LowRegret <- plot_lowregret(LowRegret_Feature, land))
gg_LowRegret
#' Check low-regret summary
LowRegret_SummaryFeature <- compute_summary(LowRegret_Feature, total_area, PU_size, "low_regret", Cost = "Cost_squish") %>%
mutate(approach = "feature", scenario = "585")
print(LowRegret_SummaryFeature)
scaling_PenaltyWarming <- create_Scaling(cost$Cost_squish, roc_tos_SSP585$slpTrends, "tos")
#' 2. Get list of features
features <- aqua_sf %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
names()
#' 3. Set up the spatial planning problem
out_sf <- cbind(aqua_sf, roc_tos_SSP585, cost)
scaling <- scaling_PenaltyWarming %>% filter(scaling == 30) %>% pull() # get scaling for 30%
p10 <- prioritizr::problem(out_sf, features, "Cost_squish") %>%
add_min_set_objective() %>%
add_relative_targets(0.4) %>% # target is 40% for all features.
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE) %>%
add_linear_penalties(scaling, data = "slpTrends")
#' 4. Solve the planning problem
s10 <- prioritizr::solve(p10)
#' ### Climate-smart spatial design (Rate of Ocean Acidification)
#' 1. Prepare climate layer
scaling_PenaltyAcidification <- create_Scaling(cost$Cost_squish, roc_phos_SSP585$slpTrends, "phos")
#' 2. Get list of features
#' Feature list should be the same as above.
#' 3. Set up the spatial planning problem
out_sf <- cbind(aqua_sf, roc_phos_SSP585, cost)
scaling <- scaling_PenaltyAcidification %>% filter(scaling == 30) %>% pull() # get scaling for 30%
p11 <- prioritizr::problem(out_sf, features, "Cost_squish") %>%
add_min_set_objective() %>%
add_relative_targets(0.4) %>% # target is 40% for all features.
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE) %>%
add_linear_penalties(scaling, data = "slpTrends")
#' 4. Solve the planning problem
s11 <- prioritizr::solve(p11)
#' ### Climate-smart spatial design (Rate of Declining Oxygen Concentration)
#' 1. Prepare climate layer
scaling_PenaltyOxygen <- create_Scaling(cost$Cost_squish, roc_o2os_SSP585$slpTrends, "o2os")
#' 2. Get list of features
#' Feature list should be the same as above.
#' 3. Set up the spatial planning problem
out_sf <- cbind(aqua_sf, roc_o2os_SSP585, cost)
scaling <- scaling_PenaltyOxygen %>% filter(scaling == 30) %>% pull() # get scaling for 30%
p12 <- prioritizr::problem(out_sf, features, "Cost_squish") %>%
add_min_set_objective() %>%
add_relative_targets(0.4) %>% # target is 40% for all features.
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE) %>%
add_linear_penalties(scaling, data = "slpTrends")
#' 4. Solve the planning problem
s12 <- prioritizr::solve(p12)
#' ### Climate-smart spatial design (Climate Velocity)
#' 1. Prepare climate layer
scaling_PenaltyVelocity <- create_Scaling(cost$Cost_squish, velocity_SSP585$voccMag, "velocity")
#' 2. Get list of features
#' Feature list should be the same as above.
#' 3. Set up the spatial planning problem
out_sf <- cbind(aqua_sf, velocity_SSP585, cost)
scaling <- scaling_PenaltyVelocity %>% filter(scaling == 30) %>% pull() # get scaling for 30%
p13 <- prioritizr::problem(out_sf, features, "Cost_squish") %>%
add_min_set_objective() %>%
add_relative_targets(0.4) %>% # target is 40% for all features.
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE) %>%
add_linear_penalties(scaling, data = "voccMag")
#' 4. Solve the planning problem
s13 <- prioritizr::solve(p13)
# Feature representation
list <- c("penalty_tos_585", "penalty_phos_585", "penalty_o2os_585", "penalty_velocity_585")
problem_list <- list(p10, p11, p12, p13)
solution_list <- list(s10, s11, s12, s13)
for (i in 1:length(list)) {
tmp_df <- represent_feature(problem_list[[i]], solution_list[[i]], list[i])
feat_rep <- left_join(tmp_df, feat_rep)
}
# Computing summaries for all "penalty" approach designs
run_list <- c("penalty_tos_585", "penalty_phos_585", "penalty_o2os_585",
"penalty_velocity_585")
solution_list <- list(s10, s11, s12, s13)
emptyList <- list()
for (i in 1:length(run_list)) {
emptyList[[i]] <- compute_summary(solution_list[[i]], total_area, PU_size, run_list[i], Cost = "Cost_squish")
}
penaltySummary <- do.call(rbind, emptyList)
# Get the mean rate of climate warming for all designs
warming <- get_ClimateSummary(solution_list, climate_layer = roc_tos_SSP585, metric = "tos", col_scenario = "585", col_approach = "penalty", col_run = run_list) %>%
left_join(., penaltySummary)
# Get the mean rate of ocean acidification for all designs
acidification <- get_ClimateSummary(solution_list, climate_layer = roc_phos_SSP585, metric = "phos", col_scenario = "585", col_approach = "penalty", col_run = run_list) %>%
left_join(., warming, by = c("run", "scenario", "approach"))
# Get the mean rate of declining oxygen concentration for all designs
oxygen <- get_ClimateSummary(solution_list, climate_layer = roc_o2os_SSP585, metric = "o2os", col_scenario = "585", col_approach = "penalty", col_run = run_list) %>%
left_join(., acidification, by = c("run", "scenario", "approach"))
# Get the mean climate velocity for all designs, then bind it with the summary
summary <- get_ClimateSummary(solution_list, climate_layer = velocity_SSP585, metric = "velocity", col_scenario = "585", col_approach = "penalty", col_run = run_list) %>%
left_join(., oxygen, by = c("run", "scenario", "approach")) %>%
rbind(., summary)
head(summary)
#' Get Kappa Correlation Matrix
list <- c("uninformed", "penalty_tos_585", "penalty_phos_585", "penalty_o2os_585", "penalty_velocity_585")
object_list <- list() # empty list
solution_list <- list(s1, s10, s11, s12, s13)
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], list[i])
object_list[[i]] <- obj
}
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
#' ### Low-regret Areas
#' To create low-regret climate-smart design, we should only select areas that have been selected for all climate-smart designs utilizing different climate metrics
# Select solutions for all climate-smart designs
solution_list <- list(s10, s11, s12, s13)
col_names <- c("penalty_tos_585", "penalty_phos_585", "penalty_o2os_585", "penalty_velocity_585")
LowRegret_Penalty <- create_LowRegretSf(solution_list, col_names, PUs)
#' Check low-regret summary
LowRegret_SummaryPenalty <- compute_summary(low_regret, total_area, PU_size, "low_regret", Cost = "Cost_squish") %>%
mutate(approach = "penalty", scenario = "585")
#' Check low-regret summary
LowRegret_SummaryPenalty <- compute_summary(LowRegret_Penalty, total_area, PU_size, "low_regret", Cost = "Cost_squish") %>%
mutate(approach = "penalty", scenario = "585")
print(LowRegret_SummaryPenalty)
#' ### Graph summary of plots
df <- summary %>%
dplyr::mutate(metric = case_when(str_detect(run, pattern = "tos") ~ "tos",
str_detect(run, pattern = "phos") ~ "phos",
str_detect(run, pattern = "o2os") ~ "o2os",
str_detect(run, pattern = "velocity") ~ "velocity",
str_detect(run, pattern = "uninformed") ~ "uninformed")) %>%
dplyr::mutate(approach = ifelse(str_detect(run, pattern = "uninformed"), yes = "uninformed", no = approach))
LowRegret_SummaryAll <- LowRegret_SummaryFeature %>%
rbind(., LowRegret_SummaryPercentile) %>%
rbind(., LowRegret_SummaryPenalty)
LowRegret_SummaryAll
# Kappa
list <- c("LowRegret_Feature_585", "LowRegret_Percentile_585", "LowRegret_Penalty_585")
object_list <- list() # empty list
solution_list <- list(LowRegret_Feature, LowRegret_Percentile, LowRegret_Penalty)
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], list[i])
object_list[[i]] <- obj
}
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
# Check the Climate Metrics of the Low-Regret Areas
LowRegretFeature_df <- LowRegret_Feature %>%
as_tibble() %>%
dplyr::select(-feature_velocity_585, -feature_o2os_585, -feature_phos_585, -feature_tos_585, -Cost, -Cost_squish) %>%
dplyr::rename(SelectionFeature = selection) %>%
left_join(., roc_tos_SSP585 %>% as_tibble() %>% dplyr::select(slpTrends, geometry), by = "geometry") %>%
dplyr::rename(tos = slpTrends, Feature_Solution = solution_1) %>%
left_join(., roc_phos_SSP585 %>% as_tibble() %>% dplyr::select(slpTrends, geometry), by = "geometry") %>%
dplyr::rename(phos = slpTrends) %>%
left_join(., roc_o2os_SSP585 %>% as_tibble() %>% dplyr::select(slpTrends, geometry), by = "geometry") %>%
dplyr::rename(o2os = slpTrends) %>%
left_join(., velocity_SSP585 %>% as_tibble() %>% dplyr::select(voccMag, geometry), by = "geometry") %>%
dplyr::rename(velocity = voccMag)
LowRegretPercentile_df <- LowRegret_Percentile %>%
as_tibble() %>%
dplyr::select(-percentile_velocity_585, -percentile_o2os_585, -percentile_phos_585, -percentile_tos_585, -Cost, -Cost_squish) %>%
dplyr::rename(SelectionPercentile = selection, Percentile_Solution = solution_1)
LowRegretPenalty_df <- LowRegret_Penalty %>%
as_tibble() %>%
dplyr::select(-penalty_velocity_585, -penalty_o2os_585, -penalty_phos_585, -penalty_tos_585, -Cost, -Cost_squish) %>%
dplyr::rename(SelectionPenalty = selection, Penalty_Solution = solution_1)
LowRegretAll_sf <- left_join(LowRegretFeature_df, LowRegretPercentile_df, by = c("cellID", "geometry")) %>%
left_join(., LowRegretPenalty_df, by = c("cellID", "geometry")) %>%
dplyr::mutate(SelectionAll = case_when((SelectionFeature == 4 & SelectionPercentile == 4 & SelectionPenalty == 4) ~ 1,
TRUE ~ 0)) %>%
st_as_sf(sf_column_name = "geometry")
LowRegret_SummaryAll <- lowRegret_ClimateSummary(df = LowRegretAll_sf, approach_column = "Feature_Solution") %>%
rbind(., lowRegret_ClimateSummary(df = LowRegretAll_sf, approach_column = "Percentile_Solution")) %>%
rbind(., lowRegret_ClimateSummary(df = LowRegretAll_sf, approach_column = "Penalty_Solution")) %>%
as_tibble() %>%
left_join(., LowRegret_SummaryAll, by = "approach")
# Cost + Area
ggComparison_Cost_LowRegret <- plot_LowRegretStatistics(LowRegret_SummaryAll, col_name = "log10(total_cost)", y_axis = "log10(cost)")
ggComparison_Cost_LowRegret
#' Create Low-Regret Areas across all Low-Regret Spatial Plans for the three approaches
LowRegret_sf <- LowRegretAll_sf %>%
dplyr::rename(solution_1 = SelectionAll) %>%
dplyr::mutate(solution_1 = as.logical(solution_1))
#' Check the summary
df <- cbind(LowRegret_sf, cost)
summary_lr <- compute_summary(df, total_area, PU_size, run_name = "LowRegret_All", Cost = "Cost_squish")
print(summary_lr)
?saveRDS
# Saving solutions
output_solutions <- "Output/solutions/"
saveRDS(s1, paste0(output_solutions, "s1-uninformed.rds"))
xx <- readRDS("Output/solutions/s1-uninformed.rds")
xx
# Saving solutions
output_solutions <- "Output/solutions/"
# list of solutions to be saved
solution_list <- list(s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13)
fileLabel_list <- c("s1-uninformed", "s2-percentile-tos-585", "s3-percentile-phos-585", "s4-percentile-o2os-585", "s5-percentile-velocity-585", "s6-feature-tos-585", "s7-feature-phos-585", "s8-feature-o2os-585", "s9-feature-velocity-585", "s10-penalty-tos-585", "s11-penalty-phos-585", "s12-penalty-o2os-585", "s13-penalty-velocity-585")
for(i in 1:length(solution_list)) {
saveRDS(solution_list[[i]], paste0(output_solutions, fileLabel_list[i]))
}
fileLabel_list <- c("s1-uninformed.rds", "s2-percentile-tos-585.rds", "s3-percentile-phos-585.rds", "s4-percentile-o2os-585.rds", "s5-percentile-velocity-585.rds", "s6-feature-tos-585.rds", "s7-feature-phos-585.rds", "s8-feature-o2os-585.rds", "s9-feature-velocity-585.rds", "s10-penalty-tos-585.rds", "s11-penalty-phos-585.rds", "s12-penalty-o2os-585.rds", "s13-penalty-velocity-585.rds")
for(i in 1:length(solution_list)) {
saveRDS(solution_list[[i]], paste0(output_solutions, fileLabel_list[i]))
}
saveRDS(s1, paste0(output_solutions, fileLabel_list[1]))
feat_rep
# Saving feature representation
summary_directory <- "Output/summary/"
write.csv(feat_rep, paste0(summary_directory, "feature_representation.csv"))
# Saving summaries
write.csv(summary, paste0(summary_directory, "summary_statistics.csv"))
#' 5. Check summary statistics
# Feature Representation
feat_rep <- represent_feature(p1, s1, "uninformed")
eval_feature_representation_summary(p7, s7)
eval_feature_representation_summary(p7, s7[,'solution_1'])
eval_feature_representation_summary(p7, s7[,'solution_1']) %>%
)
head(feat_rep)
#' 6. Check summary statistics
# Feature Representation
temp <- represent_feature(p2, s2, "percentile_tos_585")
feat_rep <- left_join(temp, feat_rep)
#' ### Summary of all climate-smart designs
#' 1. Feature Representation
list <- c("percentile_phos_585", "percentile_o2os_585", "percentile_velocity_585")
problem_list <- list(p3, p4, p5)
solution_list <- list(s3, s4, s5)
for (i in 1:length(list)) {
tmp_df <- represent_feature(problem_list[[i]], solution_list[[i]], list[i])
feat_rep <- left_join(tmp_df, feat_rep)
}
feat_rep
eval_feature_representation_summary(p7, s7[, 'solution_1'])
eval_feature_representation_summary(p3, s3[, 'solution_1'])
feat_rep
colnames(feat_rep) %>% as_tibble() %>% print(n = Inf)
unique(feature) %>% as_tibble() %>% print(n = Inf)
unique(feat_rep$feature) %>% as_tibble() %>% print(n = Inf)
feat_rep
# Feature representation
xx <- feat_rep %>%
add_row(feature = "climate_layer", percentile_velocity_585 = NA, percentile_o2os_585 = NA, percentile_phos_585 = NA,
percentile_tos_585 = NA, uninformed = NA)
list <- c("feature_tos_585", "feature_phos_585", "feature_o2os_585", "feature_velocity_585")
problem_list <- list(p6, p7, p8, p9)
solution_list <- list(s6, s7, s8, s9)
for (i in 1:length(list)) {
tmp_df <- represent_feature(problem_list[[i]], solution_list[[i]], list[i])
xx <- left_join(tmp_df, xx)
}
xx
# This function extracts the percentage of each feature that is selected
represent_feature <- function(p, s, col_name) {
feat_rep <- eval_feature_representation_summary(p, s[, 'solution_1']) %>%
dplyr::select(feature, relative_held) %>%
mutate(relative_held = relative_held*100) %>%
rename(!!sym(col_name) := relative_held)
if(col_name %in% c("percentile_tos_585", "percentile_phos_585", "percentile_o2os_585", "percentile_velocity_585")) {
feat_rep %<>% mutate(!!sym(col_name) := .data[[ col_name ]]*0.5) # calculating the effective protection allotted for the climate layer (40%)
}
return(feat_rep)
}
# Feature representation
xx <- feat_rep %>%
add_row(feature = "climate_layer", percentile_velocity_585 = NA, percentile_o2os_585 = NA, percentile_phos_585 = NA,
percentile_tos_585 = NA, uninformed = NA)
list <- c("feature_tos_585", "feature_phos_585", "feature_o2os_585", "feature_velocity_585")
problem_list <- list(p6, p7, p8, p9)
solution_list <- list(s6, s7, s8, s9)
for (i in 1:length(list)) {
tmp_df <- represent_feature(problem_list[[i]], solution_list[[i]], list[i])
xx <- left_join(tmp_df, xx)
}
xx
feat_rep
View(xx)
# Feature representation
feat_rep %<>%
add_row(feature = "climate_layer", percentile_velocity_585 = NA, percentile_o2os_585 = NA, percentile_phos_585 = NA,
percentile_tos_585 = NA, uninformed = NA)
feat_rep
list <- c("feature_tos_585", "feature_phos_585", "feature_o2os_585", "feature_velocity_585")
problem_list <- list(p6, p7, p8, p9)
solution_list <- list(s6, s7, s8, s9)
for (i in 1:length(list)) {
tmp_df <- represent_feature(problem_list[[i]], solution_list[[i]], list[i])
feat_rep <- left_join(tmp_df, feat_rep)
}
feat_rep
# Feature representation
list <- c("penalty_tos_585", "penalty_phos_585", "penalty_o2os_585", "penalty_velocity_585")
problem_list <- list(p10, p11, p12, p13)
solution_list <- list(s10, s11, s12, s13)
for (i in 1:length(list)) {
tmp_df <- represent_feature(problem_list[[i]], solution_list[[i]], list[i])
feat_rep <- left_join(tmp_df, feat_rep)
}
View(feat_rep)
xx
feat_rep <- xx
# Feature representation
list <- c("penalty_tos_585", "penalty_phos_585", "penalty_o2os_585", "penalty_velocity_585")
problem_list <- list(p10, p11, p12, p13)
solution_list <- list(s10, s11, s12, s13)
tmp_df <- represent_feature(problem_list[[1]], solution_list[[1]], list[1])
tmp_df
# This function extracts the percentage of each feature that is selected
represent_feature <- function(p, s, col_name) {
feat_rep <- eval_feature_representation_summary(p, s[, 'solution_1']) %>%
dplyr::select(feature, relative_held) %>%
mutate(relative_held = relative_held*100) %>%
rename(!!sym(col_name) := relative_held)
if(col_name %in% c("percentile_tos_585", "percentile_phos_585", "percentile_o2os_585", "percentile_velocity_585")) {
feat_rep %<>% mutate(!!sym(col_name) := .data[[ col_name ]]*0.5) # calculating the effective protection allotted for the climate layer (40%)
} else if(col_name %in% c("penalty_tos_585", "penalty_phos_585", "penalty_o2os_585", "penalty_velocity_585")) {
feat_rep %<>% add_row(feature = "climate_layer", !!sym(col_name) := NA)
}
return(feat_rep)
}
tmp_df <- represent_feature(problem_list[[1]], solution_list[[1]], list[1])
tmp_df
tmp_df %>% filter(feature == "climate_layer")
feat_rep
# Feature representation
list <- c("penalty_tos_585", "penalty_phos_585", "penalty_o2os_585", "penalty_velocity_585")
problem_list <- list(p10, p11, p12, p13)
solution_list <- list(s10, s11, s12, s13)
for (i in 1:length(list)) {
tmp_df <- represent_feature(problem_list[[i]], solution_list[[i]], list[i])
feat_rep <- left_join(tmp_df, feat_rep)
}
feat_rep
# Saving feature representation
summary_directory <- "Output/summary/"
write.csv(feat_rep, paste0(summary_directory, "feature_representation.csv"))
