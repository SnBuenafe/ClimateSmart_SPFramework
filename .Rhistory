roc_tos_SSP585
s6
s34
clear
for(i in 1:length(names)) {
list[[i]] <- make_kernel(solution_list[[i]], names[i], group_name, metric = roc_tos_SSP585)
}
solution <- solution_list[[1]]
metric_df = roc_tos_SSP585
metric_df <- metric %>%
as_tibble()
metric <- metric %>%
as_tibble()
metric <- roc_tos_SSP585
metric_df <- metric %>%
as_tibble()
df <- solution %>%
as_tibble() %>%
left_join(., metric_df, by = "geometry")
df
df <- solution %>%
as_tibble() %>%
left_join(., metric_df, by = "geometry") %>%
dplyr::filter(solution_1 == 1) %>%
dplyr::select(transformed)
unique(colnames(df))
unique(colnames(df)) %>% print(n = Inf)
unique(colnames(df)) %>% as_tibble() %>%  print(n = Inf)
metric_df <- metric %>%
as_tibble()
df <- solution %>%
as_tibble() %>%
left_join(., metric_df) %>%
dplyr::filter(solution_1 == 1) %>%
dplyr::select(transformed) %>%
dplyr::rename(!!sym(name) := transformed) %>%
pivot_longer(!!sym(name), names_to = group, values_to = "transformed")
# Make Kernel for Climate Data
make_kernel <- function(solution, name, group, metric = NA) {
if(is.na(metric)) {
df <- solution %>%
as_tibble() %>%
dplyr::filter(solution_1 == 1) %>%
dplyr::select(transformed) %>%
dplyr::rename(!!sym(name) := transformed) %>%
pivot_longer(!!sym(name), names_to = group, values_to = "transformed")
} else {
metric_df <- metric %>%
as_tibble()
df <- solution %>%
as_tibble() %>%
left_join(., metric_df) %>%
dplyr::filter(solution_1 == 1) %>%
dplyr::select(transformed) %>%
dplyr::rename(!!sym(name) := transformed) %>%
pivot_longer(!!sym(name), names_to = group, values_to = "transformed")
}
return(df)
}
#### Climate-smart metrics of LR areas ####
# Climate Warming
# Kernel Density Plots
solution_list <- list(s6, s2, s10, s34)
list <- list() # empty list
names <- c("Feature", "Percentile", "Penalty", "Climate Priority Area")
group_name = "approach"
for(i in 1:length(names)) {
list[[i]] <- make_kernel(solution_list[[i]], names[i], group_name, metric = roc_tos_SSP585)
}
df <- do.call(rbind, list)
df
ggRidge <- ggplot(data = df, aes(x = transformed, y = approach, group = approach, fill = stat(x))) +
geom_density_ridges_gradient(scale = 3) +
scale_fill_viridis_c(name = expression('Δ'^"o"*'C yr'^"-1"*''), option = "C") +
geom_vline(xintercept = climate$mean_climate_warming,
linetype = "dashed", color = "tan1", size = 0.5) +
theme_classic()
ggRidge
ggRidge
ggsave(filename = "ClimateWarmingDist-ApproachTheme-tos.png",
plot = ggRidge, width = 10, height = 6, dpi = 300,
path = "Figures/") # save plot
# Ocean Acidification
# Kernel Density Plots
list <- list() # empty list
names <- c("Feature", "Percentile", "Penalty", "Climate Priority Area")
group_name = "approach"
for(i in 1:length(names)) {
list[[i]] <- make_kernel(solution_list[[i]], names[i], group_name, metric = roc_phos_SSP585)
}
df <- do.call(rbind, list)
df
feature <- read_csv(paste0(output_summary, "MetricTheme_Feature_Summary.csv")) %>% dplyr::filter(grepl("phos", run)) %>% dplyr::select(mean_ocean_acidification, run)
feature
percentile <- read_csv(paste0(output_summary, "MetricTheme_Percentile_Summary.csv")) %>% dplyr::filter(grepl("phos", run)) %>% dplyr::select(mean_ocean_acidification, run)
penalty <- read_csv(paste0(output_summary, "MetricTheme_Penalty_Summary.csv")) %>% dplyr::filter(grepl("phos", run)) %>% dplyr::select(mean_ocean_acidification, run)
climatePriorityArea <- read_csv(paste0(output_summary, "MetricTheme_ClimatePriorityArea_Summary.csv")) %>% dplyr::filter(grepl("phos", run)) %>% dplyr::select(mean_ocean_acidification, run)
climate <- bind_rows(feature, percentile, penalty, climatePriorityArea)
climate
ggRidge <- ggplot(data = df, aes(x = transformed, y = approach, group = approach, fill = stat(x))) +
geom_density_ridges_gradient(scale = 1.5) +
scale_fill_viridis_c(name = expression('Δ pH yr'^"-1"*''), option = "A") +
geom_vline(xintercept = climate$mean_ocean_acidification,
linetype = "dashed", color = "tan1", size = 0.5) +
theme_classic()
ggRidge
feature <- read_csv(paste0(output_summary, "MetricTheme_Feature_Summary.csv")) %>% dplyr::filter(grepl("phos", run)) %>% dplyr::select(mean_ocean_acidification, run)
percentile <- read_csv(paste0(output_summary, "MetricTheme_Percentile_Summary.csv")) %>% dplyr::filter(grepl("phos", run)) %>% dplyr::select(mean_ocean_acidification, run)
penalty <- read_csv(paste0(output_summary, "MetricTheme_Penalty_Summary.csv")) %>% dplyr::filter(grepl("phos", run)) %>% dplyr::select(mean_ocean_acidification, run)
climatePriorityArea <- read_csv(paste0(output_summary, "MetricTheme_ClimatePriorityArea_Summary.csv")) %>% dplyr::filter(grepl("phos", run)) %>% dplyr::select(mean_ocean_acidification, run)
climate <- bind_rows(feature, percentile, penalty, climatePriorityArea)
climate
df
ggRidge <- ggplot(data = df, aes(x = transformed, y = approach, group = approach, fill = stat(x))) +
geom_density_ridges_gradient(scale = 1.5) +
scale_fill_viridis_c(name = expression('Δ pH yr'^"-1"*''), option = "A") +
geom_vline(xintercept = climate$mean_ocean_acidification,
linetype = "dashed", color = "tan1", size = 0.5) +
theme_classic()
ggRidge
climate
df
climate
roc_phos_SSP585
# Ocean Acidification
# Kernel Density Plots
list <- list() # empty list
names <- c("Feature", "Percentile", "Penalty", "Climate Priority Area")
group_name = "approach"
for(i in 1:length(names)) {
list[[i]] <- make_kernel(solution_list[[i]], names[i], group_name, metric = roc_phos_SSP585)
}
list
roc
roc_phos_SSP585
# Make Kernel for Climate Data
make_kernel <- function(solution, name, group, metric = NA) {
if(is.na(metric)) {
df <- solution %>%
as_tibble() %>%
dplyr::filter(solution_1 == 1) %>%
dplyr::select(transformed) %>%
dplyr::rename(!!sym(name) := transformed) %>%
pivot_longer(!!sym(name), names_to = group, values_to = "transformed")
} else {
metric_df <- metric %>%
as_tibble()
df <- solution %>%
as_tibble() %>%
left_join(., metric_df) %>%
dplyr::filter(solution_1 == 1) %>%
dplyr::select(transformed) %>%
dplyr::rename(!!sym(name) := transformed) %>%
pivot_longer(!!sym(name), names_to = group, values_to = "transformed")
}
return(df)
}
for(i in 1:length(names)) {
list[[i]] <- make_kernel(solution_list[[i]], names[i], group_name, metric = roc_phos_SSP585)
}
rm(metric)
for(i in 1:length(names)) {
list[[i]] <- make_kernel(solution_list[[i]], names[i], group_name, metric = roc_phos_SSP585)
}
df <- do.call(rbind, list)
df
View(df)
s7 <- readRDS("Output/solutions/s7-EM-Feature-phos-585.rds")
s3 <- readRDS("Output/solutions/s3-EM-Percentile-phos-585.rds")
s11 <- readRDS("Output/solutions/s11-EM-Penalty-phos-585.rds")
s35 <- readRDS("Output/solutions/s35-EM-ClimatePriorityArea-phos-585.rds")
# Ocean Acidification
# Kernel Density Plots
solution_list <- list(s7, s3, s11, s35)
list <- list() # empty list
names <- c("Feature", "Percentile", "Penalty", "Climate Priority Area")
group_name = "approach"
for(i in 1:length(names)) {
list[[i]] <- make_kernel(solution_list[[i]], names[i], group_name, metric = roc_phos_SSP585)
}
df <- do.call(rbind, list)
df
ggRidge <- ggplot(data = df, aes(x = transformed, y = approach, group = approach, fill = stat(x))) +
geom_density_ridges_gradient(scale = 1.5) +
scale_fill_viridis_c(name = expression('Δ pH yr'^"-1"*''), option = "A") +
geom_vline(xintercept = climate$mean_ocean_acidification,
linetype = "dashed", color = "tan1", size = 0.5) +
theme_classic()
ggRidge
ggsave(filename = "OceanAcidificationDist-ApproachTheme-phos.png",
plot = ggRidge, width = 10, height = 6, dpi = 300,
path = "Figures/") # save plot
s8 <- readRDS("Output/solutions/s8-EM_Feature-o2os-585.rds")
s4 <- readRDS("Output/solutions/s4-EM-Percentile-o2os-585.rds")
s12 <- readRDS("Output/solutions/s12-EM-Penalty-o2os-585.rds")
s36 <- readRDS("Output/solutions/s36-EM-ClimatePriorityArea-o2os-585.rds")
# Rate of Declining Oxygen Concentration
# Kernel Density Plots
solution_list <- list(s8, s4, s12, s36)
list <- list() # empty list
names <- c("Feature", "Percentile", "Penalty", "Climate Priority Area")
group_name = "approach"
for(i in 1:length(names)) {
list[[i]] <- make_kernel(solution_list[[i]], names[i], group_name, metric = roc_o2os_SSP585)
}
df <- do.call(rbind, list)
df
s8
s8
s36
s12
s4 <- st_join(s4, roc_o2os_SSP585)
s4
s4
s4 <- readRDS("Output/solutions/s4-EM-Percentile-o2os-585.rds")
s4
s8 <- readRDS("Output/solutions/s8-EM-Feature-o2os-585.rds")
s8
# Rate of Declining Oxygen Concentration
# Kernel Density Plots
solution_list <- list(s8, s4, s12, s36)
list <- list() # empty list
names <- c("Feature", "Percentile", "Penalty", "Climate Priority Area")
group_name = "approach"
for(i in 1:length(names)) {
list[[i]] <- make_kernel(solution_list[[i]], names[i], group_name, metric = roc_o2os_SSP585)
}
df <- do.call(rbind, list)
df
feature <- read_csv(paste0(output_summary, "MetricTheme_Feature_Summary.csv")) %>% dplyr::filter(grepl("o2os", run)) %>% dplyr::select(mean_oxygen_decline, run)
percentile <- read_csv(paste0(output_summary, "MetricTheme_Percentile_Summary.csv")) %>% dplyr::filter(grepl("o2os", run)) %>% dplyr::select(mean_oxygen_decline, run)
penalty <- read_csv(paste0(output_summary, "MetricTheme_Penalty_Summary.csv")) %>% dplyr::filter(grepl("o2os", run)) %>% dplyr::select(mean_oxygen_decline, run)
climatePriorityArea <- read_csv(paste0(output_summary, "MetricTheme_ClimatePriorityArea_Summary.csv")) %>% dplyr::filter(grepl("o2os", run)) %>% dplyr::select(mean_oxygen_decline, run)
climate <- bind_rows(feature, percentile, penalty, climatePriorityArea)
climate
ggRidge <- ggplot(data = df, aes(x = transformed, y = approach, group = approach, fill = stat(x))) +
geom_density_ridges_gradient(scale = 3) +
scale_fill_viridis_c(name = expression('Δ mol m'^"-3"*' yr'^"-1"*''), option = "D") +
geom_vline(xintercept = climate$mean_oxygen_decline,
linetype = "dashed", color = "black", size = 0.5) +
theme_classic()
ggRidge
ggsave(filename = "OxygenDeclineDist-ApproachTheme-o2os.png",
plot = ggRidge, width = 10, height = 6, dpi = 300,
path = "Figures/") # save plot
s9 <- readRDS("Output/solutions/s9-EM-Feature-velocity-585.rds")
s5 <- readRDS("Output/solutions/s5-EM-Percentile-velocity-585.rds")
s13 <- readRDS("Output/solutions/s13-EM-Penalty-velocity-585.rds")
s37 <- readRDS("Output/solutions/s37-EM-ClimatePriorityArea-velocity-585.rds")
s5
# Climate velocity
# Kernel Density Plots
solution_list <- list(s9, s5, s13, s37)
list <- list() # empty list
names <- c("Feature", "Percentile", "Penalty", "Climate Priority Area")
group_name = "approach"
for(i in 1:length(names)) {
list[[i]] <- make_kernel(solution_list[[i]], names[i], group_name, metric = velocity_SSP585)
}
df <- do.call(rbind, list)
df
feature <- read_csv(paste0(output_summary, "MetricTheme_Feature_Summary.csv")) %>% dplyr::filter(grepl("velocity", run)) %>% dplyr::select(median_velocity, run)
feature
percentile <- read_csv(paste0(output_summary, "MetricTheme_Percentile_Summary.csv")) %>% dplyr::filter(grepl("velocity", run)) %>% dplyr::select(median_velocity, run)
penalty <- read_csv(paste0(output_summary, "MetricTheme_Penalty_Summary.csv")) %>% dplyr::filter(grepl("velocity", run)) %>% dplyr::select(median_velocity, run)
climatePriorityArea <- read_csv(paste0(output_summary, "MetricTheme_ClimatePriorityArea_Summary.csv")) %>% dplyr::filter(grepl("velocity", run)) %>% dplyr::select(median_velocity, run)
climate <- bind_rows(feature, percentile, penalty, climatePriorityArea)
ggRidge <- ggplot(data = df, aes(x = transformed, y = approach, group = approach, fill = stat(x))) +
geom_density_ridges_gradient(scale = 3) +
scale_fill_distiller(name = expression('km yr'^"-1"*''), palette = "RdYlBu") +
geom_vline(xintercept = climate$median_velocity,
linetype = "dashed", color = "khaki3", size = 0.5) +
theme_classic()
ggRidge
ggsave(filename = "ClimateVelocityDist-ApproachTheme-velocity.png",
plot = ggRidge, width = 10, height = 6, dpi = 300,
path = "Figures/") # save plot
# Ocean Acidification
# Kernel Density Plots
solution_list <- list(s7, s3, s11, s35)
list <- list() # empty list
names <- c("Feature", "Percentile", "Penalty", "Climate Priority Area")
group_name = "approach"
for(i in 1:length(names)) {
list[[i]] <- make_kernel(solution_list[[i]], names[i], group_name, metric = roc_phos_SSP585)
}
df <- do.call(rbind, list)
feature <- read_csv(paste0(output_summary, "MetricTheme_Feature_Summary.csv")) %>% dplyr::filter(grepl("phos", run)) %>% dplyr::select(mean_ocean_acidification, run)
percentile <- read_csv(paste0(output_summary, "MetricTheme_Percentile_Summary.csv")) %>% dplyr::filter(grepl("phos", run)) %>% dplyr::select(mean_ocean_acidification, run)
penalty <- read_csv(paste0(output_summary, "MetricTheme_Penalty_Summary.csv")) %>% dplyr::filter(grepl("phos", run)) %>% dplyr::select(mean_ocean_acidification, run)
climatePriorityArea <- read_csv(paste0(output_summary, "MetricTheme_ClimatePriorityArea_Summary.csv")) %>% dplyr::filter(grepl("phos", run)) %>% dplyr::select(mean_ocean_acidification, run)
climate <- bind_rows(feature, percentile, penalty, climatePriorityArea)
climate
ggRidge <- ggplot(data = df, aes(x = transformed, y = approach, group = approach, fill = stat(x))) +
geom_density_ridges_gradient(scale = 3) +
scale_fill_viridis_c(name = expression('Δ pH yr'^"-1"*''), option = "A") +
geom_vline(xintercept = climate$mean_ocean_acidification,
linetype = "dashed", color = "tan1", size = 0.5) +
theme_classic()
ggRidge
ggsave(filename = "OceanAcidificationDist-ApproachTheme-phos.png",
plot = ggRidge, width = 10, height = 6, dpi = 300,
path = "Figures/") # save plot
feature <- read_csv(paste0(output_summary, "MetricTheme_Feature_Summary.csv")) %>% dplyr::filter(grepl("tos", run)) %>% dplyr::select(mean_climate_warming, run)
percentile <- read_csv(paste0(output_summary, "MetricTheme_Percentile_Summary.csv")) %>% dplyr::filter(grepl("tos", run)) %>% dplyr::select(mean_climate_warming, run)
penalty <- read_csv(paste0(output_summary, "MetricTheme_Penalty_Summary.csv")) %>% dplyr::filter(grepl("tos", run)) %>% dplyr::select(mean_climate_warming, run)
climatePriorityArea <- read_csv(paste0(output_summary, "MetricTheme_ClimatePriorityArea_Summary.csv")) %>% dplyr::filter(grepl("tos", run)) %>% dplyr::select(mean_climate_warming, run)
climate <- bind_rows(feature, percentile, penalty, climatePriorityArea)
climate
feature <- read_csv(paste0(output_summary, "MetricTheme_Feature_Summary.csv")) %>% dplyr::filter(grepl("phos", run)) %>% dplyr::select(mean_ocean_acidification, run)
percentile <- read_csv(paste0(output_summary, "MetricTheme_Percentile_Summary.csv")) %>% dplyr::filter(grepl("phos", run)) %>% dplyr::select(mean_ocean_acidification, run)
penalty <- read_csv(paste0(output_summary, "MetricTheme_Penalty_Summary.csv")) %>% dplyr::filter(grepl("phos", run)) %>% dplyr::select(mean_ocean_acidification, run)
climatePriorityArea <- read_csv(paste0(output_summary, "MetricTheme_ClimatePriorityArea_Summary.csv")) %>% dplyr::filter(grepl("phos", run)) %>% dplyr::select(mean_ocean_acidification, run)
climate <- bind_rows(feature, percentile, penalty, climatePriorityArea)
climate
feature <- read_csv(paste0(output_summary, "MetricTheme_Feature_Summary.csv")) %>% dplyr::filter(grepl("o2os", run)) %>% dplyr::select(mean_oxygen_decline, run)
percentile <- read_csv(paste0(output_summary, "MetricTheme_Percentile_Summary.csv")) %>% dplyr::filter(grepl("o2os", run)) %>% dplyr::select(mean_oxygen_decline, run)
penalty <- read_csv(paste0(output_summary, "MetricTheme_Penalty_Summary.csv")) %>% dplyr::filter(grepl("o2os", run)) %>% dplyr::select(mean_oxygen_decline, run)
climatePriorityArea <- read_csv(paste0(output_summary, "MetricTheme_ClimatePriorityArea_Summary.csv")) %>% dplyr::filter(grepl("o2os", run)) %>% dplyr::select(mean_oxygen_decline, run)
climate <- bind_rows(feature, percentile, penalty, climatePriorityArea)
climate
climate$mean_oxygen_decline
feature <- read_csv(paste0(output_summary, "MetricTheme_Feature_Summary.csv")) %>% dplyr::filter(grepl("velocity", run)) %>% dplyr::select(median_velocity, run)
percentile <- read_csv(paste0(output_summary, "MetricTheme_Percentile_Summary.csv")) %>% dplyr::filter(grepl("velocity", run)) %>% dplyr::select(median_velocity, run)
penalty <- read_csv(paste0(output_summary, "MetricTheme_Penalty_Summary.csv")) %>% dplyr::filter(grepl("velocity", run)) %>% dplyr::select(median_velocity, run)
climatePriorityArea <- read_csv(paste0(output_summary, "MetricTheme_ClimatePriorityArea_Summary.csv")) %>% dplyr::filter(grepl("velocity", run)) %>% dplyr::select(median_velocity, run)
climate <- bind_rows(feature, percentile, penalty, climatePriorityArea)
climate
s6_LRplot <- readRDS("Output/lowregret/s6-EM-LowRegret-tos-585.rds")
s7_LRplot <- readRDS("Output/lowregret/s7-EM-LowRegret-phos-585.rds")
s8_LRplot <- readRDS("Output/lowregret/s8-EM-LowRegret-o2os-585.rds")
s9_LRplot <- readRDS("Output/lowregret/s9-EM-LowRegret-velocity-585.rds")
# Get intersection of all low-regret areas
solution_list <- list(s6_LRplot, s7_LRplot, s8_LRplot, s9_LRplot)
intersection <- intersect_lowregret(solution_list, run_list) %>%
dplyr::mutate(solution_1 = ifelse(selection == (length(run_list)*4), yes = 1, no = 0)) #*4 because 4 metrics TODO: Change it to 5 once including marine heatwaves
intersection
sum(intersection$solution_1 == 1)
library(vegan)
?adonis2
data(dune)
data(dune.env)
dune.env
adonis2(dune ~ Management*A1, data = dune.env)
dune
# restore session
session::restore.session("data/final/results.rda")
install.packages("session")
# restore session
session::restore.session("data/final/results.rda")
# restore session
session::restore.session(session_path("10"))
# set seed for reproducibility
set.seed(500)
# parse parameter settings
pars <- commandArgs(TRUE)
if (length(pars) > 0) {
cat(pars)
if (grepl("MODE", pars))
MODE <- strsplit(grep("MODE", pars, value = TRUE),
"=", fixed = TRUE)[[1]][[2]]
}
# load packages
library(magrittr)
library(sf)
library(dplyr)
# load parameters
general_parameters <- RcppTOML::parseTOML("code/parameters/general.toml")
general_parameters <- general_parameters[[MODE]]
install.packages("RcppTOML")
# load parameters
general_parameters <- RcppTOML::parseTOML("code/parameters/general.toml")
source("HelperFunctions/SpatPlan_Extras.R") # Load the extras, including functions and libraries
source("HelperFunctions/SpatPlan_HelperFxns_WestPac.R") # Load helper functions written specifically for this spatial planning project
output_solutions <- "Output/test/solutions/"
output_summary <- "Output/summary/"
output_lowregret <- "Output/lowregret/"
save_name <- "WestPacific"
PU_size = 669.9 # km2 (0.25 deg at equator)
Shape <- "Hexagon" # "Shape of PUs
#### Planning region ####
PUs <- read_rds(file.path("Output", paste(save_name, paste0("PlanningRegion.rds"), sep = "_")))
land <- ne_countries(scale = 'large', returnclass = 'sf') %>%
fSpatPlan_Convert2PacificRobinson() # Land masses; needed for plotting
### Climate Metrics ####
model_list <- c("CanESM5", "CMCC-ESM2", "GFDL-ESM4", "IPSL-CM6A-LR", "NorESM2-MM")
# Call function for each metric (adapted from Preliminaries script)
fcallMetrics2 <- function(metric,
model = NA, # if model = NA, approach is ensemble mean
path, # path with / at the end
scenario = NA
) {
scenario_obj <- c("SSP126", "SSP245", "SSP585")
scenario_path <- c("SSP 1-2.6", "SSP 2-4.5", "SSP 5-8.5")
if(is.na(model)) {
if(is.na(scenario)){
if (metric == "velocity") {
files <- list.files(file.path(path))
} else {
files <- list.files(file.path(path, metric))
}
for(i in 1:length(files)) {
df <- readRDS(file.path("Output",
paste(save_name, "ClimateLayer", files[i], sep = "_")))
if (metric == "velocity") {
assign(x = paste(metric, scenario_obj[i], sep = "_"), value = df, envir=.GlobalEnv)
} else {
assign(x = paste("roc", metric, scenario_obj[i], sep = "_"), value = df, envir=.GlobalEnv)
}
}
}
}
else{
if (scenario == "SSP126"){
scenario_path <- scenario_path[1]
} else if (scenario == "SSP245") {
scenario_path <- scenario_path[2]
} else if (scenario == "SSP585"){
scenario_path <- scenario_path[3]
}
files <- list.files(file.path(path, metric, scenario_path))
for(j in 1:length(files)) {
df <- readRDS(file.path("Output",
paste(save_name, "ClimateLayer", files[j], sep = "_")))
assign(x = paste(metric, model[j], scenario, sep = "_"), value = df, envir=.GlobalEnv)
}
}
}
### Conservation Features ####
aqua_sf <- read_rds(file.path("Output", paste(save_name, paste0("AquaMaps.rds"), sep = "_")))
# Changing to 1s and 0s
CutOff = 0.5
subset_aqua_sf <- aqua_sf %>%
as_tibble() %>%
dplyr::select(Doryrhamphus_excisus.excisus, Padina_sanctae.crucis, Platybelone_argalus.platyura,
Tylosurus_acus.acus, Tylosurus_acus.melanotus)
aqua_sf <- aqua_sf %>%
mutate_at(vars(colnames(subset_aqua_sf)),
funs(case_when(. >= CutOff ~ 1,
. <= CutOff ~ 0,
is.na(.) ~ 0)))
#### Cost layer ####
# Uniform Cost (Using the Area)
UniformCost <- PUs %>%
dplyr::mutate(cost = PU_size)
#clean environment
rm(subset_aqua_sf, CutOff, model_list)
# Initialise variables for loop
theme_names <- c("ClimatePriorityArea") #"feature", "penalty", "percentile"
scenario_names <- c("SSP126", "SSP245", "SSP585")
model_names <- c("CanESM5", "CMCC-ESM2", "GFDL-ESM4", "IPSL-CM6A-LR", "NorESM2-MM")
metric_names <- c("tos", "phos", "o2os", "velocity")
i <- 230 #ID starting location of CPA in Meta data file (excluding EM)
gc()
library(rlang)
for (theme_num in 1:length(theme_names)){ #not really necessary anymore: too much computer power needed if all approaches in one loop
for (scenario_num in 1:length(scenario_names)){
for (metric_num in 1:length(metric_names)){
for (model_num in 1:length(model_names)){
# 1. Rates of Climate warming
fcallMetrics2(metric = metric_names[1],path = "Data/Climate/ClimateMetrics_Ensemble", model = model_names, scenario = scenario_names[1]) # ensemble mean
metric_dat <- paste(metric_names[metric_num], model_names[model_num], scenario_names[scenario_num], sep = "_") #string at the moment: could be problem (https://stackoverflow.com/questions/6034655/convert-string-to-a-variable-name)
metric_dat <- eval_tidy(quo(!! sym(metric_dat)))
ImptFeat <- create_ImportantFeatureLayer(aqua_sf, metric_name = metric_names[metric_num], colname = "transformed",
metric_df =  metric_dat)
gc()#clear up space
RepFeat <- create_RepresentationFeature(ImptFeat, aqua_sf)
gc()
Features <- cbind(ImptFeat, RepFeat) %>%
dplyr::select(-geometry.1)
# 2. Get list of features
features <- Features %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
names()
# 3. Differentiate targets for important features and representative features
targets <- features %>% as_tibble() %>%
setNames(., "Species") %>%
add_column(target = 1) %>%
mutate(target = ifelse(str_detect(Species, pattern = ".1"), 25/95, 1))
# 4. Set up the spatial planning problem
out_sf <- cbind(Features, metric_dat, UniformCost)
p <- prioritizr::problem(out_sf, features, "cost") %>%
add_min_set_objective() %>%
add_relative_targets(targets$target) %>%
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE)
# 5. Solve the planning problem
s <- prioritizr::solve(p)
ID <- paste("s", i, sep= "")
print(paste(ID, metric_names[metric_num], model_names[model_num], scenario_names[scenario_num], sep = ","))#to double-check
ID_long <- paste(ID,model_names[model_num], theme_names[theme_num], metric_names[metric_num], scenario_names[scenario_num], sep = "-")
ID_save <- paste(ID_long, ".rds", sep = "")
saveRDS(s, paste0(output_solutions, ID_save)) # save solution
# 6. Plot the spatial design
ID_plot <- paste(ID_long, ".png", sep = "")
s_plot <- s %>%
mutate(solution_1 = as.logical(solution_1))
(ggSol <- fSpatPlan_PlotSolution(s_plot, PUs, land) + theme(axis.text = element_text(size = 25)))
ggsave(filename = ID_plot,
plot = ggSol, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
#clean up environment
rm(ImptFeat, RepFeat, Features, features, targets)
rm(list=ls(pattern=paste0(metric_names[1], ".*")))
gc()
i <- i+1 #set counter to new ID number
}
}
}
#if  ( i == 290 ) break;
}
