}
feat_rep
write.csv(feat_rep, paste0(output_summary, "MetricTheme_ClimatePriorityArea_FeatureRepresentation.csv")) # save
# Kernel distribution plots of targets
x <- feat_rep %>%
pivot_longer(!feature, names_to = "metric", values_to = "percent") %>%
dplyr::mutate(row_number = row_number(feature))
x
x
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c(str_detect(metric, "tos") = "#289E3D",
str_detect(metric, "phos") = "#E6C173",
str_detect(metric, "o2os") = "#81B0CC",
str_detect(metric, "velocity") = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
theme_classic()
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c(str_detect(metric, "tos") = "#289E3D",
str_detect(metric, "phos") = "#E6C173",
str_detect(metric, "o2os") = "#81B0CC",
str_detect(metric, "velocity") = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
theme_classic()
x
# Kernel distribution plots of targets
x <- feat_rep %>%
pivot_longer(!feature, names_to = "metric", values_to = "percent") %>%
dplyr::mutate(row_number = row_number(feature)) %>%
dplyr::mutate(metric = case_when(str_detect(metric, "tos") ~ "tos",
str_detect(metric, "phos") ~ "phos",
str_detect(metric, "o2os") ~ "o2os",
str_detect(metric, "velocity") ~ "velocity"))
x
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c("tos" = "#289E3D",
"phos" = "#E6C173",
"o2os" = "#81B0CC",
"velocity" = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
theme_classic()
ggRidge
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c("tos" = "#289E3D",
"phos" = "#E6C173",
"o2os" = "#81B0CC",
"velocity" = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
xlim(30, 100) +
theme_classic()
ggRidge
# Kernel distribution plots of targets
x <- feat_rep %>%
pivot_longer(!feature, names_to = "metric", values_to = "percent") %>%
dplyr::mutate(row_number = row_number(feature))
x
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c(`EM_ClimatePriorityArea_tos_585` = "#289E3D",
`EM_ClimatePriorityArea_phos_585` = "#E6C173",
`EM_ClimatePriorityArea_o2os_585` = "#81B0CC",
`EM_ClimatePriorityArea_velocity_585` = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
xlim(min(x$percent), 100) +
theme_classic()
ggRidge
ggsave(filename = "TargetDist-MetricTheme-ClimatePriorityArea.png",
plot = ggRidge, width = 15, height = 10, dpi = 300,
path = "Figures/") # save plot
# Summary
climateLayer_list <- list(roc_tos_SSP585, roc_phos_SSP585, roc_o2os_SSP585, velocity_SSP585)
metric_list <- c("tos", "phos", "o2os", "velocity")
df <- tibble(run = character()) # empty list
for(i in 1:length(names)) {
statistics <- compute_summary(solution_list[[i]], total_area, PU_size, names[i], Cost = "cost")
df <- rbind(statistics, df)
}
climate <- list() # empty list
for (i in 1:length(names)) {
climate[[i]] <- get_ClimateSummary(solution_list, climateLayer_list[[i]], metric_list[i], col_scenario = "585", col_approach = "ClimatePriorityArea", col_run = names, climateLayer = "single")
}
climate <- plyr::join_all(climate, by=c("run", "scenario", "approach"), type='left')
summary <- left_join(climate, df, by = "run")
summary
write.csv(summary, paste0(output_summary, "MetricTheme_ClimatePriorityArea_Summary.csv")) # save
ggArea <- plot_statistics(summary, col_name = "percent_area", y_axis = "% area", theme = "metric") + theme(axis.text = element_text(size = 25))
ggArea
ggsave(filename = "Area-MetricTheme-ClimatePriorityArea-585.png",
plot = ggArea, width = 7, height = 5, dpi = 300,
path = "Figures/") # save plot
# Get Kappa Correlation Matrix
list <- c("tos", "phos", "o2os", "velocity")
object_list <- list() # empty list
solution_list <- list(s34, s35, s36, s37)
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], list[i])
object_list[[i]] <- obj
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
#### Low-regret Areas ####
s5_LRplot <- create_LowRegretSf(solution_list, names, PUs)
saveRDS(s5_LRplot, paste0(output_lowregret, "s5-EM-LowRegret-ClimatePriorityArea-585.rds")) # save low-regret solution
ggLowRegret5 <- plot_lowregret(s5_LRplot, land) + theme(axis.text = element_text(size = 25))
ggLowRegret5
ggsave(filename = "LR-Metric-ClimatePriorityArea.png",
plot = ggLowRegret5, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
# Summary of low-regret
summary <- compute_summary(s5_LRplot, total_area, PU_size, "LR-ClimatePriorityArea-585", Cost = "cost")
write.csv(summary, paste0(output_summary, "MetricTheme_ClimatePriorityArea_LowRegretSummary.csv")) # save
summary
feat_rep <- read_csv("Output/summary/"MetricTheme_Penalty_FeatureRepresentation.csv") %>% dplyr::select(-1)
feat_rep <- read_csv("Output/summary/MetricTheme_Penalty_FeatureRepresentation.csv") %>% dplyr::select(-1)
source("HelperFunctions/SpatPlan_Extras.R") # Load the extras, including functions and libraries
source("HelperFunctions/SpatPlan_HelperFxns_WestPac.R") # Load helper functions written specifically for this spatial planning project
output_solutions <- "Output/solutions/"
source("HelperFunctions/SpatPlan_HelperFxns_WestPac.R") # Load helper functions written specifically for this spatial planning project
output_solutions <- "Output/solutions/"
output_summary <- "Output/summary/"
output_lowregret <- "Output/lowregret/"
# Load files
source("SpatPlan_Master_Preliminaries.R")
total_area = nrow(PUs) * PU_size
feat_rep <- read_csv("Output/summary/MetricTheme_Penalty_FeatureRepresentation.csv") %>% dplyr::select(-1)
# Kernel distribution plots of targets
x <- feat_rep %>%
pivot_longer(!feature, names_to = "metric", values_to = "percent") %>%
dplyr::mutate(row_number = row_number(feature))
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c(`EM_ClimatePriorityArea_tos_585` = "#289E3D",
`EM_ClimatePriorityArea_phos_585` = "#E6C173",
`EM_ClimatePriorityArea_o2os_585` = "#81B0CC",
`EM_ClimatePriorityArea_velocity_585` = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
xlim(min(x$percent), 100) +
theme_classic()
ggRidge
x
feat_rep <- read_csv("Output/summary/MetricTheme_ClimatePriorityArea_FeatureRepresentation.csv") %>% dplyr::select(-1)
# Kernel distribution plots of targets
x <- feat_rep %>%
pivot_longer(!feature, names_to = "metric", values_to = "percent") %>%
dplyr::mutate(row_number = row_number(feature))
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c(`EM_ClimatePriorityArea_tos_585` = "#289E3D",
`EM_ClimatePriorityArea_phos_585` = "#E6C173",
`EM_ClimatePriorityArea_o2os_585` = "#81B0CC",
`EM_ClimatePriorityArea_velocity_585` = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
xlim(min(x$percent), 100) +
theme_classic()
ggRidge
x
source("HelperFunctions/SpatPlan_Extras.R") # Load the extras, including functions and libraries
source("HelperFunctions/SpatPlan_HelperFxns_WestPac.R") # Load helper functions written specifically for this spatial planning project
output_solutions <- "Output/solutions/"
output_summary <- "Output/summary/"
output_lowregret <- "Output/lowregret/"
save_name <- "WestPacific"
PU_size = 669.9 # km2 (0.25 deg at equator)
Shape <- "Hexagon" # "Shape of PUs
PUs <- read_rds(file.path("Output", paste(save_name, paste0("PlanningRegion.rds"), sep = "_")))
land <- ne_countries(scale = 'large', returnclass = 'sf') %>%
fSpatPlan_Convert2PacificRobinson() # Land masses; needed for plotting
### Climate Metrics ####
# 1. Rates of Climate Warming
ClimateLayer_path <- "Data/Climate/ClimateMetrics/RateOfChange/tos/"
ClimateLayer_files <- list.files(ClimateLayer_path)
roc_tos_SSP585 <- readRDS(file.path("Output",
paste(save_name, "ClimateLayer", ClimateLayer_files[3], sep = "_")))
#### Conservation Features ####
aqua_sf <- read_rds(file.path("Output", paste(save_name, paste0("AquaMaps.rds"), sep = "_")))
# Changing to 1s and 0s
CutOff = 0.5
subset_aqua_sf <- aqua_sf %>%
as_tibble() %>%
dplyr::select(Doryrhamphus_excisus.excisus, Padina_sanctae.crucis, Platybelone_argalus.platyura,
Tylosurus_acus.acus, Tylosurus_acus.melanotus)
aqua_sf <- aqua_sf %>%
mutate_at(vars(colnames(subset_aqua_sf)),
funs(case_when(. >= CutOff ~ 1,
. <= CutOff ~ 0,
is.na(.) ~ 0)))
# Uniform Cost (Using the Area)
UniformCost <- PUs %>%
dplyr::mutate(cost = PU_size)
# Use the scalings 20 to 100 from the penalty approach
# Get scaling
scaling_PenaltyWarming <- create_Scaling(UniformCost$cost, roc_tos_SSP585$transformed, "tos")
features <- aqua_sf %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
names()
out_sf <- cbind(aqua_sf, roc_tos_SSP585, UniformCost)
fScale <- function(x) {
scaling <- scaling_PenaltyWarming %>% filter(scaling = x) %>% pull()
p <- prioritizr::problem(out_sf, features, "cost") %>%
add_min_set_objective() %>%
add_relative_targets(0.3) %>%
add_binary_decisions() %>%
add_gurobi_solver(gap = 0.1, verbose = FALSE) %>%
add_linear_penalties(scaling, data = "transformed")
s <- prioritizr::solve(p) %>% as_tibble() %>% dplyr::select(solution_1)
return(s)
}
scaling_PenaltyWarming
scaling <- scaling_PenaltyWarming$penalty_value
scaling
features <- aqua_sf %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
names()
out_sf <- cbind(aqua_sf, roc_tos_SSP585, UniformCost)
fScale <- function(x) {
p <- prioritizr::problem(out_sf, features, "cost") %>%
add_min_set_objective() %>%
add_relative_targets(0.3) %>%
add_binary_decisions() %>%
add_gurobi_solver(gap = 0.1, verbose = FALSE) %>%
add_linear_penalties(scaling, data = "transformed")
s <- prioritizr::solve(p) %>% as_tibble() %>% dplyr::select(solution_1)
return(s)
}
?lapply
calibration <- lapply(scaling, fScale)
fScale <- function(x) {
p <- prioritizr::problem(out_sf, features, "cost") %>%
add_min_set_objective() %>%
add_relative_targets(0.3) %>%
add_binary_decisions() %>%
add_gurobi_solver(gap = 0.1, verbose = FALSE) %>%
add_linear_penalties(x, data = "transformed")
s <- prioritizr::solve(p) %>% as_tibble() %>% dplyr::select(solution_1)
return(s)
}
calibration <- lapply(scaling, fScale)
x <- do.call(bind_cols, calibration)
x
calibration
names(x) <- c("Scaling_20", "Scaling_30", "Scaling_40", "Scaling_50", "Scaling_60", "Scaling_70", "Scaling_80", "Scaling_90")
names(x) <- c("Scaling_20", "Scaling_30", "Scaling_40", "Scaling_50", "Scaling_60", "Scaling_70", "Scaling_80", "Scaling_90", "Scaling_100")
x
hist(x$Scaling_20)
hist(x$Scaling_100)
scaling_PenaltyWarming
x
df <- cbind(PUs, x$Scaling_20)
df
df <- cbind(PUs, x$Scaling_20) %>% dplyr::rename(Scaling_20 = x.Scaling_20)
df
compute_summary(df, total_area, PU_size, run_name = "Scaling_20", Cost = "cost")
df <- cbind(PUs, x$Scaling_20) %>% dplyr::rename(solution_1 = x.Scaling_20)
compute_summary(df, total_area, PU_size, run_name = "Scaling_20", Cost = "cost")
df <- cbind(UniformCost, x$Scaling_20) %>% dplyr::rename(solution_1 = x.Scaling_20)
compute_summary(df, total_area, PU_size, run_name = "Scaling_20", Cost = "cost")
total_area = nrow(PUs) * PU_size
compute_summary(df, total_area, PU_size, run_name = "Scaling_20", Cost = "cost")
df <- x %>% as_tibble() %>%
dplyr::select(!!sym(colnames(x)[1])) %>%
cbind(UniformCost, x$Scaling_20) %>% dplyr::rename(solution_1 = !!sym(colnames(x)[1]))
df
x %>% as_tibble() %>%
dplyr::select(!!sym(colnames(x)[1]))
colnames(x)[1]
df <- x %>% as_tibble() %>%
dplyr::select(!!sym(colnames(x)[1])) %>%
cbind(UniformCost, .) %>% dplyr::rename(solution_1 = !!sym(colnames(x)[1]))
df
saveRDS(calibration, "Output/temp/calibration.rds")
colnames(x)
summaryCalibration <- lapply(colnames(x), function(x){
df <- x %>% as_tibble() %>%
dplyr::select(!!sym(x)) %>%
cbind(UniformCost, .) %>% dplyr::rename(solution_1 = !!sym(x))
summary <- compute_summary(df, total_area, PU_size, run_name = x, Cost = "cost")
return(summary)
})
x
colnames(x)
name = "Scaling_20"
x %>% as_tibble() %>% dplyr::select(!!sym(name))
summaryCalibration <- lapply(colnames(x), function(x){
df <- x %>% as_tibble() %>%
dplyr::select(!!sym(x)) %>%
cbind(UniformCost, .) %>% dplyr::rename(solution_1 := !!sym(x))
summary <- compute_summary(df, total_area, PU_size, run_name = x, Cost = "cost")
return(summary)
})
rlang::last_error()
names <- colnames(x)
names
summaryCalibration <- lapply(names, function(x){
df <- x %>% as_tibble() %>%
dplyr::select(!!sym(x)) %>%
cbind(UniformCost, .) %>% dplyr::rename(solution_1 := !!sym(x))
summary <- compute_summary(df, total_area, PU_size, run_name = x, Cost = "cost")
return(summary)
})
colnames(x)
df <- x %>% as_tibble() %>%
dplyr::select(sym(x)) %>%
cbind(UniformCost, .) %>% dplyr::rename(solution_1 := !!sym(x))
summaryCalibration <- lapply(colnames(x), function(y){
df <- x %>% as_tibble() %>%
dplyr::select(!!sym(y)) %>%
cbind(UniformCost, .) %>% dplyr::rename(solution_1 := !!sym(y))
summary <- compute_summary(df, total_area, PU_size, run_name = y, Cost = "cost")
return(summary)
})
summaryCalibration
summaryCalibration <- do.call(bind_rows, summaryCalibration)
summaryCalibration
scaling
solPenalty_20 <- fScale(scaling[1])
solPenalty_20
summary <- compute_summary(solPenalty_20, total_area, PU_size, run_name = "Scale_20", Cost = "cost")
solPenalty_20 %<>% cbind(., UniformCost)
summary <- compute_summary(solPenalty_20, total_area, PU_size, run_name = "Scale_20", Cost = "cost")
summary
solPenalty_20
saveRDS(solPenalty_20, "Output/calibration/penalty_scaling20.rds")
solPenalty_20
scaling_PenaltyWarming
solPenalty_40 <- fScale(scaling[3]) %>% cbind(., UniformCost)
summary <- compute_summary(solPenalty_40, total_area, PU_size, run_name = "Scale_40", Cost = "cost")
summary
compute_summary(solPenalty_20, total_area, PU_size, run_name = "Scale_20", Cost = "cost")
compute_summary(solPenalty_40, total_area, PU_size, run_name = "Scale_40", Cost = "cost")
calibration
xx <- do.call(bind_cols, calibration)
xx
saveRDS(solPenalty_40, "Output/calibration/penalty_scaling40.rds")
x <- readRDS("Output/temp/calibration.rds")
names(x) <- c("Scaling_20", "Scaling_30", "Scaling_40", "Scaling_50", "Scaling_60", "Scaling_70", "Scaling_80", "Scaling_90", "Scaling_100")
x
x <- readRDS("Output/temp/calibration.rds")
x <- do.call(bind_cols, x)
names(x) <- c("Scaling_20", "Scaling_30", "Scaling_40", "Scaling_50", "Scaling_60", "Scaling_70", "Scaling_80", "Scaling_90", "Scaling_100")
x
summaryCalibration <- lapply(colnames(x), function(y){
df <- x %>% as_tibble() %>%
dplyr::select(!!sym(y)) %>%
cbind(UniformCost, .) %>% dplyr::rename(solution_1 := !!sym(y))
summary <- compute_summary(df, total_area, PU_size, run_name = y, Cost = "cost")
return(summary)
})
summaryCalibration <- do.call(bind_rows, summaryCalibration)
summaryCalibration
scaling_PenaltyWarming
solPenalty_70 <- fScale(scaling[6]) %>% cbind(., UniformCost)
compute_summary(solPenalty_70, total_area, PU_size, run_name = "Scale_70", Cost = "cost")
scaling[6]
scaling[7]
scaling_PenaltyWarming
# Create penalty scaling values for the "penalty" approach
create_Scaling <- function(cost, climate_metric, metric) {
# I calculated scaling using this equation:
# scaling$_ClimateMetric$ $= \frac{(Cost_{Max} - Cost_{Min})}{(ClimateMetric_{Max} - ClimateMetric_{Min})} \cdot (Scaling_{percent})$
percentage <- seq(from  = 20, to = 400, by = 10)
x = (max(cost)) / (max(climate_metric) - min(climate_metric)) #  Used max cost instead of range of cost because we're using a uniform cost layer
scaling <- tibble(scaling = numeric(), penalty_value = numeric())
if (metric %in% c("tos", "velocity")) {
for (i in 1:length(percentage)) {
scaling %<>% add_row(scaling = percentage[i], penalty_value = x*percentage[i]/100)
}
} else if (metric %in% c("phos", "o2os")) {
for (i in 1:length(percentage)) {
scaling %<>% add_row(scaling = percentage[i], penalty_value = -x*percentage[i]/100)
}
}
return(scaling)
}
saveRDS(solPenalty_70, "Output/calibration/penalty_scaling70.rds")
# Use the scalings 20 to 100 from the penalty approach
# Get scaling
scaling_PenaltyWarming <- create_Scaling(UniformCost$cost, roc_tos_SSP585$transformed, "tos")
scaling_PenaltyWarming
# Use the scalings 20 to 100 from the penalty approach
# Get scaling
scaling_PenaltyWarming <- create_Scaling(UniformCost$cost, roc_tos_SSP585$transformed, "tos") %>%
dplyr::filter(scaling <= 100)
scaling_PenaltyWarming
scaling2 <- create_Scaling(UniformCost$cost, roc_tos_SSP585$transformed, "tos") %>%
dplyr::filter(scaling %in% c(100, 200, 300, 400))
scaling2
calibration
calibration %<>% do.call(bind_cols, .)
calibration %<>% do.call(bind_cols, .) %>% print(n=Inf)
calibration %<>% do.call(bind_cols, .) %>% head()
calibration %<>% do.call(bind_cols, .)
calibration
scaling2 <- create_Scaling(UniformCost$cost, roc_tos_SSP585$transformed, "tos") %>%
dplyr::filter(scaling %in% c(200, 300, 400))
scaling2
scaling2 <- create_Scaling(UniformCost$cost, roc_tos_SSP585$transformed, "tos") %>%
dplyr::filter(scaling %in% c(200, 300, 400))
calibration2 <- lapply(scaling2, fScale) %>%
do.call(bind_cols, .)
scaling2
scaling2 <- create_Scaling(UniformCost$cost, roc_tos_SSP585$transformed, "tos") %>%
dplyr::filter(scaling %in% c(200, 300, 400)) %>%
dplyr::select(penalty_value) %>% pull()
scaling2
calibration2 <- lapply(scaling2, fScale) %>%
do.call(bind_cols, .)
names(calibration2) <- c("Scaling_200", "Scaling_300", "Scaling_400")
calibration
names(calibration) <- c("Scaling_20", "Scaling_30", "Scaling_40", "Scaling_50", "Scaling_60", "Scaling_70", "Scaling_80", "Scaling_90", "Scaling_100")
calibration
solution_list <- list(calibration %>% dplyr::select(Scaling_20) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_30) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_40) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_50) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_60) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_70) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_80) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_90) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_100) %>% cbind(., UniformCost),)
calibration %>% dplyr::select(Scaling_20)
calibration
calibration <- readRDS("Output/temp/calibration.rds")
calibration
calibration %<>% do.call(bind_cols, .)
names(calibration) <- c("Scaling_20", "Scaling_30", "Scaling_40", "Scaling_50", "Scaling_60", "Scaling_70", "Scaling_80", "Scaling_90", "Scaling_100")
calibration
solution_list <- list(calibration %>% dplyr::select(Scaling_20) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_30) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_40) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_50) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_60) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_70) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_80) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_90) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_100) %>% cbind(., UniformCost),)
calibration
solution_list <- list(calibration %>% dplyr::select(Scaling_20) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_30) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_40) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_50) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_60) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_70) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_80) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_90) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_100) %>% cbind(., UniformCost))
get_ClimateSummary(solution_list,climate_layer = roc_tos_SSP585, metric = "tos", col_scenario = "585", col_approach = "penalty", col_run = colnames(calibration), climateLayer = "single")
solution_list <- list(calibration %>% dplyr::select(Scaling_20) %>% dplyr::rename(solution_1 = Scaling_20) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_30) %>% dplyr::rename(solution_1 = Scaling_30) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_40) %>% dplyr::rename(solution_1 = Scaling_40) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_50) %>% dplyr::rename(solution_1 = Scaling_50) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_60) %>% dplyr::rename(solution_1 = Scaling_60) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_70) %>% dplyr::rename(solution_1 = Scaling_70) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_80) %>% dplyr::rename(solution_1 = Scaling_80) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_90) %>% dplyr::rename(solution_1 = Scaling_90) %>% cbind(., UniformCost),
calibration %>% dplyr::select(Scaling_100) %>% dplyr::rename(solution_1 = Scaling_100) %>% cbind(., UniformCost))
get_ClimateSummary(solution_list,climate_layer = roc_tos_SSP585, metric = "tos", col_scenario = "585", col_approach = "penalty", col_run = colnames(calibration), climateLayer = "single")
calibration2
solPenalty_20
compute_summary(calibration2 %>% dplyr::select(Scaling_200) %>% cbind(., UniformCost) %>% dplyr::rename(solution_1 = Scaling_200), total_area, PU_size, run_name = "Scale_200", Cost = "cost")
get_ClimateSummary(solution_list = list(calibration2 %>% dplyr::select(Scaling_200) %>% cbind(., UniformCost) %>% dplyr::rename(solution_1 = Scaling_200)),
climate_layer = roc_tos_SSP585, metric = "tos", col_scenario = "585", col_approach = "penalty", col_run = colnames(calibration), climateLayer = "single")
get_ClimateSummary(solution_list = list(calibration2 %>% dplyr::select(Scaling_200) %>% cbind(., UniformCost) %>% dplyr::rename(solution_1 = Scaling_200)),
climate_layer = roc_tos_SSP585, metric = "tos", col_scenario = "585", col_approach = "penalty", col_run = colnames(calibration2), climateLayer = "single")
ggSol200
penalty200_plot <- solP200 %>%
mutate(solution_1 = as.logical(solution_1))
#### Cost layer ####
# Cost Layer, Squished
cost <- read_rds(file.path("Output", paste(save_name, paste0("Cost.rds"), sep = "_"))) %>%
mutate(Cost_squish = scales::oob_squish(Cost, quantile(Cost, c(0.01, 0.99))))
#### Uneven cost layer ####
scaling_PenaltyWarming <- create_Scaling(cost$Cost_squish, roc_tos_SSP585$transformed, "tos") %>%
dplyr::filter(scaling %in% c(seq(from = 20, to = 100, by = 10), 200, 300, 400))
scaling_PenaltyWarming
scaling <- scaling_PenaltyWarming$penalty_value
features <- aqua_sf %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
names()
out_sf <- cbind(aqua_sf, roc_tos_SSP585, cost)
fScale <- function(x) {
p <- prioritizr::problem(out_sf, features, "Cost_squish") %>%
add_min_set_objective() %>%
add_relative_targets(0.3) %>%
add_binary_decisions() %>%
add_gurobi_solver(gap = 0.1, verbose = FALSE) %>%
add_linear_penalties(x, data = "transformed")
s <- prioritizr::solve(p) %>% as_tibble() %>% dplyr::select(solution_1)
return(s)
}
calibration3 <- lapply(scaling, fScale) %>%
do.call(bind_cols, .)
names(calibration3) <- c("Scaling_20", "Scaling_30", "Scaling_40", "Scaling_50", "Scaling_60", "Scaling_70", "Scaling_80", "Scaling_90", "Scaling_100", "Scaling_200", "Scaling_300", "Scaling_400")
calibration3
saveRDS(calibration3, "Output/temp/calibration3.rds")
hist(calibration3$Scaling_20)
hist(calibration3$Scaling_200)
hist(calibration3$Scaling_20)
hist(calibration3$Scaling_400)
