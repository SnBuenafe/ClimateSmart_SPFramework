add_gurobi_solver(gap = 0, verbose = FALSE)
# Solve the planning problem
s <- prioritizr::solve(p)
saveRDS(s, paste0(output_solutions, solution_list[i], "-MM-", model_list[model_num], "-ClimatePriorityArea-", metric_list[metric_num], "-SSP", scenario_list[scenario_num], ".rds")) # save solution
# Plot the spatial design
s_plot <- s %>%
mutate(solution_1 = as.logical(solution_1))
(ggSol <- fSpatPlan_PlotSolution(s_plot, PUs, land) +
ggtitle(paste0("Climate-smart design: ", metric_list[metric_num]),
subtitle = paste0("Feature, SSP", scenario_list[scenario_num]), " (GCM: ", model_list[model_num]) +
theme(axis.text = element_text(size = 25)))
ggsave(filename = paste0("MM-", model_list[model_num], "-ClimatePriorityArea-", metric_list[metric_num], "-", scenario_list[scenario_num], ".png"),
plot = ggSol, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
#clean up environment
rm(ImptFeat, RepFeat, Features, features, targets)
rm(list = ls(pattern = metric_df))
gc()
i = i + 1
}
}
}
}
# Adding in MHW metrics
metric_list <- c("MHW_num", "MHW_CumInt", "MHW_CumDur")
scenario_list <- c("126", "245")
solution <- seq(from = 317, to = 322, by = 1) # solution names, check metadata
solution <-lapply(solution, function(x) {
y <- paste0("s", x)
}) %>% unlist()
solution
loopthrough_EM_Percentile(solution, metric_list, scenario_list)
solution <- seq(from = 353, to = 358, by = 1) # solution names, check metadata
solution <-lapply(solution, function(x) {
y <- paste0("s", x)
}) %>% unlist()
solution
loopthrough_EM_Feature(solution, metric_list, scenario_list)
solution <- seq(from = 323, to = 352, by = 1) # solution names, check metadata
solution <-lapply(solution, function(x) {
y <- paste0("s", x)
}) %>% unlist()
metric_list <- c("MHW_num", "MHW_CumInt", "MHW_CumDur")
scenario_list <- c("126", "245")
model_list <- c("CanESM5", "CMCC-ESM2", "GFDL-ESM4", "IPSL-CM6A-LR", "NorESM2-MM")
metric_list
scenario_list
model_list
solution
length(solution)
loopthrough_MM_Percentile(solution, metric_list, scenario_list, model_list)
metric_num = 1
model_num = 1
scenario_num = 1
if(scenario_list[scenario_num] == "126") {scenario_object <- "SSP 1-2.6"} else if (scenario_list[scenario_num] == "245") {scenario_object <- "SSP 2-4.5"} else if (scenario_list[scenario_num] == "585") {scenario_object <- "SSP 5-8.5"}
LoadClimateMetrics(metric = metric_list[metric_num], model = model_list[model_num], scenario = scenario_object)
model_list[model_num]
scenario
scenario_object
metric_list[metric_num
metric_list[metric_num]
metric_list[metric_num]
metric = metric_list[metric_num]
model = model_list[model_num]
scenario = scenario_object
if (scenario == "SSP 1-2.6") {
scenario_obj = "SSP126"
} else if (scenario == "SSP 2-4.5") {
scenario_obj = "SSP245"
} else if (scenario == "SSP 5-8.5") {
scenario_obj = "SSP585"
}
scenario_obj
# ----- Set path -----
if(is.na(model)) { # Ensemble mean approach
if (metric == "velocity") {
path = "Data/Climate/ClimateMetrics/ClimateVelocity"
} else if (str_detect(metric, pattern = "MHW")) {
path = "Data/Climate/ClimateMetrics/MHW"
} else {
path = file.path("Data/Climate/ClimateMetrics/RateOfChange", metric)
}
} else { # Multi-model ensemble approach
path = file.path("Data/Climate/ClimateMetrics_Ensemble", metric, scenario)
}
path
list.files(path)
### Climate Metrics ####
# Call function for each metric
LoadClimateMetrics <- function(metric,
model = NA, # if model = NA, approach is ensemble mean
scenario
) {
if (scenario == "SSP 1-2.6") {
scenario_obj = "SSP126"
} else if (scenario == "SSP 2-4.5") {
scenario_obj = "SSP245"
} else if (scenario == "SSP 5-8.5") {
scenario_obj = "SSP585"
}
# ----- Set path -----
if(is.na(model)) { # Ensemble mean approach
if (metric == "velocity") {
path = "Data/Climate/ClimateMetrics/ClimateVelocity"
} else if (str_detect(metric, pattern = "MHW")) {
path = "Data/Climate/ClimateMetrics/MHW"
} else {
path = file.path("Data/Climate/ClimateMetrics/RateOfChange", metric)
}
} else { # Multi-model ensemble approach
if (str_detect(metric, pattern = "MHW")) {
path = file.path("Data/Climate/ClimateMetrics_Ensemble/MHW", scenario)
} else{
path = file.path("Data/Climate/ClimateMetrics_Ensemble", metric, scenario)
}
}
# ----- Read RDS file -----
if(is.na(model)) {
output <- paste0("Output/", save_name, "_ClimateLayer")
if (metric == "velocity") {
metric_tmp = "velocity_tos"
df <- readRDS(paste(output, metric_tmp, paste0(scenario, ".rds"), sep = "_"))
assign(x = paste(metric, scenario_obj, sep = "_"), value = df, envir=.GlobalEnv)
} else if (metric %in% c("tos", "phos", "o2os")) {
metric_tmp = paste0("roc_", metric)
df <- readRDS(paste(output, metric_tmp, paste0(scenario, ".rds"), sep = "_"))
assign(x = paste(metric_tmp, scenario_obj, sep = "_"), value = df, envir=.GlobalEnv)
} else if (str_detect(metric, pattern = "MHW")) {
df <- readRDS(paste(output, metric, paste0(scenario, ".rds"), sep = "_"))
assign(x = paste(metric, scenario_obj, sep = "_"), value = df, envir=.GlobalEnv)
}
} else { # Multi-model ensemble approach
output <- paste0("Output/", save_name, "_ClimateLayer")
if (str_detect(metric, pattern = "MHW|velocity")) {
df <- readRDS(paste(output, metric, model, scenario, "ensemble.rds", sep = "_"))
assign(x = paste(metric, model, scenario_obj, sep = "_"), value = df, envir = .GlobalEnv)
} else {
metric_tmp = paste0("roc_", metric)
df <- readRDS(paste(output, metric_tmp, model, scenario, "ensemble.rds", sep = "_"))
assign(x = paste(metric, model, scenario_obj, sep = "_"), value = df, envir = .GlobalEnv)
}
}
}
LoadClimateMetrics(metric = metric_list[metric_num], model = model_list[model_num], scenario = scenario_object)
path
if (str_detect(metric, pattern = "MHW")) {
path = file.path("Data/Climate/ClimateMetrics_Ensemble/MHW", scenario)
} else{
path = file.path("Data/Climate/ClimateMetrics_Ensemble", metric, scenario)
}
path
list.files(path)
paste(output, metric, model, scenario, "ensemble.rds", sep = "_")
output <- paste0("Output/", save_name, "_ClimateLayer")
paste(output, metric, model, scenario, "ensemble.rds", sep = "_")
### Climate Metrics ####
# Call function for each metric
LoadClimateMetrics <- function(metric,
model = NA, # if model = NA, approach is ensemble mean
scenario
) {
if (scenario == "SSP 1-2.6") {
scenario_obj = "SSP126"
} else if (scenario == "SSP 2-4.5") {
scenario_obj = "SSP245"
} else if (scenario == "SSP 5-8.5") {
scenario_obj = "SSP585"
}
# ----- Set path -----
if(is.na(model)) { # Ensemble mean approach
if (metric == "velocity") {
path = "Data/Climate/ClimateMetrics/ClimateVelocity"
} else if (str_detect(metric, pattern = "MHW")) {
path = "Data/Climate/ClimateMetrics/MHW"
} else {
path = file.path("Data/Climate/ClimateMetrics/RateOfChange", metric)
}
} else { # Multi-model ensemble approach
if (str_detect(metric, pattern = "MHW")) {
path = file.path("Data/Climate/ClimateMetrics_Ensemble/MHW", scenario)
} else{
path = file.path("Data/Climate/ClimateMetrics_Ensemble", metric, scenario)
}
}
# ----- Read RDS file -----
if(is.na(model)) {
output <- paste0("Output/", save_name, "_ClimateLayer")
if (metric == "velocity") {
metric_tmp = "velocity_tos"
df <- readRDS(paste(output, metric_tmp, paste0(scenario, ".rds"), sep = "_"))
assign(x = paste(metric, scenario_obj, sep = "_"), value = df, envir=.GlobalEnv)
} else if (metric %in% c("tos", "phos", "o2os")) {
metric_tmp = paste0("roc_", metric)
df <- readRDS(paste(output, metric_tmp, paste0(scenario, ".rds"), sep = "_"))
assign(x = paste(metric_tmp, scenario_obj, sep = "_"), value = df, envir=.GlobalEnv)
} else if (str_detect(metric, pattern = "MHW")) {
df <- readRDS(paste(output, metric, paste0(scenario, ".rds"), sep = "_"))
assign(x = paste(metric, scenario_obj, sep = "_"), value = df, envir=.GlobalEnv)
}
} else { # Multi-model ensemble approach
output <- paste0("Output/", save_name, "_ClimateLayer")
if (str_detect(metric, pattern = "velocity")) {
df <- readRDS(paste(output, metric, model, scenario, "ensemble.rds", sep = "_"))
assign(x = paste(metric, model, scenario_obj, sep = "_"), value = df, envir = .GlobalEnv)
} else if (str_detect(metric, pattern = "MHW")) {
df <- readRDS(paste(output, metric, model, paste0(scenario, ".rds"), sep = "_"))
assign(x = paste(metric, model, scenario_obj, sep = "_"), value = df, envir = .GlobalEnv)
} else {
metric_tmp = paste0("roc_", metric)
df <- readRDS(paste(output, metric_tmp, model, scenario, "ensemble.rds", sep = "_"))
assign(x = paste(metric, model, scenario_obj, sep = "_"), value = df, envir = .GlobalEnv)
}
}
}
output <- paste0("Output/", save_name, "_ClimateLayer")
output
if (str_detect(metric, pattern = "velocity")) {
df <- readRDS(paste(output, metric, model, scenario, "ensemble.rds", sep = "_"))
assign(x = paste(metric, model, scenario_obj, sep = "_"), value = df, envir = .GlobalEnv)
} else if (str_detect(metric, pattern = "MHW")) {
df <- readRDS(paste(output, metric, model, paste0(scenario, ".rds"), sep = "_"))
assign(x = paste(metric, model, scenario_obj, sep = "_"), value = df, envir = .GlobalEnv)
} else {
metric_tmp = paste0("roc_", metric)
df <- readRDS(paste(output, metric_tmp, model, scenario, "ensemble.rds", sep = "_"))
assign(x = paste(metric, model, scenario_obj, sep = "_"), value = df, envir = .GlobalEnv)
}
paste(metric, model, scenario_obj, sep = "_")
MHW_num_CanESM5_SSP126
# Load functions
source("HelperFunctions/SpatPlan_Extras.R") # Load the extras, including functions and libraries
source("HelperFunctions/SpatPlan_HelperFxns_WestPac.R") # Load helper functions written specifically for this spatial planning project
source("HelperFunctions/SpatPlan_IterationFxns_WestPac.R") # Load loop functions written specifically for producing iterations
output_solutions <- "Output/solutions/"
output_summary <- "Output/summary/"
output_lowregret <- "Output/lowregret/"
# Load files
source("03_SpatPlan_Master_Preliminaries.R")
total_area = nrow(PUs) * PU_size
# Adding in runs for MHW
metric_list <- c("MHW_num", "MHW_CumInt", "MHW_CumDur")
scenario_list <- c("126", "245")
model_list <- c("CanESM5", "CMCC-ESM2", "GFDL-ESM4", "IPSL-CM6A-LR", "NorESM2-MM")
solution <- seq(from = 323, to = 352, by = 1) # solution names, check metadata
solution <-lapply(solution, function(x) {
y <- paste0("s", x)
}) %>% unlist()
loopthrough_MM_Percentile(solution, metric_list, scenario_list, model_list)
loopthrough_MM_Percentile(solution, metric_list, scenario_list, model_list)
paste0("Percentile, SSP", scenario_list[scenario_num], " (GCM: ", model_list[model_num])
scenario_num = 1
paste0("Percentile, SSP", scenario_list[scenario_num], " (GCM: ", model_list[model_num])
model_num = 1
paste0("Percentile, SSP", scenario_list[scenario_num], " (GCM: ", model_list[model_num])
s <- readRDS("Output/solutions/s1-uninformed.rds")
# Plot the spatial design
s_plot <- s %>%
mutate(solution_1 = as.logical(solution_1))
ggSol <- fSpatPlan_PlotSolution(s_plot, PUs, land) +
ggtitle(paste0("Climate-smart design: ", metric_list[metric_num]),
subtitle = paste0("Percentile, SSP", scenario_list[scenario_num], " (GCM: ", model_list[model_num], ")")) +
theme(axis.text = element_text(size = 25))
metric_num = 1
ggSol <- fSpatPlan_PlotSolution(s_plot, PUs, land) +
ggtitle(paste0("Climate-smart design: ", metric_list[metric_num]),
subtitle = paste0("Percentile, SSP", scenario_list[scenario_num], " (GCM: ", model_list[model_num], ")")) +
theme(axis.text = element_text(size = 25))
ggSol
loopthrough_MM_Percentile <- function(solution_list, metric_list, scenario_list, model_list) {
i = 1
for(scenario_num in 1:length(scenario_list)) {
for(metric_num in 1:length(metric_list)) {
for(model_num in 1:length(model_list)) {
if(scenario_list[scenario_num] == "126") {scenario_object <- "SSP 1-2.6"} else if (scenario_list[scenario_num] == "245") {scenario_object <- "SSP 2-4.5"} else if (scenario_list[scenario_num] == "585") {scenario_object <- "SSP 5-8.5"}
LoadClimateMetrics(metric = metric_list[metric_num], model = model_list[model_num], scenario = scenario_object)
# Create climate layer
metric_df <- paste0(metric_list[metric_num], "_", model_list[model_num], "_SSP", scenario_list[scenario_num])
x = get(metric_df)
aqua_percentile <- create_PercentileLayer(aqua_sf, metric_name = metric_list[metric_num], colname = "transformed", x, PUs)
# Get list of features
features <- aqua_percentile %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
names()
# Set up the spatial planning problem
out_sf <- cbind(aqua_percentile, x, UniformCost)
p <- prioritizr::problem(out_sf, features, "cost") %>%
add_min_set_objective() %>%
add_relative_targets(30/35) %>%
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE)
# Solve the planning problem
s <- prioritizr::solve(p)
saveRDS(s, paste0(output_solutions, solution_list[i], "-MM-", model_list[model_num], "-Percentile-", metric_list[metric_num], "-SSP", scenario_list[scenario_num], ".rds")) # save solution
# Plot the spatial design
s_plot <- s %>%
mutate(solution_1 = as.logical(solution_1))
(ggSol <- fSpatPlan_PlotSolution(s_plot, PUs, land) +
ggtitle(paste0("Climate-smart design: ", metric_list[metric_num]),
subtitle = paste0("Percentile, SSP", scenario_list[scenario_num], " (GCM: ", model_list[model_num], ")")) +
theme(axis.text = element_text(size = 25)))
ggsave(filename = paste0("MM-", model_list[model_num], "-Percentile-", metric_list[metric_num], "-", scenario_list[scenario_num], ".png"),
plot = ggSol, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
gc()
rm(list = ls(pattern = metric_df))
i = i + 1
}
}
}
}
?ggtitle
model_num = 1
s <- readRDS("Output/solutions/s323-MM-CanESM5-Percentile-MHW_num-SSP126.rds")
# Plot the spatial design
s_plot <- s %>%
mutate(solution_1 = as.logical(solution_1))
ggSol <- fSpatPlan_PlotSolution(s_plot, PUs, land) +
ggtitle(paste0("Climate-smart design: ", metric_list[metric_num]),
subtitle = paste0("Percentile, SSP", scenario_list[scenario_num], " (GCM: ", model_list[model_num], ")")) +
theme(axis.text = element_text(size = 25))
ggSol
ggsave(filename = paste0("MM-", model_list[model_num], "-Percentile-", metric_list[metric_num], "-", scenario_list[scenario_num], ".png"),
plot = ggSol, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
gc()
rm(list = ls(pattern = metric_df))
# Create climate layer
metric_df <- paste0(metric_list[metric_num], "_", model_list[model_num], "_SSP", scenario_list[scenario_num])
metric_df
rm(list = ls(pattern = metric_df))
loopthrough_MM_Percentile <- function(solution_list, metric_list, scenario_list, model_list) {
i = 1
for(scenario_num in 1:length(scenario_list)) {
for(metric_num in 1:length(metric_list)) {
for(model_num in 1:length(model_list)) {
if(scenario_list[scenario_num] == "126") {scenario_object <- "SSP 1-2.6"} else if (scenario_list[scenario_num] == "245") {scenario_object <- "SSP 2-4.5"} else if (scenario_list[scenario_num] == "585") {scenario_object <- "SSP 5-8.5"}
LoadClimateMetrics(metric = metric_list[metric_num], model = model_list[model_num], scenario = scenario_object)
# Create climate layer
metric_df <- paste0(metric_list[metric_num], "_", model_list[model_num], "_SSP", scenario_list[scenario_num])
x = get(metric_df)
aqua_percentile <- create_PercentileLayer(aqua_sf, metric_name = metric_list[metric_num], colname = "transformed", x, PUs)
# Get list of features
features <- aqua_percentile %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
names()
# Set up the spatial planning problem
out_sf <- cbind(aqua_percentile, x, UniformCost)
p <- prioritizr::problem(out_sf, features, "cost") %>%
add_min_set_objective() %>%
add_relative_targets(30/35) %>%
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE)
# Solve the planning problem
s <- prioritizr::solve(p)
saveRDS(s, paste0(output_solutions, solution_list[i], "-MM-", model_list[model_num], "-Percentile-", metric_list[metric_num], "-SSP", scenario_list[scenario_num], ".rds")) # save solution
# Plot the spatial design
s_plot <- s %>%
mutate(solution_1 = as.logical(solution_1))
ggSol <- fSpatPlan_PlotSolution(s_plot, PUs, land) +
ggtitle(paste0("Climate-smart design: ", metric_list[metric_num]),
subtitle = paste0("Percentile, SSP", scenario_list[scenario_num], " (GCM: ", model_list[model_num], ")")) +
theme(axis.text = element_text(size = 25))
ggsave(filename = paste0("MM-", model_list[model_num], "-Percentile-", metric_list[metric_num], "-", scenario_list[scenario_num], ".png"),
plot = ggSol, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
gc()
rm(list = ls(pattern = metric_df))
i = i + 1
}
}
}
}
loopthrough_MM_Percentile(solution, metric_list, scenario_list, model_list)
rm(model_num, scenario_num, metric_num)
# Adding in runs for MHW
metric_list <- c("MHW_num", "MHW_CumInt", "MHW_CumDur")
scenario_list <- c("126", "245")
model_list <- c("CanESM5", "CMCC-ESM2", "GFDL-ESM4", "IPSL-CM6A-LR", "NorESM2-MM")
solution <- seq(from = 323, to = 352, by = 1) # solution names, check metadata
solution <-lapply(solution, function(x) {
y <- paste0("s", x)
}) %>% unlist()
loopthrough_MM_Percentile(solution, metric_list, scenario_list, model_list)
# ----- Climate priority area approach runs -----
# loop through the metric, scenario, and model lists
metric_list <- c("tos", "phos", "o2os", "velocity")
scenario_list <- c("126", "245", "585")
model_list <- c("CanESM5", "CMCC-ESM2", "GFDL-ESM4", "IPSL-CM6A-LR", "NorESM2-MM")
solution <- seq(from = 222, to = 289, by = 1) # solution names, check metadata
solution <-lapply(solution, function(x) {
y <- paste0("s", x)
}) %>% unlist()
scenario_num = 1
metric_num = 1
model_num = 1
if(scenario_list[scenario_num] == "126") {scenario_object <- "SSP 1-2.6"} else if (scenario_list[scenario_num] == "245") {scenario_object <- "SSP 2-4.5"} else if (scenario_list[scenario_num] == "585") {scenario_object <- "SSP 5-8.5"}
LoadClimateMetrics(metric = metric_list[metric_num], model = NA, scenario = scenario_list[scenario_num])
LoadClimateMetrics(metric = metric_list[metric_num], model = NA, scenario = scenario_object)
metric_df <- paste0(metric_list[metric_num], "_", model_list[model_num], "_", "_SSP", scenario_list[scenario_num])
model_list
model_num = 1
if(scenario_list[scenario_num] == "126") {scenario_object <- "SSP 1-2.6"} else if (scenario_list[scenario_num] == "245") {scenario_object <- "SSP 2-4.5"} else if (scenario_list[scenario_num] == "585") {scenario_object <- "SSP 5-8.5"}
LoadClimateMetrics(metric = metric_list[metric_num], model = model_num[model_list], scenario = scenario_object)
model_num[model_list]
model_list[model_num]
library(shiny)
#### Preliminaries ####
# Load the extras, including functions and libraries
source("HelperFunctions/SpatPlan_Extras.R")
# Load helper functions written specifically for this spatial planning project
source("HelperFunctions/SpatPlan_HelperFxns_WestPac.R")
#### Setting user parameters ####
# Calling the region
Region <- "WestPacific"
save_name <- "WestPacific"
PU_size = 669.9 # km2 (0.25 deg at equator)
Shape <- "Hexagon" # "Shape of PUs
MinDepth <- 0
MaxDepth <- 200
CO <- 0.5
# Choose CRS for analysis (Robinson: Pacific-centered)
cCRS <- "+proj=robin +lon_0=180 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
PUs <- read_rds(file.path("Output", paste(save_name, paste0("PlanningRegion.rds"), sep = "_")))
land <- ne_countries(scale = 'large', returnclass = 'sf') %>%
fSpatPlan_Convert2PacificRobinson()
ID <- tibble(column = character(),
metric = character(),
save = character())
ID %<>% add_row(column = "trend_n", metric = "MHW_num", save = "(Trend Num)") %>%
add_row(column = "trend_peak_int", metric = "MHW_PeakInt", save = "(Peak Intensity)") %>%
add_row(column = "trend_cum_int", metric = "MHW_CumInt", save = "(Cumulative Intensity") %>%
add_row(column = "trend_dur", metric = "MHW_Dur", save = "(Mean Duration)") %>%
add_row(column = "trend_cum_dur", metric = "MHW_CumDur", save = "(Cumulative Duration)") %>%
add_row(column = "sum_cum_int", metric = "MHW_SumCumInt", save = "(Sum Cumulative Intensity")
ID
#### Multi-Model Ensemble: Climate Velocity ####
path <- "Data/Climate/ClimateMetrics_Ensemble/"
model <- c("CanESM5", "CMCC-ESM2", "GFDL-ESM4", "IPSL-CM6A-LR", "NorESM2-MM")
for(i in 1:length(scenario_path)) {
ClimateLayer_files <- list.files(file.path(path, "MHW", scenario_path[i]))
for (j in 1:length(ClimateLayer_files)){
for (k in 1:nrow(ID)) {
df <- readRDS(file.path("Output",
paste(save_name, "ClimateLayer", ID$metric[k], model[j], paste0(scenario[i], ".rds"), sep = "_")))
assign(x = paste(ID$metric[k], model[j], scenario_object[i], sep = "_"), value = df, envir=.GlobalEnv)
}
}
}
scenario_path <- c("SSP 1-2.6", "SSP 2-4.5", "SSP 5-8.5")
scenario_object <- c("SSP126", "SSP245", "SSP585")
model_list <- c("CanESM5", "CMCC-ESM2", "GFDL-ESM4", "IPSL-CM6A-LR", "NorESM2-MM")
for(i in 1:length(scenario_path)) {
ClimateLayer_files <- list.files(file.path(path, "MHW", scenario_path[i]))
for (j in 1:length(ClimateLayer_files)){
for (k in 1:nrow(ID)) {
df <- readRDS(file.path("Output",
paste(save_name, "ClimateLayer", ID$metric[k], model[j], paste0(scenario[i], ".rds"), sep = "_")))
assign(x = paste(ID$metric[k], model[j], scenario_object[i], sep = "_"), value = df, envir=.GlobalEnv)
}
}
}
scenario
scenario_path
scenario_object
for(i in 1:length(scenario_path)) {
ClimateLayer_files <- list.files(file.path(path, "MHW", scenario_path[i]))
for (j in 1:length(ClimateLayer_files)){
for (k in 1:nrow(ID)) {
df <- readRDS(file.path("Output",
paste(save_name, "ClimateLayer", ID$metric[k], model[j], paste0(scenario_path[i], ".rds"), sep = "_")))
assign(x = paste(ID$metric[k], model[j], scenario_object[i], sep = "_"), value = df, envir=.GlobalEnv)
}
}
}
# Plot MHW metrics
scenario_object <- c("SSP126", "SSP245", "SSP585")
for(j in 1:length(scenario_object)) {
for(i in 1:nrow(ID)) {
x <- get(paste0(ID$metric[i], "_", scenario_object[j]))
gg_MHW <- fSpatPlan_PlotClimate(ClimateLayer = x,
world = land,
metric = ID$metric[i]) +
theme(axis.text = element_text(size = 25))
ggsave(paste0(paste("Layer", ID$metric[i], scenario_object[j], sep="_"), ".png"),
plot = gg_MHW, width = 21, height = 29.7, dpi = 300,
path = "Figures/")
}
}
paste0(ID$metric[i], "_", model_list[k], modelscenario_object[j])
paste0(ID$metric[i], "_", model_list[k], scenario_object[j])
model_list
k = 1
paste0(ID$metric[i], "_", model_list[k], "_", scenario_object[j])
paste("Layer", ID$metric[i], scenario_object[j], sep="_"), ".png")
paste0(paste("Layer", ID$metric[i], scenario_object[j], sep="_"), ".png")
paste0(paste("Layer", ID$metric[i], model_list[k], scenario_object[j], sep="_"), ".png")
for(k in 1:length(model_list)) {
for(j in 1:length(scenario_object)) {
for(i in 1:nrow(ID)) {
x <- get(paste0(ID$metric[i], "_", model_list[k], "_", scenario_object[j]))
gg_MHW <- fSpatPlan_PlotClimate(ClimateLayer = x,
world = land,
metric = ID$metric[i]) +
theme(axis.text = element_text(size = 25))
ggsave(paste0(paste("Layer", ID$metric[i], model_list[k], scenario_object[j], sep="_"), ".png"),
plot = gg_MHW, width = 21, height = 29.7, dpi = 300,
path = "Figures/")
}
}
}
