scenario_path <- c("SSP 1-2.6", "SSP 2-4.5", "SSP 5-8.5")
pattern <- paste0(solution[i], "-")
file <- list.files(pattern = paste0("^", pattern))
file
pattern
file <- list.files(pattern = pattern)
file
?list.files
file <- list.files(path = path, pattern = paste0("^", pattern))
file
solution
pivot <- list() # empty list
for(i in 1:length(solution)) {
path <- "Output/solutions/"
pattern <- paste0(solution[i], "-")
file <- list.files(path = path, pattern = paste0("^", pattern))
s <- readRDS(paste0(path, file)) %>% as_tibble() %>%
dplyr::select(solution_1) %>%
dplyr::mutate(cellID = paste0("PU_", row_number())) %>%
dplyr::mutate(solution = solution[i])
pivot[[i]] <- s %>%
pivot_wider(names_from = cellID, values_from = solution_1)
}
pivot_combined <- do.call(bind_rows, pivot)
pivot_combined
matrix <- data.matrix(pivot_combined[,-1], rownames.force = TRUE)
rownames(matrix) <- solution
matrix
View(matrix)
ncol(matrix)
?metaMDS
solution.mds <- metaMDS(matrix, distance = "chisq", autotransform = FALSE)
solution.mds <- metaMDS(matrix, distance = "jaccard", autotransform = FALSE)
solution.mds <- metaMDS(matrix, distance = "jaccard", autotransform = FALSE, try = 100)
solution <- seq(from = 2, to = 361, by = 1) # solution names, check metadata
solution <-lapply(solution, function(x) {
y <- paste0("s", x)
}) %>% unlist()
solution
pivot <- list() # empty list
for(i in 1:length(solution)) {
path <- "Output/solutions/"
pattern <- paste0(solution[i], "-")
file <- list.files(path = path, pattern = paste0("^", pattern))
s <- readRDS(paste0(path, file)) %>% as_tibble() %>%
dplyr::select(solution_1) %>%
dplyr::mutate(cellID = paste0("PU_", row_number())) %>%
dplyr::mutate(solution = solution[i])
pivot[[i]] <- s %>%
pivot_wider(names_from = cellID, values_from = solution_1)
}
pivot_combined <- do.call(bind_rows, pivot)
pivot_combined
matrix <- data.matrix(pivot_combined[,-1], rownames.force = TRUE)
rownames(matrix) <- solution
View(matrix)
solution.mds <- metaMDS(matrix, distance = "jaccard", autotransform = FALSE, try = 100)
solution.mds <- metaMDS(matrix, distance = "jaccard", autotransform = FALSE, try = 200)
solution.mds <- metaMDS(matrix, distance = "jaccard", autotransform = FALSE, try = 1000)
plot(solution.mds)
gg_ordiplot(comMDS, groups = dat$Station, ellipse = FALSE)
library(ggordiplots)
install.packages("ggordiplots")
library(ggordiplots)
install.packages("ggordiplots")
remotes::install_github("jfq3/ggordiplots")
library(ggordiplots)
install.packages("remotes")
install.packages("remotes")
remotes::install_github("jfq3/ggordiplots")
remotes::install_github("jfq3/ggordiplots", force = TRUE)
sessionInfo()
sessionInfo()
sessionInfo()
remotes::install_github("jfq3/ggordiplots", force = TRUE)
install.packages("remotes")
remotes::install_github("jfq3/ggordiplots", force = TRUE)
library(ggordiplots)
remotes::install_github("jfq3/ggordiplots", force = TRUE)
library(ggordiplots)
gg_ordiplot(comMDS, groups = dat$Station, ellipse = FALSE)
gg_ordiplot(solution.mds, ellipse = FALSE)
?gg_ordiplot
write.csv(pivot_combined, "Output/nmds/nmds_df.csv")
df_groups <- read_csv("Output/nmds/df_groups.csv")
df_groups <- read.csv("Output/nmds/df_groups.csv")
df_groups
df_groups <- read.csv("Output/nmds/df_groups.csv") %>% as_tibble()
?read_csv
#### Preliminaries ####
# Description
# Load functions
source("HelperFunctions/SpatPlan_Extras.R") # Load the extras, including functions and libraries
#### Preliminaries ####
# Description
# Load functions
source("HelperFunctions/SpatPlan_Extras.R") # Load the extras, including functions and libraries
#### Preliminaries ####
# Description
# Load functions
source("HelperFunctions/SpatPlan_Extras.R") # Load the extras, including functions and libraries
#### Preliminaries ####
# Description
# Load functions
source("HelperFunctions/SpatPlan_Extras.R") # Load the extras, including functions and libraries
#install.packages("pacman")
devtools::install_github("JorGarMol/VoCC", dependencies = TRUE, build_vignettes = TRUE)
install.packages("pacman")
install.packages("pacman")
install.packages("devtools")
devtools::install_github("JorGarMol/VoCC", dependencies = TRUE, build_vignettes = TRUE)
library(VoCC)
source("HelperFunctions/SpatPlan_HelperFxns_WestPac.R") # Load helper functions written specifically for this spatial planning project
source("HelperFunctions/SpatPlan_IterationFxns_WestPac.R") # Load loop functions written specifically for producing iterations
output_solutions <- "Output/solutions/"
output_summary <- "Output/summary/"
output_lowregret <- "Output/lowregret/"
df_groups <- read.csv("Output/nmds/df_groups.csv") %>% as_tibble()
library(ggordiplots)
gg_ordiplot(solution.mds, ellipse = FALSE)
gg_ordiplot(solution.mds, groups = df_groups$scenario, ellipse = FALSE)
gg_ordiplot(solution.mds, groups = df_groups$approach, ellipse = FALSE)
gg_ordiplot(solution.mds, groups = df_groups$metric, ellipse = FALSE)
gg_ordiplot(solution.mds, groups = df_groups$metric, ellipse = TRUE)
?gg_ordiplot
gg_ordiplot(solution.mds, groups = df_groups$metric, hulls = TRUE)
gg_ordiplot(solution.mds, groups = df_groups$metric, hull = TRUE)
gg_ordiplot(solution.mds, groups = df_groups$metric, ellipse = TRUE)
gg_ordiplot(solution.mds, groups = df_groups$metric, ellipse = TRUE, kindf ="sd")
gg_ordiplot(solution.mds, groups = df_groups$metric, ellipse = TRUE, kind ="sd")
gg_ordiplot(solution.mds, groups = df_groups$metric, ellipse = TRUE, kind ="se")
gg_ordiplot(solution.mds, groups = df_groups$metric, ellipse = TRUE, kind ="sd")
solution.mds
Ordi_Obj <- gg_ordiplot(solution.mds, groups = df_groups$metric, ellipse = TRUE, kind ="sd")
Ordi_Obj
Ordi_Obj$df_mean.ord
p <- Ordi_Obj +
geom_text(data = OrdiObj$df_mean.ord, aes(x = x, y = y, label = Group), size = 3)
Ordi_Obj <- gg_ordiplot(solution.mds, groups = df_groups$metric, ellipse = TRUE, kind ="sd")
p <- Ordi_Obj +
geom_text(data = OrdiObj$df_mean.ord, aes(x = x, y = y, label = Group), size = 3)
p <- Ordi_Obj +
geom_text(data = Ordi_Obj$df_mean.ord, aes(x = x, y = y, label = Group), size = 3)
p
p <- Ordi_Obj$plot +
geom_text(data = Ordi_Obj$df_mean.ord, aes(x = x, y = y, label = Group), size = 3)
p
# Scenario Theme
Ordi_Obj <- gg_ordiplot(solution.mds, groups = df_groups$scenario, ellipse = TRUE, kind ="sd")
p <- Ordi_Obj$plot +
geom_text(data = Ordi_Obj$df_mean.ord, aes(x = x, y = y, label = Group), size = 3)
p
p <- Ordi_Obj$plot +
geom_text(data = Ordi_Obj$df_mean.ord, aes(x = x, y = y, label = Group), size = 3) +
theme_classic()
p
p <- Ordi_Obj$plot +
geom_text(data = Ordi_Obj$df_mean.ord, aes(x = x, y = y, label = Group, color = Group), size = 3) +
theme_classic()
p
p <- Ordi_Obj$plot +
geom_text(data = Ordi_Obj$df_mean.ord, aes(x = x, y = y, label = Group, color = Group), size = 5) +
theme_classic()
p
p <- Ordi_Obj$plot +
geom_text(data = Ordi_Obj$df_mean.ord, aes(x = x, y = y, label = Group, color = Group), size = 4) +
theme_classic()
p
?gg_ordiplot
# Scenario Theme
Ordi_Obj <- gg_ordiplot(solution.mds, groups = df_groups$scenario, ellipse = TRUE, kind ="sd", shape = 0)
# Scenario Theme
Ordi_Obj <- gg_ordiplot(solution.mds, groups = df_groups$scenario, ellipse = TRUE, kind ="sd", size = 0.5)
p <- Ordi_Obj$plot +
geom_text(data = Ordi_Obj$df_mean.ord, aes(x = x, y = y, label = Group, color = Group), size = 4) +
theme_bw()
p
# Scenario Theme
Ordi_Obj <- gg_ordiplot(solution.mds, groups = df_groups$approach, ellipse = TRUE, kind ="sd")
p <- Ordi_Obj$plot +
geom_text(data = Ordi_Obj$df_mean.ord, aes(x = x, y = y, label = Group, color = Group), size = 4) +
theme_bw()
p
df_groups$scenario
# Scenario Theme
colors <- c("SSP1-2.6" = "#289E3D", "SSP2-4.5" = "#E6C173", "SSP5-8.5" = "#855600")
Ordi_Obj <- gg_ordiplot(solution.mds, groups = df_groups$approach, ellipse = TRUE, kind ="sd")
p <- Ordi_Obj$plot +
scale_color_manual(values = colors)
theme_bw()
p <- Ordi_Obj$plot +
scale_color_manual(values = colors) +
theme_bw()
p
Ordi_Obj <- gg_ordiplot(solution.mds, groups = df_groups$scenario, ellipse = TRUE, kind ="sd")
p <- Ordi_Obj$plot +
scale_color_manual(values = colors) +
theme_bw()
p
Ordi_Obj <- gg_ordiplot(solution.mds, groups = df_groups$scenario, ellipse = TRUE, kind ="sd", size = 1)
p <- Ordi_Obj$plot +
scale_color_manual(values = colors) +
theme_bw()
?gg_ordiplot
df_groups$approach
# Approach Theme
colors <- c("climate priority area" = "#E6BA7E", "feature" = "#4D3B2A", "penalty" = "#6984BF", "percentile" = "#2B8142")
Ordi_Obj <- gg_ordiplot(solution.mds, groups = df_groups$approach, ellipse = TRUE, kind ="sd")
p <- Ordi_Obj$plot +
scale_color_manual(values = colors) +
theme_bw()
p
unique(df_groups$model)
# Ensemble Theme
colors <- c("EM" = "#FAF7B7", "CanESM5" = "#E6C173", "CMCC-ESM2" = "#855600", "GFDL-ESM4" = "#5075BA", "IPSL-CM6A-LR" = "#81B0CC", "NorESM2-MM" = "#5A9E67")
Ordi_Obj <- gg_ordiplot(solution.mds, groups = df_groups$model, ellipse = TRUE, kind ="sd")
p <- Ordi_Obj$plot +
scale_color_manual(values = colors) +
theme_bw()
p
nique(df_groups$metric)
unique(df_groups$metric)
# Metrics theme
colors <- c("MHW_SumCumInt" = "#3C6342", "o2os" = "#289E3D", "phos" = "#E6C173", "tos" = "#81B0CC", "velocity" = "#855600")
Ordi_Obj <- gg_ordiplot(solution.mds, groups = df_groups$metric, ellipse = TRUE, kind ="sd")
p <- Ordi_Obj$plot +
scale_color_manual(values = colors) +
theme_bw()
p
# Metrics theme
colors <- c("MHW_SumCumInt" = "#3C6342", "o2os" = "#289E3D", "phos" = "#E6C173", "tos" = "#81B0CC", "velocity" = "#855600")
Ordi_Obj <- gg_ordiplot(solution.mds, groups = df_groups$metric, ellipse = TRUE, kind ="sd")
p_metric <- Ordi_Obj$plot +
scale_color_manual(values = colors) +
theme_bw()
p_metric
# Approach Theme
colors <- c("climate priority area" = "#E6BA7E", "feature" = "#4D3B2A", "penalty" = "#6984BF", "percentile" = "#2B8142")
Ordi_Obj <- gg_ordiplot(solution.mds, groups = df_groups$approach, ellipse = TRUE, kind ="sd")
p_approach <- Ordi_Obj$plot +
scale_color_manual(values = colors) +
theme_bw()
p_approach
p_metric + p_approach
df_groups[[ "scenario" ]]
# Scenario Theme
palette <- c("SSP1-2.6" = "#289E3D", "SSP2-4.5" = "#E6C173", "SSP5-8.5" = "#855600")
plotOrdination("scenario")
# ----- Plot ordinations -----
plotOrdination <- function(x, palette) {
Ordi_Obj <- gg_ordiplot(solution.mds, groups = df_groups[[ x ]], ellipse = TRUE, kind = "sd")
p <- Ordi_Obj$plot +
scale_color_manual(values = palette) +
theme_bw()
return(p)
}
plotOrdination("scenario")
# Scenario Theme
palette <- c("SSP1-2.6" = "#289E3D", "SSP2-4.5" = "#E6C173", "SSP5-8.5" = "#855600")
plotOrdination("scenario", palette)
plot <- plotOrdination("scenario", palette)
plot
ggsave("Figures/nMDS_scenario.png", plot = plot, height = 10, width = 10, dpi = 600)
# Ensemble Theme
colors <- c("EM" = "#FAF7B7", "CanESM5" = "#E6C173", "CMCC-ESM2" = "#855600", "GFDL-ESM4" = "#5075BA", "IPSL-CM6A-LR" = "#81B0CC", "NorESM2-MM" = "#5A9E67")
# Ensemble Theme
palette <- c("EM" = "#FAF7B7", "CanESM5" = "#E6C173", "CMCC-ESM2" = "#855600", "GFDL-ESM4" = "#5075BA", "IPSL-CM6A-LR" = "#81B0CC", "NorESM2-MM" = "#5A9E67")
plot <- plotOrdination("ensemble", palette)
plot <- plotOrdination("model", palette)
plot
ggsave("Figures/nMDS_ensemble.png", plot = plot, height = 10, width = 10, dpi = 600)
# Metrics theme
palette <- c("MHW_SumCumInt" = "#3C6342", "o2os" = "#289E3D", "phos" = "#E6C173", "tos" = "#81B0CC", "velocity" = "#855600")
plot <- plotOrdination("metric", palette)
plot
(plot <- plotOrdination("metric", palette))
ggsave("Figures/nmds_metric.png", plot = plot, height = 10, width = 10, dpi = 600)
# Approach Theme
palette <- c("climate priority area" = "#E6BA7E", "feature" = "#4D3B2A", "penalty" = "#6984BF", "percentile" = "#2B8142")
(plot <- plotOrdination("approach", palette))
ggsave("Figures/nmds_approach.png", plot = plot, height = 10, width = 10, dpi = 600)
# Load functions
source("HelperFunctions/SpatPlan_Extras.R") # Load the extras, including functions and libraries
source("HelperFunctions/SpatPlan_HelperFxns_WestPac.R") # Load helper functions written specifically for this spatial planning project
output_solutions <- "Output/solutions/"
output_summary <- "Output/summary/"
output_lowregret <- "Output/lowregret/"
# Load files
source("03_SpatPlan_Master_Preliminaries.R")
# Load files
source("03_SpatPlan_Master_Preliminaries.R")
install.packages("rnaturalearthhires", repos = "http://packages.ropensci.org", type = "source")
total_area = nrow(PUs) * PU_size
save_name <- "WestPacific"
PU_size = 669.9 # km2 (0.25 deg at equator)
Shape <- "Hexagon" # "Shape of PUs
PUs <- read_rds(file.path("Output", paste(save_name, paste0("PlanningRegion.rds"), sep = "_")))
land <- ne_countries(scale = 'large', returnclass = 'sf') %>%
fSpatPlan_Convert2PacificRobinson() # Land masses; needed for plotting
devtools::install_github("ropensci/rnaturalearthhires")
land <- ne_countries(scale = 'large', returnclass = 'sf') %>%
fSpatPlan_Convert2PacificRobinson() # Land masses; needed for plotting
#### Conservation Features ####
aqua_sf <- read_rds(file.path("Output", paste(save_name, paste0("AquaMaps.rds"), sep = "_")))
# Changing to 1s and 0s
CutOff = 0.5
subset_aqua_sf <- aqua_sf %>%
as_tibble() %>%
dplyr::select(Doryrhamphus_excisus.excisus, Padina_sanctae.crucis, Platybelone_argalus.platyura,
Tylosurus_acus.acus, Tylosurus_acus.melanotus)
aqua_sf <- aqua_sf %>%
mutate_at(vars(colnames(subset_aqua_sf)),
funs(case_when(. >= CutOff ~ 1,
. <= CutOff ~ 0,
is.na(.) ~ 0)))
# Uniform Cost (Using the Area)
UniformCost <- PUs %>%
dplyr::mutate(cost = PU_size)
### Climate Metrics ####
# Call function for each metric
LoadClimateMetrics <- function(metric,
model = NA, # if model = NA, approach is ensemble mean
scenario
) {
if (scenario == "SSP 1-2.6") {
scenario_obj = "SSP126"
} else if (scenario == "SSP 2-4.5") {
scenario_obj = "SSP245"
} else if (scenario == "SSP 5-8.5") {
scenario_obj = "SSP585"
}
# ----- Set path -----
if(is.na(model)) { # Ensemble mean approach
if (metric == "velocity") {
path = "Data/Climate/ClimateMetrics/ClimateVelocity"
} else if (str_detect(metric, pattern = "MHW")) {
path = "Data/Climate/ClimateMetrics/MHW"
} else {
path = file.path("Data/Climate/ClimateMetrics/RateOfChange", metric)
}
} else { # Multi-model ensemble approach
if (str_detect(metric, pattern = "MHW")) {
path = file.path("Data/Climate/ClimateMetrics_Ensemble/MHW", scenario)
} else{
path = file.path("Data/Climate/ClimateMetrics_Ensemble", metric, scenario)
}
}
# ----- Read RDS file -----
if(is.na(model)) {
output <- paste0("Output/", save_name, "_ClimateLayer")
if (metric == "velocity") {
metric_tmp = "velocity_tos"
df <- readRDS(paste(output, metric_tmp, paste0(scenario, ".rds"), sep = "_"))
assign(x = paste(metric, scenario_obj, sep = "_"), value = df, envir=.GlobalEnv)
} else if (metric %in% c("tos", "phos", "o2os")) {
metric_tmp = paste0("roc_", metric)
df <- readRDS(paste(output, metric_tmp, paste0(scenario, ".rds"), sep = "_"))
assign(x = paste(metric_tmp, scenario_obj, sep = "_"), value = df, envir=.GlobalEnv)
} else if (str_detect(metric, pattern = "MHW")) {
df <- readRDS(paste(output, metric, paste0(scenario, ".rds"), sep = "_"))
assign(x = paste(metric, scenario_obj, sep = "_"), value = df, envir=.GlobalEnv)
}
} else { # Multi-model ensemble approach
output <- paste0("Output/", save_name, "_ClimateLayer")
if (str_detect(metric, pattern = "velocity")) {
df <- readRDS(paste(output, metric, model, scenario, "ensemble.rds", sep = "_"))
assign(x = paste(metric, model, scenario_obj, sep = "_"), value = df, envir = .GlobalEnv)
} else if (str_detect(metric, pattern = "MHW")) {
df <- readRDS(paste(output, metric, model, paste0(scenario, ".rds"), sep = "_"))
assign(x = paste(metric, model, scenario_obj, sep = "_"), value = df, envir = .GlobalEnv)
} else {
metric_tmp = paste0("roc_", metric)
df <- readRDS(paste(output, metric_tmp, model, scenario, "ensemble.rds", sep = "_"))
assign(x = paste(metric, model, scenario_obj, sep = "_"), value = df, envir = .GlobalEnv)
}
}
}
total_area = nrow(PUs) * PU_size
#### Comparing low-regret climate-approach solutions ####
# ----- Load low-regret files -----
# Plans
LRFeature <- readRDS("Output/lowregret/s3-EM-LowRegret-Feature-585.rds")
LRPercentile <- readRDS("Output/lowregret/s2-EM-LowRegret-Percentile-585.rds")
LRPenalty <- readRDS("Output/lowregret/s4-EM-LowRegret-Penalty-585.rds")
LRClimatePriorityArea <- readRDS("Output/lowregret/s5-EM-LowRegret-ClimatePriorityArea-585.rds")
# Summaries
LRFeature_summary <- read_csv("Output/summary/MetricTheme_Feature_LowRegretSummary.csv") %>%
dplyr::select(-1)
LRPercentile_summary <- read_csv("Output/summary/MetricTheme_Percentile_LowRegretSummary.csv") %>%
dplyr::select(-1)
LRPenalty_summary <- read_csv("Output/summary/MetricTheme_Penalty_LowRegretSummary.csv") %>%
dplyr::select(-1)
LRClimatePriorityArea_summary <- read_csv("Output/summary/MetricTheme_ClimatePriorityArea_LowRegretSummary.csv") %>%
dplyr::select(-1)
# Feature representation
LRFeature_featrep <- read_csv("Output/summary/MetricTheme_Feature_FeatureRepresentation.csv") %>%
dplyr::select(-1) %>%
dplyr::filter(feature != "climate_layer")
LRPercentile_featrep <- read_csv("Output/summary/MetricTheme_Percentile_FeatureRepresentation.csv") %>% dplyr::select(-1)
LRPenalty_featrep <- read_csv("Output/summary/MetricTheme_Penalty_FeatureRepresentation.csv") %>%
dplyr::select(-1) %>%
dplyr::filter(feature != "climate_layer")
LRClimatePriorityArea_featrep <- read_csv("Output/summary/MetricTheme_ClimatePriorityArea_FeatureRepresentation.csv") %>% dplyr::select(-1)
feat_rep <- left_join(LRFeature_featrep, LRPercentile_featrep, by = "feature") %>%
left_join(., LRPenalty_featrep, by = "feature") %>%
left_join(., LRClimatePriorityArea_featrep, by = "feature")
summary <- rbind(LRFeature_summary, LRPercentile_summary, LRPenalty_summary, LRClimatePriorityArea_summary)
# ----- Summary statistics of low-regret climate-approach solutions -----
solution_list <- list(LRFeature, LRPercentile, LRPenalty, LRClimatePriorityArea)
climateLayer_list <- list(roc_tos_SSP585, roc_phos_SSP585, roc_o2os_SSP585, velocity_SSP585, MHW_SumCumInt_SSP585)
climate
# ----- Summary statistics of low-regret climate-approach solutions -----
solution_list <- list(LRFeature, LRPercentile, LRPenalty, LRClimatePriorityArea)
run_list <- c("LRFeature", "LRPercentile", "LRPenalty", "LRClimatePriorityArea")
# Load climate metrics
metric_list <- c("tos", "phos", "o2os", "velocity", "MHW_SumCumInt")
for(i in 1:length(metric_list)) {
LoadClimateMetrics(metric_list[i], model = NA, scenario = "SSP 5-8.5")
}
climateLayer_list <- list(roc_tos_SSP585, roc_phos_SSP585, roc_o2os_SSP585, velocity_SSP585, MHW_SumCumInt_SSP585)
# ----- Check and save the Climate Metrics of the Low-Regret Solutions -----
climate <- lowRegret_ClimateSummary(solution = solution_list,
run = run_list, metric = metric_list,
climate = climateLayer_list, scenario = "585",
approach = run_list)
climate$mean_sum_cumulative_intensity
# ----- Sum of Cumulative MHW Intensity -----
list <- list() # empty list
for(i in 1:length(run_list)) {
list[[i]] <- make_kernel(solution_list[[i]], run_list[i], group_name, metric = MHW_SumCumInt_SSP585)
}
# ----- Climate-smart metrics of LR areas shown using Kernel Density plots -----
group_name = "approach"
# ----- Sum of Cumulative MHW Intensity -----
list <- list() # empty list
for(i in 1:length(run_list)) {
list[[i]] <- make_kernel(solution_list[[i]], run_list[i], group_name, metric = MHW_SumCumInt_SSP585)
}
df <- do.call(rbind, list)
ggRidge <- ggplot(data = df, aes(x = transformed, y = approach, group = approach, fill = stat(x))) +
geom_density_ridges_gradient(scale = 3) +
scale_fill_viridis_c(name = expression('total degree days'), option = "G") +
geom_vline(xintercept = climate$mean_sum_cumulative_intensity,
linetype = "dashed", color = "khaki3", size = 0.5) +
theme_classic()
ggRidge
ggsave(filename = "MHWSumCumIntDist-ApproachThemeLR-MHW_SumCumInt.png",
plot = ggRidge, width = 10, height = 6, dpi = 300,
path = "Figures/") # save plot
climate
# Load summaries
feature <- read_csv(paste0(output_summary, "MetricTheme_Feature_Summary.csv")) %>% dplyr::filter(grepl("tos", run)) %>% dplyr::select(mean_climate_warming, run)
percentile <- read_csv(paste0(output_summary, "MetricTheme_Percentile_Summary.csv")) %>% dplyr::filter(grepl("tos", run)) %>% dplyr::select(mean_climate_warming, run)
penalty <- read_csv(paste0(output_summary, "MetricTheme_Penalty_Summary.csv")) %>% dplyr::filter(grepl("tos", run)) %>% dplyr::select(mean_climate_warming, run)
climatePriorityArea <- read_csv(paste0(output_summary, "MetricTheme_ClimatePriorityArea_Summary.csv")) %>% dplyr::filter(grepl("tos", run)) %>% dplyr::select(mean_climate_warming, run)
feature
feature <- read_csv(paste0(output_summary, "MetricTheme_Feature_Summary.csv")) %>% dplyr::filter(grepl("MHW", run)) %>% dplyr::select(mean_sum_cumulative_intensity, run)
percentile <- read_csv(paste0(output_summary, "MetricTheme_Percentile_Summary.csv")) %>% dplyr::filter(grepl("MHW", run)) %>% dplyr::select(mean_sum_cumulative_intensity, run)
penalty <- read_csv(paste0(output_summary, "MetricTheme_Penalty_Summary.csv")) %>% dplyr::filter(grepl("MHW", run)) %>% dplyr::select(mean_sum_cumulative_intensity, run)
climatePriorityArea <- read_csv(paste0(output_summary, "MetricTheme_ClimatePriorityArea_Summary.csv")) %>% dplyr::filter(grepl("MHW", run)) %>% dplyr::select(mean_sum_cumulative_intensity, run)
feature
percentile
penalty
climatePriorityArea
before <- c(10, 11.5, 9, 8.75, 10, 11, 9.75, 10.2, 9.9, 10)
after <- c(14, 13.5, 13, 11, 14.5, 12.5, 12, 13, 14, 13.6)
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after)
)
my_data
res <- t.test(before, after, paired = TRUE)
res
my_data1 <- my_data %>% dplyr::mutate(difference = before-after)
my_data1 <- cbind(before, after) %>% dplyr::mutate(difference = before-after)
my_data1 <- c(before, after) %>% dplyr::mutate(difference = before-after)
my_data1 <- bind_cols(before, after) %>% dplyr::mutate(difference = before-after)
my_data1
sd(my_data1$difference)
mean(my_data1$difference)
sd = sd(my_data1$difference)
mean = mean(my_data1$difference)
mean/sqrt(sd^2 / 10)
?cdf
library(BSDA)
install.packages("BSDA")
library(BSDA)
?z.test
denominator = sqrt((0.52)^2/103 + (0.46)^2/225)
denominator
numerator = 3.37 - 3.28
z = numerator/denominator
z
z
?pnorm
qnorm(p = 0.9)
denominator = sqrt((sd1^2/n1) + (sd2^2/n2))
# Training program 1:
mean1 = 35.52
sd1 = 4.4752
# Training program 2:
mean2 = 31.56
sd2 = 4
# alpha = 0.10 (90%)
n1 = 9
n2 = 9
numerator = mean1 - mean2
denominator = sqrt((sd1^2/n1) + (sd2^2/n2))
t = numerator/denominator
t
?qnorm
df = 9+9 - 2
qt(0.9, df = df) # get critical value for t distribution
