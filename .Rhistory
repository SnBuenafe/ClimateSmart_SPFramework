geom_sf(data = s1, aes(fill = solution_1), colour = NA, size = 0.1, show.legend = TRUE) +
#    geom_sf(data = PlanUnits, colour = "lightblue", fill = NA, size = 0.1, show.legend = FALSE) +
geom_sf(data = world, colour = "grey20", fill = "grey20", alpha = 0.9, size = 0.1, show.legend = FALSE) +
coord_sf(xlim = st_bbox(PlanUnits)$xlim, ylim = st_bbox(PlanUnits)$ylim) +
theme(axis.text = element_text(size = 20),
legend.text = element_text(size = 13),
legend.title = element_text(size = 16)) +
scale_fill_manual(name="Planning Units",
values = c("TRUE" = "steelblue4",
"FALSE" = "lightsteelblue2"),
labels=c("selected", "not selected")) +
theme_bw() #+
#labs(subtitle = "Solution")
}
findPattern <- function(pattern) {
solution <- apply(outer(fileList, pattern, str_detect), 1, all) %>%
as.numeric()
x <- which(solution == 1)
plot <- readRDS(paste0(solutionPath, fileList[x])) %>%
dplyr::select(solution_1) %>% mutate(solution_1 = as.logical(solution_1))
return(plot)
}
bind_cols <- function(p1, p2) {
df <- bind_cols(p1, p2) %>%
mutate(Combined = solution_1 + solution_2) %>%
mutate(Compare = case_when(Combined == 2 ~ "Same",
solution_1 == 1 & solution_2 == 0 ~ "Removed (-)",
solution_1 == 0 & solution_2 == 1 ~ "Added (+)"),
Compare = factor(Compare, levels = c("Added (+)", "Same", "Removed (-)"))) %>%
drop_na()
return(df)
}
data_prep <- function(pattern) {
solution <- apply(outer(fileList, pattern, str_detect), 1, all) %>%
as.numeric()
x <- which(solution == 1)
plot <- readRDS(paste0(solutionPath, fileList[x])) %>%
dplyr::select(solution_1) %>%
mutate(solution_1 = as.logical(solution_1))
}
data_prep <- function(pattern) {
solution2 <- apply(outer(fileList, pattern, str_detect), 1, all) %>%
as.numeric()
x <- which(solution2 == 1)
plot <- readRDS(paste0(solutionPath, fileList[x])) %>%
dplyr::select(solution_1) %>%
mutate(solution_1 = as.logical(solution_1))
}
land <- ne_countries(scale = 'large', returnclass = 'sf') %>%
fSpatPlan_Convert2PacificRobinson() # Land masses; needed for plotting
save_name <- "WestPacific"
PUs <- read_rds(file.path("Output", paste(save_name, paste0("PlanningRegion.rds"), sep = "_")))
fSpatPlan_PlotComparison <- function(data, land){
ggplot() +
geom_sf(data = data, aes(fill = Compare), colour = NA, size = 0.0001) +
geom_sf(data = land, colour = "grey20", fill = "grey20", alpha = 0.9, size = 0.1, show.legend = FALSE) +
coord_sf(xlim = st_bbox(data)$xlim, ylim = st_bbox(data)$ylim) +
theme_bw() +
scale_fill_manual(name=" ", values = c("Added (+)" = "#ef6548", "Same" = "#fff7ec", "Removed (-)" = "#3690c0"), drop = FALSE) +
theme(legend.position = "bottom") #optional to make more space for plot
}
fSpatPlan_PlotSolution <- function(s1, PlanUnits, world){
ggplot() +
geom_sf(data = s1, aes(fill = solution_1), colour = NA, size = 0.1, show.legend = TRUE) +
#    geom_sf(data = PlanUnits, colour = "lightblue", fill = NA, size = 0.1, show.legend = FALSE) +
geom_sf(data = world, colour = "grey20", fill = "grey20", alpha = 0.9, size = 0.1, show.legend = FALSE) +
coord_sf(xlim = st_bbox(PlanUnits)$xlim, ylim = st_bbox(PlanUnits)$ylim) +
theme(axis.text = element_text(size = 20),
legend.text = element_text(size = 13),
legend.title = element_text(size = 16)) +
scale_fill_manual(name="Planning Units",
values = c("TRUE" = "steelblue4",
"FALSE" = "lightsteelblue2"),
labels=c("selected", "not selected")) +
theme_bw() #+
#labs(subtitle = "Solution")
}
compute_summary <- function(s) {
summary <- s %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
filter(solution_1 == 1) %>%
summarize(sum_area = nrow(.))
summary %<>% mutate(percent_area = sum_area*100/35389)
return(summary)
}
create_corrmatrix <- function(list_plans) {
pacman::p_load(irr)
y = 1
s_matrix <- list() # empty list
for(i in 1:length(list_plans)){
for(j in 1:length(list_plans)){
kappa_temp <- irr::kappa2(bind_cols(list_plans[[i]], list_plans[[j]]))
kappa_corrvalue <- kappa_temp$value
kappa_pvalue <- kappa_temp$p.value
s_matrix[[y]] <- cbind(colnames(list_plans[[i]]), colnames(list_plans[[j]]), kappa_corrvalue, kappa_pvalue)
y = y+1
}
}
s_matrix_all <- do.call(rbind, s_matrix) %>%
as_tibble()
colnames(s_matrix_all)[1:2] <- c('plan1','plan2')
matrix <- s_matrix_all %>%
as_tibble() %>%
dplyr::select(-kappa_pvalue) %>%
pivot_wider(names_from = plan2, values_from = kappa_corrvalue) %>%
as.matrix()
return(matrix)
}
#### Shiny ####
header <- dashboardHeader(title = "Climate-smart Spatial Planning", titleWidth = 310)
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Introduction", tabName = "intro", icon = icon("tasks", lib = "glyphicon")),
menuItem("Methods", tabName = "method", icon = icon("menu-hamburger", lib = "glyphicon")),
menuItem("Plot", tabName = "plot", icon = icon("picture", lib = "glyphicon")),
menuItem("Compare", tabName = "compare", icon = icon("th-large", lib = "glyphicon"))
)
)
body_intro <- fluidPage(
h2("Spatial plan: ", style = "font-family: Arial")
)
body_plot <- fluidPage(
#fluidRow("We show plots individually depending on the inputs"),
fluidRow(),
fluidRow(box(title = "Scenario Input", width = 3, background = "light-blue",
selectInput(inputId = "scenario3", label = NULL,
choices = c("SSP 1-2.6" = "126", "SSP 2-4.5" = "245", "SSP 5-8.5"= "585")),
selectInput(inputId = "model3", label = "Model",
choices = c("Ensemble Mean" = "EM", "CanESM5" = "CanESM5", "CMCC-ESM2" = "CMCC",
"GFDL-ESM4" = "GFDL", "IPSL-CM6A-LR" = "IPSL", "NorESM2-MM" = "NorESM2")),
selectInput(inputId = "metric3", label = "Climate metric",
choices = c("Warming" = "tos", "Acidification" = "phos", "Deoxygenation" = "o2os",
"Climate velocity" = "velocity", "MHW Intensity" = "MHW")),
selectInput(inputId = "approach3", label = "Approach to identifying refugia",
choices = c("Percentile" = "Percentile", "Climate priority area" = "ClimatePriorityArea",
"Feature" = "Feature", "Penalty" = "Penalty"))),
box(title = "Climate-smart spatial plan",
width = 9, solidHeader = TRUE, status = "primary",
actionButton("create2", "Create Plot"),
shinycssloaders::withSpinner(plotOutput("IndividualPlot"))))
)
body_compare <- fluidPage(
fluidRow(
box(title = "Plot 1 Inputs",
width = 3, background = "light-blue",
selectInput(inputId = "scenario1", label = "Scenario",
choices = c("SSP 1-2.6" = "126", "SSP 2-4.5" = "245", "SSP 5-8.5"= "585")),
selectInput(inputId = "model1", label = "Model",
choices = c("Ensemble Mean" = "EM", "CanESM5" = "CanESM5", "CMCC-ESM2" = "CMCC",
"GFDL-ESM4" = "GFDL", "IPSL-CM6A-LR" = "IPSL", "NorESM2-MM" = "NorESM2")),
selectInput(inputId = "metric1", label = "Climate metric",
choices = c("Warming" = "tos", "Acidification" = "phos", "Deoxygenation" = "o2os",
"Climate velocity" = "velocity", "MHW Intensity" = "MHW")),
selectInput(inputId = "approach1", label = "Approach to identifying refugia",
choices = c("Percentile" = "Percentile", "Climate priority area" = "ClimatePriorityArea",
"Feature" = "Feature", "Penalty" = "Penalty"))),
box(title = "Plot 2 Inputs",
width = 3, background = "light-blue",
selectInput(inputId = "scenario2", label = "Scenario",
choices = c("SSP 1-2.6" = "126", "SSP 2-4.5" = "245", "SSP 5-8.5"= "585")),
selectInput(inputId = "model2", label = "Model",
choices = c("Ensemble Mean" = "EM", "CanESM5" = "CanESM5", "CMCC-ESM2" = "CMCC",
"GFDL-ESM4" = "GFDL", "IPSL-CM6A-LR" = "IPSL", "NorESM2-MM" = "NorESM2")),
selectInput(inputId = "metric2", label = "Climate metric",
choices = c("Warming" = "tos", "Acidification" = "phos", "Deoxygenation" = "o2os",
"Climate velocity" = "velocity", "MHW Intensity" = "MHW")),
selectInput(inputId = "approach2", label = "Approach to identifying refugia",
choices = c("Percentile" = "Percentile", "Climate priority area" = "ClimatePriorityArea",
"Feature" = "Feature", "Penalty" = "Penalty"))),
box(title = "Comparison Plot",
width = 6, solidHeader = TRUE, status = "primary",
actionButton("create", "Create Plot"),
shinycssloaders::withSpinner(plotOutput("ComparisonPlot")))
),
fluidRow(
box(title = "Plot 1", width = 4, status = "success", solidHeader = TRUE,
shinycssloaders::withSpinner(plotOutput("Plot1"))),
box(title = "Plot 2", width = 4, status = "success", solidHeader = TRUE,
shinycssloaders::withSpinner(plotOutput("Plot2"))),
box(title = "Summary Statistics", width = 4, status = "success", solidHeader = TRUE, collapsible = TRUE,
"Area for Plot 1 (% planning region):", verbatimTextOutput("areaPlot1"), br(),
"Area for Plot 2 (% planning region):", verbatimTextOutput("areaPlot2"), br(),
"Cohen's Kappa: ", verbatimTextOutput("Matrix"), br(),
"Degree of Agreement: ", verbatimTextOutput("CategoryMatrix")
)
)
)
body <- dashboardBody(
tabItems(
tabItem(tabName = "intro",
body_intro),
tabItem(tabName = "plot",
body_plot),
tabItem(tabName = "compare",
body_compare)
))
ui <- dashboardPage(header,
sidebar,
body)
server <- function(input, output) {
solutionPath <- "Output/solutions/"
fileList <- list.files(solutionPath)
#### Comparison Plots ####
plot1 <- reactive({
pattern1 <- c(input$scenario1, input$model1, input$metric1, input$approach1)
plo1 <- data_prep(pattern1)
}) %>% bindEvent(input$create)
output$Plot1 <- renderPlot({
fSpatPlan_PlotSolution(plot1(), PUs, land) + theme(legend.position = "none")
})
plot2 <- reactive({
pattern2 <- c(input$scenario2, input$model2, input$metric2, input$approach2)
solution2 <- apply(outer(fileList, pattern2, str_detect), 1, all) %>%
as.numeric()
x <- which(solution2 == 1)
plot2 <- readRDS(paste0(solutionPath, fileList[x])) %>%
dplyr::select(solution_1) %>%
mutate(solution_1 = as.logical(solution_1))
}) %>% bindEvent(input$create)
output$Plot2 <- renderPlot({
fSpatPlan_PlotSolution(plot2(), PUs, land) + theme(legend.position = "none")
})
data <- reactive({
pattern1 <- c(input$scenario1, input$model1, input$metric1, input$approach1)
#pattern1 <- c("126", "CMCC", "tos", "Percentile")
solution1 <- apply(outer(fileList, pattern1, str_detect), 1, all) %>%
as.numeric()
x <- which(solution1 == 1)
plot1 <- readRDS(paste0(solutionPath, fileList[x])) %>% dplyr::select(solution_1)
pattern2 <- c(input$scenario2, input$model2, input$metric2, input$approach2)
#pattern2 <- c("585", "EM", "tos", "Percentile")
solution2 <- apply(outer(fileList, pattern2, str_detect), 1, all) %>%
as.numeric()
x <- which(solution2 == 1)
plot2 <- readRDS(paste0(solutionPath, fileList[x])) %>% as_tibble() %>% dplyr::select(solution_1) %>% rename(solution_2 = solution_1)
df <- bind_cols(plot1, plot2) %>%
mutate(Combined = solution_1 + solution_2) %>%
mutate(Compare = case_when(Combined == 2 ~ "Same",
solution_1 == 1 & solution_2 == 0 ~ "Removed (-)",
solution_1 == 0 & solution_2 == 1 ~ "Added (+)"),
Compare = factor(Compare, levels = c("Added (+)", "Same", "Removed (-)"))) %>%
drop_na()
}) %>%
bindEvent(input$create)
output$ComparisonPlot <- renderPlot({
#req(data())
fSpatPlan_PlotComparison(data(), land)
#ggplot(data()) + geom_sf(aes(fill = as.factor(Compare)), color = NA, size = 0.01
})
# Getting summary statistics
output$areaPlot1 <- renderPrint({
compute_summary(plot1() %>% mutate(as.numeric(solution_1)))$percent_area
})
output$areaPlot2 <- renderPrint({
compute_summary(plot2() %>% mutate(as.numeric(solution_1)))$percent_area
})
cohen <- reactive({
planList <- list(plot1() %>% st_drop_geometry() %>% dplyr::rename(plot1 = solution_1), plot2() %>% st_drop_geometry() %>% dplyr::rename(plot2 = solution_1)) %>%
create_corrmatrix()
round(as.numeric(planList[2,2]), digits = 2)
})
output$Matrix <- renderPrint({
cohen()
})
output$CategoryMatrix <- renderPrint({
if(cohen() <= 0) {
category = "none"
} else if(cohen() > 0 && cohen() <= 0.2) {
category = "slight"
} else if(cohen() > 0.2 && cohen() <= 0.4) {
category = "fair"
} else if(cohen() > 0.4 && cohen() <= 0.6) {
category = "moderate"
} else if(cohen() > 0.6 && cohen() <= 0.8) {
category = "substantial"
} else {
category = "almost perfect"
}
category
})
#### Individual plots ####
dataIndividual <- reactive({
pattern3 <- c(input$scenario3, input$model3, input$metric3, input$approach3)
solution3 <- apply(outer(fileList, pattern3, str_detect), 1, all) %>%
as.numeric()
x <- which(solution3 == 1)
plot3 <- readRDS(paste0(solutionPath, fileList[x])) %>% dplyr::select(solution_1) %>%  mutate(solution_1 = as.logical(solution_1))
}) %>%
bindEvent(input$create2)
#plotting
output$IndividualPlot <- renderPlot({
fSpatPlan_PlotSolution(dataIndividual(), PUs, land)
})
}
shinyApp(ui, server)
solutionPath <- "Output/solutions/"
fileList <- list.files(solutionPath)
shinyApp(ui, server)
data_prep <- function(pattern) {
solution2 <- apply(outer(fileList, pattern, str_detect), 1, all) %>%
as.numeric()
x <- which(solution2 == 1)
plot <- readRDS(paste0(solutionPath, fileList[x])) %>%
dplyr::select(solution_1)
}
pattern4 <- c("126", "CMCC", "tos", "Percentile")
dat1 <- data_prep(pattern4)
pattern5 <- c("585", "EM", "tos", "Percentile")
dat2 <- data_prep(pattern5)
df <- bind_cols(dat1, dat2)
View(dat2)
View(dat1)
#pattern5 <- c("585", "EM", "tos", "Percentile")
dat2 <- data_prep(pattern5) %>% rename(.dat2, solution_2 = solution_1)
#pattern5 <- c("585", "EM", "tos", "Percentile")
dat2 <- data_prep(pattern5) %>% rename(solution_2 = solution_1)
df <- bind_cols(dat1, dat2)
library(tidyverse)
library(sf)
library(rnaturalearth)
library(magrittr)
source("HelperFunctions/fSpatPlan_Convert2PacificRobinson.R")
solutionPath <- "Output/solutions/"
fileList <- list.files(solutionPath)
land <- ne_countries(scale = 'large', returnclass = 'sf') %>%
fSpatPlan_Convert2PacificRobinson() # Land masses; needed for plotting
save_name <- "WestPacific"
PUs <- read_rds(file.path("Output", paste(save_name, paste0("PlanningRegion.rds"), sep = "_")))
# Helper Functions
fSpatPlan_PlotComparison <- function(data, land){
ggplot() +
geom_sf(data = data, aes(fill = Compare), colour = NA, size = 0.0001) +
geom_sf(data = land, colour = "grey20", fill = "grey20", alpha = 0.9, size = 0.1, show.legend = FALSE) +
coord_sf(xlim = st_bbox(data)$xlim, ylim = st_bbox(data)$ylim) +
theme_bw() +
scale_fill_manual(name=" ", values = c("Added (+)" = "Red", "Same" = "ivory3", "Removed (-)" = "Blue"), drop = FALSE) +
theme(legend.position = "bottom") #optional to make more space for plot
}
fSpatPlan_PlotSolution <- function(s1, PlanUnits, world){
ggplot() +
geom_sf(data = s1, aes(fill = solution_1), colour = NA, size = 0.1, show.legend = TRUE) +
#    geom_sf(data = PlanUnits, colour = "lightblue", fill = NA, size = 0.1, show.legend = FALSE) +
geom_sf(data = world, colour = "grey20", fill = "grey20", alpha = 0.9, size = 0.1, show.legend = FALSE) +
coord_sf(xlim = st_bbox(PlanUnits)$xlim, ylim = st_bbox(PlanUnits)$ylim) +
theme(axis.text = element_text(size = 20),
legend.text = element_text(size = 13),
legend.title = element_text(size = 16)) +
scale_fill_manual(name="Planning Units",
values = c("TRUE" = "steelblue4",
"FALSE" = "lightsteelblue2"),
labels=c("selected", "not selected")) +
theme_bw() #+
#labs(subtitle = "Solution")
}
findPattern <- function(pattern) {
solution <- apply(outer(fileList, pattern, str_detect), 1, all) %>%
as.numeric()
x <- which(solution == 1)
plot <- readRDS(paste0(solutionPath, fileList[x])) %>%
dplyr::select(solution_1) %>% mutate(solution_1 = as.logical(solution_1))
return(plot)
}
bind_cols <- function(p1, p2) {
df <- bind_cols(p1, p2) %>%
mutate(Combined = solution_1 + solution_2) %>%
mutate(Compare = case_when(Combined == 2 ~ "Same",
solution_1 == 1 & solution_2 == 0 ~ "Removed (-)",
solution_1 == 0 & solution_2 == 1 ~ "Added (+)"),
Compare = factor(Compare, levels = c("Added (+)", "Same", "Removed (-)"))) %>%
drop_na()
return(df)
}
data_prep <- function(pattern) {
solution2 <- apply(outer(fileList, pattern, str_detect), 1, all) %>%
as.numeric()
x <- which(solution2 == 1)
plot <- readRDS(paste0(solutionPath, fileList[x])) %>%
dplyr::select(solution_1)
}
#### Preliminaries ####
library(shiny)
library(shinydashboard)
library(tidyverse)
library(sf)
library(rnaturalearth)
library(magrittr)
source("HelperFunctions/fSpatPlan_Convert2PacificRobinson.R")
land <- ne_countries(scale = 'large', returnclass = 'sf') %>%
fSpatPlan_Convert2PacificRobinson() # Land masses; needed for plotting
save_name <- "WestPacific"
PUs <- read_rds(file.path("Output", paste(save_name, paste0("PlanningRegion.rds"), sep = "_")))
fSpatPlan_PlotComparison <- function(data, land){
ggplot() +
geom_sf(data = data, aes(fill = Compare), colour = NA, size = 0.0001) +
geom_sf(data = land, colour = "grey20", fill = "grey20", alpha = 0.9, size = 0.1, show.legend = FALSE) +
coord_sf(xlim = st_bbox(data)$xlim, ylim = st_bbox(data)$ylim) +
theme_bw() +
scale_fill_manual(name=" ", values = c("Added (+)" = "#ef6548", "Same" = "#fff7ec", "Removed (-)" = "#3690c0"), drop = FALSE) +
theme(legend.position = "bottom") #optional to make more space for plot
}
fSpatPlan_PlotSolution <- function(s1, PlanUnits, world){
ggplot() +
geom_sf(data = s1, aes(fill = solution_1), colour = NA, size = 0.1, show.legend = TRUE) +
#    geom_sf(data = PlanUnits, colour = "lightblue", fill = NA, size = 0.1, show.legend = FALSE) +
geom_sf(data = world, colour = "grey20", fill = "grey20", alpha = 0.9, size = 0.1, show.legend = FALSE) +
coord_sf(xlim = st_bbox(PlanUnits)$xlim, ylim = st_bbox(PlanUnits)$ylim) +
theme(axis.text = element_text(size = 20),
legend.text = element_text(size = 13),
legend.title = element_text(size = 16)) +
scale_fill_manual(name="Planning Units",
values = c("TRUE" = "steelblue4",
"FALSE" = "lightsteelblue2"),
labels=c("selected", "not selected")) +
theme_bw() #+
#labs(subtitle = "Solution")
}
compute_summary <- function(s) {
summary <- s %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
filter(solution_1 == 1) %>%
summarize(sum_area = nrow(.))
summary %<>% mutate(percent_area = sum_area*100/35389)
return(summary)
}
create_corrmatrix <- function(list_plans) {
pacman::p_load(irr)
y = 1
s_matrix <- list() # empty list
for(i in 1:length(list_plans)){
for(j in 1:length(list_plans)){
kappa_temp <- irr::kappa2(bind_cols(list_plans[[i]], list_plans[[j]]))
kappa_corrvalue <- kappa_temp$value
kappa_pvalue <- kappa_temp$p.value
s_matrix[[y]] <- cbind(colnames(list_plans[[i]]), colnames(list_plans[[j]]), kappa_corrvalue, kappa_pvalue)
y = y+1
}
}
s_matrix_all <- do.call(rbind, s_matrix) %>%
as_tibble()
colnames(s_matrix_all)[1:2] <- c('plan1','plan2')
matrix <- s_matrix_all %>%
as_tibble() %>%
dplyr::select(-kappa_pvalue) %>%
pivot_wider(names_from = plan2, values_from = kappa_corrvalue) %>%
as.matrix()
return(matrix)
}
pattern4 <- c("126", "CMCC", "tos", "Percentile")
pattern5 <- c("585", "EM", "tos", "Percentile")
#pattern4 <- c("126", "CMCC", "tos", "Percentile")
dat1 <- data_prep(pattern4)
#pattern5 <- c("585", "EM", "tos", "Percentile")
dat2 <- data_prep(pattern5) %>% rename(solution_2 = solution_1)
df <- bind_cols(dat1, dat2)
df <- cbind(dat1, dat2)
View(df)
df <- cbind(dat1, dat2) %>%
mutate(Combined = solution_1 + solution_2) %>%
mutate(Compare = case_when(Combined == 2 ~ "Same",
solution_1 == 1 & solution_2 == 0 ~ "Removed (-)",
solution_1 == 0 & solution_2 == 1 ~ "Added (+)"),
Compare = factor(Compare, levels = c("Added (+)", "Same", "Removed (-)"))) %>%
drop_na()
runApp('~/Github/ClimateSmart_WestPac/shiny_test.R')
library(shiny); source('shiny_split/run_app.R')
gc()
View(fSpatPlan_PlotComparison)
View(fSpatPlan_Convert2PacificRobinson)
View(fSpatPlan_PlotComparison)
View(fSpatPlan_PlotSolution)
source("shiny_split/prelim.R")
runApp("shiny_split")
getwd()
source("shiny_split/prelim.R")
addResourcePath("Output/","C:/Users/sandr/Documents/GitHub/ClimateSmart_WestPac/Output")
runApp("shiny_split")
source("shiny_split/prelim.R")
addResourcePath("Output/solutions/","C:/Users/sandr/Documents/GitHub/ClimateSmart_WestPac/Output/solutions")
runApp("shiny_split")
source("shiny_split/prelim.R")
addResourcePath("Output/solutions/","C:/Users/sandr/Documents/GitHub/ClimateSmart_WestPac/Output/solutions")
addResourcePath("solutions","C:/Users/sandr/Documents/GitHub/ClimateSmart_WestPac/Output/solutions")
source('shiny_split/run_app.R')
source('shiny_split/run_app.R')
getwd()
source('shiny_split/run_app.R')
solutionPath <- "solutions/"
source('shiny_split/run_app.R')
source('shiny_split/run_app.R')
help("addResourcePath")
getwd(9)
getwd()
source('shiny_split/run_app.R')
getwd()
source('shiny_split/run_app.R')
source('shiny_split/run_app.R')
source('shiny_split/run_app.R')
source('shiny_split/run_app.R')
getwd()
source("shiny_split/prelim.R")
solPath <- "C:/Users/sandr/Documents/GitHub/ClimateSmart_WestPac/Output/solutions/"
runApp("shiny_split")
getwd(9)
getwd()
paste0(getwd())
paste0(getwd(), "Output/solutions/")
here()
library(here)
source('shiny_split/run_app.R')
source('shiny_split/run_app.R')
