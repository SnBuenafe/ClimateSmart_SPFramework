dplyr::select(selection, cellID) %>%
dplyr::rename(!!sym(run[i]) := selection)
tibble <- left_join(df, tibble)
}
tmp <- PUs %>%
dplyr::mutate(cellID = row_number()) %>%
as_tibble()
tibble %<>% dplyr::mutate(selection = rowSums(., na.rm = TRUE) - cellID) %>%
left_join(., tmp, by = "cellID") %>%
dplyr::mutate(cost = PU_size) %>%
st_as_sf(sf_column_name = "geometry")
return(tibble)
}
compute_summary(intersection, total_area, PU_size, run_name = "LR-Approaches", Cost = "cost")
# Get intersection of all low-regret areas
intersection <- intersect_lowregret(solution_list, run_list) %>%
dplyr::mutate(solution_1 = ifelse(selection == (length(run_list)*4), yes = 1, no = 0)) #*4 because 4 metrics TODO: Change it to 5 once including marine heatwaves
compute_summary(intersection, total_area, PU_size, run_name = "LR-Approaches", Cost = "cost")
climate <- list() # empty list
climate <- get_ClimateSummary(list(intersection), climateLayer_list, metric_list, col_scenario = "585", col_approach = "LR-Approaches", col_run = "LR-Approaches", climateLayer = "multiple")
climate
metric_list
climate <- list() # empty list
for (i in 1:length(metric_list)) {
climate[[i]] <- get_ClimateSummary(list(intersection), climateLayer_list[[i]], metric_list[i], col_scenario = "585", col_approach = "LR-Approaches", col_run = "LR-Approaches", climateLayer = "single")
}
climate
climate <- plyr::join_all(climate, by=c("run", "scenario", "approach"), type='left')
climate
summary <- left_join(climate, df, by = "run")
summary
# Get summary
summary <- compute_summary(intersection, total_area, PU_size, run_name = "LR-Approaches", Cost = "cost")
summary
summary <- left_join(climate, df, by = "run")
summary <- left_join(climate, summary, by = "run")
summary
write.csv(summary, paste0(output_summary, "ApproachTheme_Approaches_LowRegretSummary.csv")) # save
LRFeature
?read_csv
# Load summaries
LRFeature_summary <- read_csv("Output/summary/MetricTheme_Feature_LowRegretSummary.csv")
LRPercentile_summary <- read_csv("Output/summary/MetricTheme_Percentile_LowRegretSummary.csv") %>%
dplyr::select(-1)
# Load summaries
LRFeature_summary <- read_csv("Output/summary/MetricTheme_Feature_LowRegretSummary.csv") %>%
dplyr::select(-1)
LRPercentile_summary <- read_csv("Output/summary/MetricTheme_Percentile_LowRegretSummary.csv") %>%
dplyr::select(-1)
LRPenalty_summary <- read_csv("Output/summary/MetricTheme_Penalty_LowRegretSummary.csv") %>%
dplyr::select(-1)
LRClimatePriorityArea_summary <- read_csv("Output/summary/MetricTheme_ClimatePriorityArea_LowRegretSummary.csv") %>%
dplyr::select(-1)
LRClimatePriorityArea_summary
# Compare cost of each
summary <- rbind(LRFeature_summary, LRPercentile_summary, LRPenalty_summary, LRClimatePriorityArea_summary)
summary
ggArea <- plot_LowRegretStatistics(summary, col_name = "percent_area", y_axis = "% area")  + theme(axis.text = element_text(size = 25))
ggArea
# Plot statistics
plot_statistics <- function(summary, col_name, y_axis, theme) {
if (theme == "ensemble"){
color_legend <- c("#289E3D", "#E6C173", "#855600", "#5075BA", "#81B0CC", "#5A9E67")
string <- "as.factor(run)"
} else if (theme == "scenario"){
color_legend <- c("126" = "#289E3D", "245" = "#E6C173", "585" = "#855600")
string <- "as.factor(scenario)"
} else if (theme == "metric") {
color_legend <- c("#289E3D", "#E6C173", "#81B0CC", "#855600")
string <- "as.factor(run)"
} else if (theme == "LR-approach"){
color_legend = c("#E6BA7E", "#4D3B2A", "#6984BF", "#2B8142")
string <- "as.factor(run)"
}
plot <- ggplot(data = summary, aes_string(x = string)) + # TODO: add in aes (later on) group = scenario
geom_bar(aes_string(y = col_name, fill = string), stat = 'identity', position = position_dodge()) +
scale_fill_manual(name = 'Run',
values = color_legend) +
xlab("Run") +
ylab(y_axis) +
theme(legend.position = "bottom") +
theme_classic()
return(plot)
#  if (color == 1) { # For plotting related to RQ2
#    color_legend <- c("tos" = "#289E3D", "phos" = "#E6C173", "o2os" = "#81B0CC", "velocity" = "#855600")
#    summary %<>% dplyr::mutate(approach = case_when(str_detect(run, pattern = "tos") ~ "tos",
#                                                    str_detect(run, pattern = "phos") ~ "phos",
#                                                    str_detect(run, pattern = "o2os") ~ "o2os",
#                                                    str_detect(run, pattern = "velocity") ~ "velocity"))
#  } else if (color == 2) { # For plotting related to RQ1
#    color_legend <- c("uninformed" = "#a6611a", "tos" = "#dfc27d")
#    summary %<>% dplyr::mutate(approach = case_when(str_detect(run, pattern = "uninformed") ~ "uninformed",
#                      str_detect(run, pattern = "tos") ~ "tos"))
#  } else if (color == 3) { # For plotting vs scenarios
#    summary %<>% dplyr::mutate(approach = case_when(run == "percentile_tos_585" ~ "SSP 5-8.5",
#                                                    run == "percentile_tos_126" ~ "SSP 1-2.6",
#                                                   run == "percentile_tos_245" ~ "SSP 2-4.5"))
#
# color_legend <- c("SSP 1-2.6" = "#289E3D", "SSP 2-4.5" = "#E6C173", "SSP 5-8.5" = "#855600")
#  } else {
#   color_legend <- c("#289E3D", "#E6C173", "#81B0CC", "#855600", "#5075BA")
#  }
#plot <- ggplot(data = summary, aes(x = as.factor(approach))) + # TODO: add in aes (later on) group = scenario
# geom_bar(aes_string(y = col_name, fill = "as.factor(approach)"), stat = 'identity', position = position_dodge()) +
#  scale_fill_manual(name = 'Run',
#                   values = color_legend) +
#xlab("Run") +
#ylab(y_axis) +
#theme(legend.position = "bottom") +
#theme_classic()
}
ggArea <- plot_statistics(summary, col_name = "percent_area", y_axis = "% area")  + theme(axis.text = element_text(size = 25))
ggArea <- plot_statistics(summary, col_name = "percent_area", y_axis = "% area", theme = "LR-approach")  + theme(axis.text = element_text(size = 25))
ggArea
ggsave(filename = "Area-ApproachTheme-Approaches-585.png",
plot = ggArea, width = 7, height = 5, dpi = 300,
path = "Figures/") # save plot
source("HelperFunctions/SpatPlan_Extras.R") # Load the extras, including functions and libraries
source("HelperFunctions/SpatPlan_HelperFxns_WestPac.R") # Load helper functions written specifically for this spatial planning project
output_solutions <- "Output/solutions/"
output_summary <- "Output/summary/"
output_lowregret <- "Output/lowregret/"
# Load files
source("SpatPlan_Master_Preliminaries.R")
s14 <- readRDS("Output/solutions/s14-MM-CanESM5-Percentile-tos-585.rds")
s15 <- readRDS("Output/solutions/s15-MM-CMCC_ESM2-Percentile-tos-585.rds")
s16 <- readRDS("Output/solutions/s16-MM-GFDL_ESM4-Percentile-tos-585.rds")
s17 <- readRDS("Output/solutions/s17-MM-IPSL_CM6A_LR-Percentile-tos-585.rds")
s18 <- readRDS("Output/solutions/s18-MM-NorESM2_MM-Percentile-tos-585.rds")
# Kappa
list <- c("CanESM5", "CMCC-ESM2", "GFDL-ESM4", "IPSL-CM6A-LR", "NorESM2-MM")
object_list <- list() # empty list
solution_list <- list(s14, s15, s16, s17, s18)
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], list[i])
object_list[[i]] <- obj
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
# Kappa
list <- c("EnsembleMean", "CanESM5", "CMCC-ESM2", "GFDL-ESM4", "IPSL-CM6A-LR", "NorESM2-MM")
object_list <- list() # empty list
s2 <- readRDS("Output/solutions/s2-EM-Percentile-tos-585.rds")
solution_list <- list(s2, s14, s15, s16, s17, s18)
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], list[i])
object_list[[i]] <- obj
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
s3 <- readRDS("Output/solutions/s3-EM-Percentile-phos-585.rds")
s19 <- readRDS("Output/solutions/s19-MM-CanESM5-Percentile-phos-585.rds")
s20 <- readRDS("Output/solutions/s20-MM-CMCC_ESM2-Percentile-phos-585.rds")
s21 <- readRDS("Output/solutions/s21-MM-GFDL_ESM4-Percentile-phos-585.rds")
s22 <- readRDS("Output/solutions/s22-MM-IPSL_CM6A_LR-Percentile-phos-585.rds")
s23 <- readRDS("Output/solutions/s23-MM-NorESM2_MM-Percentile-phos-585.rds")
# Kappa
list <- c("EnsembleMean", "CanESM5", "CMCC-ESM2", "GFDL-ESM4", "IPSL-CM6A-LR", "NorESM2-MM")
object_list <- list() # empty list
solution_list <- list(s3, s19, s20, s21, s22, s23)
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], list[i])
object_list[[i]] <- obj
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
s4 <- readRDS("Output/solutions/s4-EM-Percentile-o2os-585.rds")
s24 <- readRDS("Output/solutions/s24-MM-CanESM5-Percentile-o2os-585.rds")
s25 <- readRDS("Output/solutions/s25-MM-CMCC_ESM2-Percentile-o2os-585.rds")
s26 <- readRDS("Output/solutions/s26-MM-GFDL_ESM4-Percentile-o2os-585.rds")
s27 <- readRDS("Output/solutions/s27-MM-IPSL_CM6A_LR-Percentile-o2os-585.rds")
s28 <- readRDS("Output/solutions/s28-MM-NorESM2_MM-Percentile-o2os-585.rds")
# Kappa
list <- c("EnsembleMean", "CanESM5", "CMCC-ESM2", "GFDL-ESM4", "IPSL-CM6A-LR", "NorESM2-MM")
object_list <- list() # empty list
solution_list <- list(s4, s24, s25, s26, s27, s28)
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], list[i])
object_list[[i]] <- obj
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
# Kappa
list <- c("EnsembleMean", "CanESM5", "CMCC-ESM2", "GFDL-ESM4", "IPSL-CM6A-LR", "NorESM2-MM")
object_list <- list() # empty list
solution_list <- list(s4, s24, s25, s26, s27, s28)
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], list[i])
object_list[[i]] <- obj
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
# This plots the Correlation Matrix.
plot_corrplot <- function(matrix, num) {
pacman::p_load(corrplot)
# creating corrplot
rownames(matrix) <- matrix[,1]
n <- num + 1 # num represents the number of inputted spatial plans
matrix_f <- matrix[,2:n]
class(matrix_f) <- "numeric"
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
plot <- corrplot(matrix_f, method = "shade", cl.lim = c(-0.05,1), tl.col = "black", addCoef.col = "black",
col=col(200), tl.srt=45)
return(plot)
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
# This plots the Correlation Matrix.
plot_corrplot <- function(matrix, num) {
pacman::p_load(corrplot)
# creating corrplot
rownames(matrix) <- matrix[,1]
n <- num + 1 # num represents the number of inputted spatial plans
matrix_f <- matrix[,2:n]
class(matrix_f) <- "numeric"
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
plot <- corrplot(matrix_f, method = "shade", cl.lim = c(-0.1,1), tl.col = "black", addCoef.col = "black",
col=col(200), tl.srt=45)
return(plot)
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
s5 <- readRDS("Output/solutions/s5-EM-Percentile-velocity-585.rds")
s29 <- readRDS("Output/solutions/s29-MM-CanESM5-Percentile-velocity-585.rds")
s30 <- readRDS("Output/solutions/s30-MM-CMCC_ESM2-Percentile-velocity-585.rds")
s31 <- readRDS("Output/solutions/s31-MM-GFDL_ESM4-Percentile-velocity-585.rds")
s32 <- readRDS("Output/solutions/s32-MM-IPSL_CM6A_LR-Percentile-velocity-585.rds")
s33 <- readRDS("Output/solutions/s33-MM-NorESM2_MM-Percentile-velocity-585.rds")
# Kappa
list <- c("EnsembleMean", "CanESM5", "CMCC-ESM2", "GFDL-ESM4", "IPSL-CM6A-LR", "NorESM2-MM")
object_list <- list() # empty list
solution_list <- list(s5, s29, s30, s31, s32, s33)
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], list[i])
object_list[[i]] <- obj
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
#### Comparing across approaches #####
# Load Low-regret areas
LRFeature <- readRDS("Output/lowregret/s3-EM-LowRegret-Feature-585.rds")
LRPercentile <- readRDS("Output/lowregret/s2-EM-LowRegret-Percentile-585.rds")
LRPenalty <- readRDS("Output/lowregret/s4-EM-LowRegret-Penalty-585.rds")
LRClimatePriorityArea <- readRDS("Output/lowregret/s5-EM-LowRegret-ClimatePriorityArea-585.rds")
# Kappa
solution_list <- list(LRFeature, LRPercentile, LRPenalty, LRClimatePriorityArea)
names <- c("Feature", "Percentile", "Penalty", "ClimatePriorityArea")
object_list <- list() # empty list
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], list[i])
object_list[[i]] <- obj
}
names
object_list <- list() # empty list
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], names[i])
object_list[[i]] <- obj
}
for (i in 1:length(names)) {
obj <- select_solution(solution_list[[i]], names[i])
object_list[[i]] <- obj
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
# Check the Climate Metrics of the Low-Regret Areas
run_list <- c("LRFeature", "LRPercentile", "LRPenalty", "LRClimatePriorityArea")
climateLayer_list <- list(roc_tos_SSP585, roc_phos_SSP585, roc_o2os_SSP585, velocity_SSP585)
metric_list <- c("tos", "phos", "o2os", "velocity")
climate <- lowRegret_ClimateSummary(solution = solution_list,
run = run_list, metric = metric_list,
climate = climateLayer_list, scenario = "585",
approach = names)
write_csv(climate, paste0(output_summary, "ApproachTheme_Approaches_LowRegretClimateSummary.csv"))
#### Approach: Percentile ####
# Plots for the workflow
sp1 <- aqua_sf %>% dplyr::select(colnames(aqua_sf)[4289]) %>%
dplyr::mutate(Katsuwonus_pelamis = as.logical(Katsuwonus_pelamis))
sp1_plot <- plot_AQMFeatures(aqm_subset1, PUs, land, column = "Katsuwonus_pelamis") + ggtitle("Species Distribution #1", subtitle = "Katsuwonus pelamis") + theme(axis.text = element_text(size = 25))
sp1_plot <- plot_AQMFeatures(sp1, PUs, land, column = "Katsuwonus_pelamis") + ggtitle("Species Distribution #1", subtitle = "Katsuwonus pelamis") + theme(axis.text = element_text(size = 25))
ggsave(filename = "Workflow-Percentile-sp1.png",
plot = sp1_plot, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
sp1_percentile <- create_PercentileLayer(aqua_sf = sp1, metric_name = "tos", colname = "slpTrends", metric_df = roc_tos_SSP585, PUs = PUs) %>%
dplyr::mutate(Katsuwonus_pelamis = as.logical(Katsuwonus_pelamis))
sp1_PercentilePlot <- plot_AQMFeatures(aqm1_percentile, PUs, land, column = "Katsuwonus_pelamis") + ggtitle("Species Distribution #1", subtitle = "Katsuwonus pelamis") + theme(axis.text = element_text(size = 25))
sp1_PercentilePlot <- plot_AQMFeatures(sp1_percentile, PUs, land, column = "Katsuwonus_pelamis") + ggtitle("Species Distribution #1", subtitle = "Katsuwonus pelamis") + theme(axis.text = element_text(size = 25))
ggsave(filename = "Workflow-Percentile-sp1Filtered.png",
plot = sp1_PercentilePlot, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
sp2 <- aqua_sf %>% dplyr::select(colnames(aqua_sf)[8199]) %>%
dplyr::mutate(Thunnus_orientalis = as.logical(Thunnus_orientalis))
sp2_plot <- plot_AQMFeatures(sp2, PUs, land, column = "Thunnus_orientalis") + ggtitle("Species Distribution #1", subtitle = "Thunnus orientalis") + theme(axis.text = element_text(size = 25))
ggsave(filename = "Workflow-Percentile-sp2.png",
plot = sp2_plot, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
sp2_percentile <- create_PercentileLayer(aqua_sf = sp2, metric_name = "tos", colname = "slpTrends", metric_df = roc_tos_SSP585, PUs = PUs) %>%
dplyr::mutate(Thunnus_orientalis = as.logical(Thunnus_orientalis))
sp2_PercentilePlot <- plot_AQMFeatures(aqm2_percentile, PUs, land, column = "Thunnus_orientalis") + ggtitle("Species Distribution #1", subtitle = "Thunnus_orientalis") + theme(axis.text = element_text(size = 25))
sp2_PercentilePlot <- plot_AQMFeatures(sp2_percentile, PUs, land, column = "Thunnus_orientalis") + ggtitle("Species Distribution #1", subtitle = "Thunnus_orientalis") + theme(axis.text = element_text(size = 25))
ggsave(filename = "Workflow-Percentile-sp2Filtered.png",
plot = sp2_PercentilePlot, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
#### Approach: Feature ####
# Plots for the workflow
climateLayer <- create_FeatureLayer(aqua_sf, metric_name = "tos", colname = "slpTrends", metric_df = roc_tos_SSP585) %>%
dplyr::select(climate_layer, geometry) %>%
dplyr::mutate(climate_layer = as.logical(climate_layer))
feature <- plot_AQMFeatures(climateLayer, PUs, land, column = "climate_layer") + ggtitle("Low Exposure Areas") + theme(axis.text = element_text(size = 25))
feature
ggsave(filename = "Workflow-Feature-climateFiltered.png",
plot = feature, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
#### Approach: Climate Priority Area ####
# Plots for the workflow
sp1_ImportantFeature <- create_ImportantFeatureLayer(sp1, metric_name = "tos", colname = "slpTrends", metric_df = roc_tos_SSP585) %>%
dplyr::mutate(Katsuwonus_pelamis = as.logical(Katsuwonus_pelamis))
sp1_ImportantFeaturePlot <- plot_AQMFeatures(ImptFeat, PUs, land, column = "Katsuwonus_pelamis") + ggtitle("Species Distribution #1", subtitle = "Katsuwonus pelamis") + theme(axis.text = element_text(size = 25))
sp1_ImportantFeaturePlot <- plot_AQMFeatures(sp1_ImportantFeature, PUs, land, column = "Katsuwonus_pelamis") + ggtitle("Species Distribution #1", subtitle = "Katsuwonus pelamis") + theme(axis.text = element_text(size = 25))
ggsave(filename = "Workflow-ClimatePriorityArea-sp1ImptFeat.png",
plot = sp1_ImportantFeaturePlot, width = 21, height= 29.7, dpi = 300,
path = "Figures/") # save plot
sp1_RepresentationFeature <- create_RepresentationFeature(sp1_ImportantFeature, sp1) %>%
dplyr::mutate(Katsuwonus_pelamis = as.logical(Katsuwonus_pelamis))
sp1_RepresentationFeaturePlot <- plot_AQMFeatures(sp1_RepresentationFeature, PUs, land, column = "Katsuwonus_pelamis") + ggtitle("Species Distribution #1", subtitle = "Katsuwonus pelamis") + theme(axis.text = element_text(size = 25))
ggsave(filename = "Workflow-ClimatePriorityArea-sp1RepFeat.png",
plot = sp2_RepresentationFeaturePlot, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
ggsave(filename = "Workflow-ClimatePriorityArea-sp1RepFeat.png",
plot = sp1_RepresentationFeaturePlot, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
sp2_ImportantFeature <- create_ImportantFeatureLayer(sp2, metric_name = "tos", colname = "slpTrends", metric_df = roc_tos_SSP585) %>%
dplyr::mutate(Thunnus_orientalis = as.logical(Thunnus_orientalis))
sp2_ImportantFeaturePlot <- plot_AQMFeatures(sp2_ImportantFeature, PUs, land, column = "Thunnus_orientalis") + ggtitle("Species Distribution #2", subtitle = "Thunnus orientalis") + theme(axis.text = element_text(size = 25))
ggsave(filename = "Workflow-ClimatePriorityArea-sp2ImptFeat.png",
plot = sp2_ImportantFeaturePlot, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
sp2_RepresentationFeature <- create_RepresentationFeature(sp2_ImportantFeature, sp2) %>%
dplyr::mutate(Thunnus_orientalis = as.logical(Thunnus_orientalis))
sp2_RepresentationFeaturePlot <- plot_AQMFeatures(sp2_RepresentationFeature, PUs, land, column = "Thunnus_orientalis") + ggtitle("Species Distribution #2", subtitle = "Thunnus orientalis") + theme(axis.text = element_text(size = 25))
ggsave(filename = "Workflow-CLimatePriorityArea-sp2RepFeat.png",
plot = sp2_RepresentationFeaturePlot, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
source("HelperFunctions/SpatPlan_Extras.R") # Load the extras, including functions and libraries
source("HelperFunctions/SpatPlan_HelperFxns_WestPac.R") # Load helper functions written specifically for this spatial planning project
output_solutions <- "Output/solutions/"
output_summary <- "Output/summary/"
output_lowregret <- "Output/lowregret/"
# Load files
source("SpatPlan_Master_Preliminaries.R")
total_area = nrow(PUs) * PU_size
#### Main Text: Percentile ####
#### Climate warming ####
# Parameters:
# Ensemble: Ensemble mean
# Climate metric: Rate of Climate Warming (SSP 5-8.5)
# Approach: "Percentile"
# 1. Prepare climate layer
# Retain only planning units of each of the biodiversity features that in intersect with areas of low exposure (<= 35th percentile)
aqua_percentile <- create_PercentileLayer(aqua_sf = aqua_sf, metric_name = "tos", colname = "transformed", metric_df = roc_tos_SSP585, PUs = PUs)
# 2. Get list of features
features <- aqua_percentile %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
names()
# 3. Set up the spatial planning problem
out_sf <- cbind(aqua_percentile, roc_tos_SSP585, UniformCost)
p2 <- prioritizr::problem(out_sf, features, "cost") %>%
add_min_set_objective() %>%
add_relative_targets(30/35) %>% # using Effective 30% Protection. Since we only retained planning units that intersect with both biodiversity features and areas <= 35th percentile (0.35), by multiplying this by ~0.875 target, we effectively protect only 30%.
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE)
#### Ocean acidification ####
# Parameters:
# Ensemble: Ensemble mean
# Climate metric: Rate of Ocean Acidification (SSP 5-8.5)
# Approach: "Percentile"
# 1. Prepare climate layer
aqua_percentile <- create_PercentileLayer(aqua_sf = aqua_sf, metric_name = "phos", colname = "transformed", metric_df = roc_phos_SSP585, PUs = PUs)
# 2. Get list of features
features <- aqua_percentile %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
names()
# 3. Set up the spatial planning problem
out_sf <- cbind(aqua_percentile, roc_phos_SSP585, UniformCost)
p3 <- prioritizr::problem(out_sf, features, "cost") %>%
add_min_set_objective() %>%
add_relative_targets(30/35) %>%
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE)
#### Declining oxygen concentration ####
# Parameters:
# Ensemble: Ensemble mean
# Climate metrics: Rate of Declining oxygen concentration (SSP 5-8.5)
# Approach: "Percentile"
# 1. Prepare climate layer
aqua_percentile <- create_PercentileLayer(aqua_sf = aqua_sf, metric_name = "o2os", colname = "transformed", metric_df = roc_o2os_SSP585, PUs = PUs)
# 2. Get list of features
features <- aqua_percentile %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
names()
# 3. Set up the spatial planning problem
out_sf <- cbind(aqua_percentile, roc_o2os_SSP585, UniformCost)
p4 <- prioritizr::problem(out_sf, features, "cost") %>%
add_min_set_objective() %>%
add_relative_targets(30/35) %>%
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE)
#### Climate velocity ####
# Parameters:
# Ensemble: Ensemble mean
# Climate metrics: Climate velocity (SSP 5-8.5)
# Approach: "Percentile"
# 1. Prepare climate layer
aqua_percentile <- create_PercentileLayer(aqua_sf = aqua_sf, metric_name = "velocity", colname = "transformed", metric_df = velocity_SSP585, PUs = PUs)
# 2. Get list of features
features <- aqua_percentile %>%
as_tibble() %>%
dplyr::select(-geometry) %>%
names()
# 3. Set up the spatial planning problem
out_sf <- cbind(aqua_percentile, velocity_SSP585, UniformCost)
p5 <- prioritizr::problem(out_sf, features, "cost") %>%
add_min_set_objective() %>%
add_relative_targets(30/35) %>%
add_binary_decisions() %>%
add_gurobi_solver(gap = 0, verbose = FALSE)
s2 <- readRDS("Output/solutions/s2-EM-Percentile-tos-585.rds")
s3 <- readRDS("Output/solutions/s3-EM-Percentile-phos-585.rds")
s4 <- readRDS("Output/solutions/s4-EM-Percentile-o2os-585.rds")
s5 <- readRDS("Output/solutions/s5-EM-Percentile-velocity-585.rds")
#### Summary ####
# Feature representation
problem_list <- list(p2, p3, p4, p5)
solution_list <- list(s2, s3, s4, s5)
names <- c("EM_Percentile_tos_585", "EM_Percentile_phos_585", "EM_Percentile_o2os_585", "EM_Percentile_velocity_585")
feat_rep <- tibble(feature = character()) # empty tibble
for(i in 1:length(names)) {
df <- represent_feature(problem_list[[i]], solution_list[[i]], names[i])
feat_rep <- left_join(df, feat_rep, by = "feature")
}
write.csv(feat_rep, paste0(output_summary, "MetricTheme_Percentile_FeatureRepresentation.csv")) # save
# Summary
climateLayer_list <- list(roc_tos_SSP585, roc_phos_SSP585, roc_o2os_SSP585, velocity_SSP585)
metric_list <- c("tos", "phos", "o2os", "velocity")
df <- tibble(run = character()) # empty tibble
for(i in 1:length(names)) {
statistics <- compute_summary(solution_list[[i]], total_area, PU_size, names[i], Cost = "cost")
df <- rbind(statistics, df)
}
climate <- list() # empty list
for (i in 1:length(names)) {
climate[[i]] <- get_ClimateSummary(solution_list, climateLayer_list[[i]], metric_list[i], col_scenario = "585", col_approach = "percentile", col_run = names, climateLayer = "single")
}
climate <- plyr::join_all(climate, by=c("run", "scenario", "approach"), type='left')
summary <- left_join(climate, df, by = "run")
summary
write.csv(summary, paste0(output_summary, "MetricTheme_Percentile_Summary.csv")) # save
ggArea <- plot_statistics(summary, col_name = "percent_area", y_axis = "% area", theme = "metric") + theme(axis.text = element_text(size = 25))
ggArea
ggsave(filename = "Area-MetricTheme-Percentile-585.png",
plot = ggArea, width = 7, height = 5, dpi = 300,
path = "Figures/") # save plot
# Get Kappa Correlation Matrix
list <- c("tos", "phos", "o2os", "velocity")
object_list <- list() # empty list
solution_list <- list(s2, s3, s4, s5)
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], list[i])
object_list[[i]] <- obj
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
# This plots the Correlation Matrix.
plot_corrplot <- function(matrix, num) {
pacman::p_load(corrplot)
# creating corrplot
rownames(matrix) <- matrix[,1]
n <- num + 1 # num represents the number of inputted spatial plans
matrix_f <- matrix[,2:n]
class(matrix_f) <- "numeric"
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
plot <- corrplot(matrix_f, method = "shade", cl.lim = c(-0.2,1), tl.col = "black", addCoef.col = "black",
col=col(200), tl.srt=45)
return(plot)
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
#### Low-regret areas ####
s2_LRplot <- create_LowRegretSf(solution_list, names, PUs)
saveRDS(s2_LRplot, paste0(output_lowregret, "s2-EM-LowRegret-Percentile-585.rds")) # save low-regret solution
ggLowRegret2 <- plot_lowregret(s2_LRplot, land) + theme(axis.text = element_text(size = 25))
ggLowRegret2
feat_rep
ggsave(filename = "LR-Metric-Percentile.png",
plot = ggLowRegret2, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
# Summary of low-regret
summary <- compute_summary(s2_LRplot, total_area, PU_size, "LR-Percentile-585", Cost = "cost")
write.csv(summary, paste0(output_summary, "MetricTheme_Percentile_LowRegretSummary.csv")) # save
