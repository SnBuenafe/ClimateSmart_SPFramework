ggRidge
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = ensemble, group = ensemble, fill = ensemble),
scale = 2) +
scale_fill_manual(values = c(`EM_Percentile_o2os_585` = "#FAF7B7",
`MM-CanESM5_Percentile_o2os_585` = "#E6C173",
`MM-CMCC-ESM2_Percentile_o2os_585` = "#855600",
`MM-GFDL-ESM4_Percentile_o2os_585` = "#5075BA",
`MM-IPSL-CM6A-LR_Percentile_o2os_585` = "#81B0CC",
`MM-NorESM2-MM_Percentile_o2os_585` = "#5A9E67")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
xlim(c(min(x$percent),)) +
theme_classic()
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = ensemble, group = ensemble, fill = ensemble),
scale = 2) +
scale_fill_manual(values = c(`EM_Percentile_o2os_585` = "#FAF7B7",
`MM-CanESM5_Percentile_o2os_585` = "#E6C173",
`MM-CMCC-ESM2_Percentile_o2os_585` = "#855600",
`MM-GFDL-ESM4_Percentile_o2os_585` = "#5075BA",
`MM-IPSL-CM6A-LR_Percentile_o2os_585` = "#81B0CC",
`MM-NorESM2-MM_Percentile_o2os_585` = "#5A9E67")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
xlim(c(min(x$percent))) +
theme_classic()
?xlim
solution_list <- list(s4, s24, s25, s26, s27, s28)
names <- c("EM_Percentile_o2os_585", "MM-CanESM5_Percentile_o2os_585", "MM-CMCC-ESM2_Percentile_o2os_585", "MM-GFDL-ESM4_Percentile_o2os_585", "MM-IPSL-CM6A-LR_Percentile_o2os_585", "MM-NorESM2-MM_Percentile_o2os_585")
feat_rep <- tibble(feature = character()) # empty tibble
for(i in 1:length(names)) {
df <- represent_feature(problem_list[[i]], solution_list[[i]], names[i])
feat_rep <- left_join(df, feat_rep, by = "feature")
}
feat_rep
write.csv(feat_rep, paste0(output_summary, "EnsembleTheme_o2os_FeatureRepresentation.csv")) # save
# Kernel distribution plots of targets
x <- feat_rep %>%
pivot_longer(!feature, names_to = "ensemble", values_to = "percent") %>%
dplyr::mutate(row_number = row_number(feature))
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = ensemble, group = ensemble, fill = ensemble),
scale = 2) +
scale_fill_manual(values = c(`EM_Percentile_o2os_585` = "#FAF7B7",
`MM-CanESM5_Percentile_o2os_585` = "#E6C173",
`MM-CMCC-ESM2_Percentile_o2os_585` = "#855600",
`MM-GFDL-ESM4_Percentile_o2os_585` = "#5075BA",
`MM-IPSL-CM6A-LR_Percentile_o2os_585` = "#81B0CC",
`MM-NorESM2-MM_Percentile_o2os_585` = "#5A9E67")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
xlim(c(min(x$percent), )) +
theme_classic()
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = ensemble, group = ensemble, fill = ensemble),
scale = 2) +
scale_fill_manual(values = c(`EM_Percentile_o2os_585` = "#FAF7B7",
`MM-CanESM5_Percentile_o2os_585` = "#E6C173",
`MM-CMCC-ESM2_Percentile_o2os_585` = "#855600",
`MM-GFDL-ESM4_Percentile_o2os_585` = "#5075BA",
`MM-IPSL-CM6A-LR_Percentile_o2os_585` = "#81B0CC",
`MM-NorESM2-MM_Percentile_o2os_585` = "#5A9E67")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
xlim(c(min(x$percent), NA)) +
theme_classic()
ggRidge
ggsave(filename = "TargetDist-EnsembleTheme-o2os.png",
plot = ggRidge, width = 15, height = 10, dpi = 300,
path = "Figures/") # save plot
summary <- read_csv(paste0(output_summary, "MetricTheme_ClimatePriorityArea_Summary.csv")) %>% dplyr::select(-1)
summary
ggArea <- plot_statistics(summary, col_name = "percent_area", y_axis = "% area", theme = "metric") + theme(axis.text = element_text(size = 25))
ggArea
ggsave(filename = "Area-MetricTheme-ClimatePriorityArea-585.png",
plot = ggArea, width = 7, height = 5, dpi = 300,
path = "Figures/") # save plot
s34 <- readRDS("Output/solutions/s34-EM-ClimatePriorityArea-tos-585.rds")
s35 <- readRDS("Output/solutions/s35-EM-ClimatePriorityArea-phos-585.rds")
s36 <- readRDS("Output/solutions/s36-EM-ClimatePriorityArea-o2os-585.rds")
s37 <- readRDS("Output/solutions/s37-EM-ClimatePriorityArea-velocity-585.rds")
# Get Kappa Correlation Matrix
list <- c("tos", "phos", "o2os", "velocity")
object_list <- list() # empty list
solution_list <- list(s34, s35, s36, s37)
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], list[i])
object_list[[i]] <- obj
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
feat_rep <- read_csv(paste0(output_summary, "MetricTheme_Percentile_FeatureRepresentation.csv")) %>% dplyr::select(-1)
feat_rep
# Kernel distribution plots of targets
x <- feat_rep %>%
pivot_longer(!feature, names_to = "metric", values_to = "percent") %>%
dplyr::mutate(row_number = row_number(feature))
x
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c(`EM_Percentile_tos_585` = "#289E3D",
`EM_Percentile_phos_585` = "#E6C173",
`EM_Percentile_o2os_585` = "#81B0CC",
`EM_Percentile_velocity_585` = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
xlim(c(min(x$percent), NA))
ggRidge
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c(`EM_Percentile_tos_585` = "#289E3D",
`EM_Percentile_phos_585` = "#E6C173",
`EM_Percentile_o2os_585` = "#81B0CC",
`EM_Percentile_velocity_585` = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
xlim(c(min(x$percent), NA)) +
theme_classic()
ggRidge
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c(`EM_Percentile_tos_585` = "#289E3D",
`EM_Percentile_phos_585` = "#E6C173",
`EM_Percentile_o2os_585` = "#81B0CC",
`EM_Percentile_velocity_585` = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
xlim(c(30, NA)) +
theme_classic()
ggRidge
ggsave(filename = "TargetDist-MetricTheme-percentile.png",
plot = ggRidge, width = 15, height = 10, dpi = 300,
path = "Figures/") # save plot
feat_rep <- read_csv(paste0(output_summary, "MetricTheme_Feature_FeatureRepresentation.csv")) %>% dplyr::select(-1)
# Kernel distribution plots of targets
x <- feat_rep %>%
pivot_longer(!feature, names_to = "metric", values_to = "percent") %>%
dplyr::mutate(row_number = row_number(feature))
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c(`EM_Feature_tos_585` = "#289E3D",
`EM_Feature_phos_585` = "#E6C173",
`EM_Feature_o2os_585` = "#81B0CC",
`EM_Feature_velocity_585` = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
xlim(min(x$percent), 100) +
theme_classic()
ggRidge
ggsave(filename = "TargetDist-MetricTheme-feature.png",
plot = ggRidge, width = 15, height = 10, dpi = 300,
path = "Figures/") # save plot
feat_rep <- read_csv(paste0(output_summary, "MetricTheme_Penalty_FeatureRepresentation.csv")) %>% dplyr::select(-1)
# Kernel distribution plots of targets
x <- feat_rep %>%
pivot_longer(!feature, names_to = "metric", values_to = "percent") %>%
dplyr::mutate(row_number = row_number(feature)) %>%
dplyr::filter(!is.na(percent))
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c(`EM_Penalty_tos_585` = "#289E3D",
`EM_Penalty_phos_585` = "#E6C173",
`EM_Penalty_o2os_585` = "#81B0CC",
`EM_Penalty_velocity_585` = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
xlim(min(x$percent), 100) +
theme_classic()
ggRidge
ggsave(filename = "TargetDist-MetricTheme-penalty.png",
plot = ggRidge, width = 15, height = 10, dpi = 300,
path = "Figures/") # save plot
feat_rep <- read_csv(paste0(output_summary, "MetricTheme_ClimatePriorityArea_FeatureRepresentation.csv")) %>% dplyr::select(-1)
# Kernel distribution plots of targets
x <- feat_rep %>%
pivot_longer(!feature, names_to = "metric", values_to = "percent") %>%
dplyr::mutate(row_number = row_number(feature))
ggRidge <- ggplot(data = x) +
geom_density_ridges(aes(x = percent, y = metric, group = metric, fill = metric),
scale = 2) +
scale_fill_manual(values = c(`EM_ClimatePriorityArea_tos_585` = "#289E3D",
`EM_ClimatePriorityArea_phos_585` = "#E6C173",
`EM_ClimatePriorityArea_o2os_585` = "#81B0CC",
`EM_ClimatePriorityArea_velocity_585` = "#855600")) +
geom_vline(xintercept=c(30), linetype="dashed", color = "red", size = 1) +
xlim(min(x$percent), 100) +
theme_classic()
ggRidge
ggsave(filename = "TargetDist-MetricTheme-ClimatePriorityArea.png",
plot = ggRidge, width = 15, height = 10, dpi = 300,
path = "Figures/") # save plot
#### Compare across metrics ####
#### Climate warming ####
# Create low-regret areas per metrics
# Load solutions
s2 <- readRDS("Output/solutions/s2-EM-Percentile-tos-585.rds") # Percentile
s6 <- readRDS("Output/solutions/s6-EM-Feature-tos-585.rds") # Feature
s10 <- readRDS("Output/solutions/s10-EM-Penalty-tos-585.rds") # Penalty
s34 <- readRDS("Output/solutions/s34-EM-ClimatePriorityArea-tos-585.rds") # Climate priority area
solution_list <- list(s2, s6, s10, s34)
names <- c("EM_Percentile_tos_585", "EM_Feature_tos_585", "EM_Penalty_tos_585", "EM_ClimatePriorityArea_tos_585")
s6_LRplot <- create_LowRegretSf(solution_list, names, PUs)
s6_LRplot
(ggLowRegret6 <- plot_lowregret(s6_LRplot, land) + theme(axis.text = element_text(size = 25)))
ggLowRegret6
s6_LRplot
saveRDS(s6_LRplot, paste0(output_lowregret, "s6-EM-LowRegret-tos-585.rds")) # save low-regret solution
ggsave(filename = "LR-Approach-tos.png",
plot = ggLowRegret6, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
# Summary of low-regret
df <- tibble(run = character()) # empty tibble
for(i in 1:length(names)) {
statistics <- compute_summary(solution_list[[i]], total_area, PU_size, names[i], Cost = "cost")
df <- rbind(statistics, df)
}
df
approach_list <- c("percentile", "feature", "penalty", "climate priority area")
climate <- list() # empty list
for (i in 1:length(names)) {
climate[[i]] <- get_ClimateSummary(solution_list, climate_layer = roc_tos_SSP585, metric = "tos", col_scenario = "585", col_approach = approach_list)
}
rlang::last_error()
approach_list <- c("percentile", "feature", "penalty", "climate priority area")
climate <- list() # empty list
for (i in 1:length(names)) {
climate[[i]] <- get_ClimateSummary(solution_list, climate_layer = roc_tos_SSP585, metric = "tos", col_scenario = "585", col_approach = approach_list, climateLayer = "single")
}
approach_list <- c("percentile", "feature", "penalty", "climate priority area")
climate <- list() # empty list
for (i in 1:length(names)) {
climate[[i]] <- get_ClimateSummary(solution_list, climate_layer = roc_tos_SSP585, metric = "tos", col_scenario = "585", col_approach = approach_list, col_run = names, climateLayer = "single")
}
climate <- plyr::join_all(climate, by = c("run", "scenario", "approach"), type = "left")
climate
summary <- left_join(climate, df, by = "run")
climate
climate
df
summary <- left_join(climate, df, by = "run")
climate <- get_ClimateSummary(solution_list, climate_layer = roc_tos_SSP585, metric = "tos", col_scenario = "585", col_approach = approach_list, col_run = names, climateLayer = "multiple")
climate <- get_ClimateSummary(solution_list, climate_layer = roc_tos_SSP585, metric = "tos", col_scenario = "585", col_approach = approach_list, col_run = names, climateLayer = "single")
climate
climate <- plyr::join_all(climate, by = c("run", "scenario", "approach"), type = "left")
summary <- left_join(climate, df, by = "run")
summary
write.csv(summary, paste0(output_summary, "ApproachTheme_tos_Summary.csv")) # save
summary
ggArea <- plot_statistics(summary, col_name = "percent_area", y_axis = "% area", theme = "LR-approach") +
theme(axis.text = element_text(size = 25))
ggArea
ggsave(filename = "Area-ApproachTheme-tos-585.png",
plot = ggArea, width = 7, height = 5, dpi = 300,
path = "Figures/") # save plot
# Get Kappa Correlation Matrix
object_list <- list() # empty list
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], approach_list[i])
object_list[[i]] <- obj
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
ggArea
#### Ocean acidification ####
# Create low-regret areas per metrics
# Load solutions
s3 <- readRDS("Output/solutions/s3-EM-Percentile-phos-585.rds") # Percentile
s7 <- readRDS("Output/solutions/s7-EM-Feature-phos-585.rds") # Feature
s11 <- readRDS("Output/solutions/s11-EM-Penalty-phos-585.rds") # Penalty
s35 <- readRDS("Output/solutions/s35-EM-ClimatePriorityArea-phos-585.rds") # Climate priority area
solution_list <- list(s3, s7, s11, s35)
names <- c("EM_Percentile_phos_585", "EM_Feature_phos_585", "EM_Penalty_phos_585", "EM_ClimatePriorityArea_phos_585")
s7_LRplot <- create_LowRegretSf(solution_list, names, PUs)
s7_LRplot
saveRDS(s7_LRplot, paste0(output_lowregret, "s7-EM-LowRegret-phos-585.rds")) # save low-regret solution
ggLowRegret7 <- plot_lowregret(s7_LRplot, land) + theme(axis.text = element_text(size = 25))
ggLowRegret7
ggsave(filename = "LR-Approach-phos.png",
plot = ggLowRegret7, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
# Summary of low-regret
df <- tibble(run = character()) # empty tibble
for(i in 1:length(names)) {
statistics <- compute_summary(solution_list[[i]], total_area, PU_size, names[i], Cost = "cost")
df <- rbind(statistics, df)
}
approach_list <- c("percentile", "feature", "penalty", "climate priority area")
climate <- get_ClimateSummary(solution_list, climate_layer = roc_phos_SSP585, metric = "phos", col_scenario = "585", col_approach = approach_list, col_run = names, climateLayer = "single")
climate
summary <- left_join(climate, df, by = "run")
write.csv(summary, paste0(output_summary, "ApproachTheme_tos_Summary.csv")) # save
write.csv(summary, paste0(output_summary, "ApproachTheme_phos_Summary.csv")) # save
solution_list <- list(s2, s6, s10, s34)
names <- c("EM_Percentile_tos_585", "EM_Feature_tos_585", "EM_Penalty_tos_585", "EM_ClimatePriorityArea_tos_585")
# Summary of low-regret
df <- tibble(run = character()) # empty tibble
for(i in 1:length(names)) {
statistics <- compute_summary(solution_list[[i]], total_area, PU_size, names[i], Cost = "cost")
df <- rbind(statistics, df)
}
approach_list <- c("percentile", "feature", "penalty", "climate priority area")
climate <- get_ClimateSummary(solution_list, climate_layer = roc_tos_SSP585, metric = "tos", col_scenario = "585", col_approach = approach_list, col_run = names, climateLayer = "single")
summary <- left_join(climate, df, by = "run")
write.csv(summary, paste0(output_summary, "ApproachTheme_tos_Summary.csv")) # save
solution_list <- list(s3, s7, s11, s35)
summary
summary$run
names <- c("EM_Percentile_phos_585", "EM_Feature_phos_585", "EM_Penalty_phos_585", "EM_ClimatePriorityArea_phos_585")
# Summary of low-regret
df <- tibble(run = character()) # empty tibble
for(i in 1:length(names)) {
statistics <- compute_summary(solution_list[[i]], total_area, PU_size, names[i], Cost = "cost")
df <- rbind(statistics, df)
}
approach_list <- c("percentile", "feature", "penalty", "climate priority area")
climate <- get_ClimateSummary(solution_list, climate_layer = roc_phos_SSP585, metric = "phos", col_scenario = "585", col_approach = approach_list, col_run = names, climateLayer = "single")
summary <- left_join(climate, df, by = "run")
summary
write.csv(summary, paste0(output_summary, "ApproachTheme_phos_Summary.csv")) # save
ggArea <- plot_statistics(summary, col_name = "percent_area", y_axis = "% area", theme = "LR-approach") +
theme(axis.text = element_text(size = 25))
ggsave(filename = "Area-ApproachTheme-phos-585.png",
plot = ggArea, width = 7, height = 5, dpi = 300,
path = "Figures/") # save plot
ggArea
# Get Kappa Correlation Matrix
object_list <- list() # empty list
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], approach_list[i])
object_list[[i]] <- obj
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
#### Declining oxygen concentration ####
# Create low-regret areas per metrics
# Load solutions
s4 <- readRDS("Output/solutions/s4-EM-Percentile-o2os-585.rds") # Percentile
s8 <- readRDS("Output/solutions/s8-EM_Feature-o2os-585.rds") # Feature
s12 <- readRDS("Output/solutions/s12-EM-Penalty-o2os-585.rds") # Penalty
s36 <- readRDS("Output/solutions/s36-EM-ClimatePriorityArea-o2os-585.rds") # Climate priority area
solution_list <- list(s4, s8, s12, s36)
names <- c("EM_Percentile_o2os_585", "EM_Feature_o2os_585", "EM_Penalty_o2os_585", "EM_ClimatePriorityArea_o2os_585")
s8_LRplot <- create_LowRegretSf(solution_list, names, PUs)
saveRDS(s8_LRplot, paste0(output_lowregret, "s8-EM-LowRegret-o2os-585.rds")) # save low-regret solution
s8_LRplot
ggLowRegret8 <- plot_lowregret(s8_LRplot, land) + theme(axis.text = element_text(size = 25))
ggLowRegret8
ggsave(filename = "LR-Approach-o2os.png",
plot = ggLowRegret8, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
# Summary of low-regret
df <- tibble(run = character()) # empty tibble
for(i in 1:length(names)) {
statistics <- compute_summary(solution_list[[i]], total_area, PU_size, names[i], Cost = "cost")
df <- rbind(statistics, df)
}
approach_list <- c("percentile", "feature", "penalty", "climate priority area")
climate <- get_ClimateSummary(solution_list, climate_layer = roc_o2os_SSP585, metric = "o2os", col_scenario = "585", col_approach = approach_list, col_run = names, climateLayer = "single")
summary <- left_join(climate, df, by = "run")
summary
write.csv(summary, paste0(output_summary, "ApproachTheme_o2os_Summary.csv")) # save
ggArea <- plot_statistics(summary, col_name = "percent_area", y_axis = "% area", theme = "LR-approach") +
theme(axis.text = element_text(size = 25))
ggArea
ggsave(filename = "Area-ApproachTheme-o2os-585.png",
plot = ggArea, width = 7, height = 5, dpi = 300,
path = "Figures/") # save plot
# Get Kappa Correlation Matrix
object_list <- list() # empty list
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], approach_list[i])
object_list[[i]] <- obj
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
#### Climate velocity ####
# Create low-regret areas per metrics
# Load solutions
s5 <- readRDS("Output/solutions/s5-EM-Percentile-velocity-585.rds") # Percentile
s9 <- readRDS("Output/solutions/s9-EM-Feature-velocity-585.rds") # Feature
s13 <- readRDS("Output/solutions/s13-EM-Penalty-velocity-585.rds") # Penalty
s37 <- readRDS("Output/solutions/s37-EM-ClimatePriorityArea-velocity-585.rds") # Climate priority area
solution_list <- list(s5, s9, s13, s37)
names <- c("EM_Percentile_velocity_585", "EM_Feature_velocity_585", "EM_Penalty_velocity_585", "EM_ClimatePriorityArea_velocity_585")
s9_LRplot <- create_LowRegretSf(solution_list, names, PUs)
saveRDS(s9_LRplot, paste0(output_lowregret, "s9-EM-LowRegret-velocity-585.rds")) # save low-regret solution
ggLowRegret9 <- plot_lowregret(s9_LRplot, land) + theme(axis.text = element_text(size = 25))
ggLowRegret9
ggsave(filename = "LR-Approach-velocity.png",
plot = ggLowRegret9, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
# Summary of low-regret
df <- tibble(run = character()) # empty tibble
for(i in 1:length(names)) {
statistics <- compute_summary(solution_list[[i]], total_area, PU_size, names[i], Cost = "cost")
df <- rbind(statistics, df)
}
approach_list <- c("percentile", "feature", "penalty", "climate priority area")
climate <- get_ClimateSummary(solution_list, climate_layer = velocity_SSP585, metric = "velocity", col_scenario = "585", col_approach = approach_list, col_run = names, climateLayer = "single")
climate
summary <- left_join(climate, df, by = "run")
write.csv(summary, paste0(output_summary, "ApproachTheme_velocity_Summary.csv")) # save
ggArea <- plot_statistics(summary, col_name = "percent_area", y_axis = "% area", theme = "LR-approach") +
theme(axis.text = element_text(size = 25))
ggArea
ggsave(filename = "Area-ApproachTheme-velocity-585.png",
plot = ggArea, width = 7, height = 5, dpi = 300,
path = "Figures/") # save plot
# Get Kappa Correlation Matrix
object_list <- list() # empty list
for (i in 1:length(list)) {
obj <- select_solution(solution_list[[i]], approach_list[i])
object_list[[i]] <- obj
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
#### Create low-regret summaries ####
# Load Low-regret areas
LR_tos <- readRDS("Output/lowregret/s6-EM-LowRegret-tos-585.rds")
LR_phos <- readRDS("Output/lowregret/s7-EM-LowRegret-phos-585.rds")
LR_o2os <- readRDS("Output/lowregret/s8-EM-LowRegret-o2os-585.rds")
LR_velocity <- readRDS("Output/lowregret/s9-EM-LowRegret-velocity-585.rds")
# Create summaries
solution_list <- list(LR_tos, LR_phos, LR_o2os, LR_velocity)
names <- c("tos", "phos", "o2os", "velocity")
cols <- c("LR-tos", "LR-phos", "LR-o2os", "LR-velocity")
compute_summary(solution_list[[1]], total_area, PU_size, cols[1], Cost = "cost")
# Create summaries
solution_list <- list(LR_tos, LR_phos, LR_o2os, LR_velocity)
cols <- c("LR-tos", "LR-phos", "LR-o2os", "LR-velocity")
df <- list() # empty list
for(i in 1:length(names)) {
df[[i]] <- compute_summary(solution_list[[i]], total_area, PU_size, cols[i], Cost = "cost")
}
summary <- do.call(rbind, df)
summary
write.csv(summary, paste0(output_summary, "ApproachTheme_Metric_LowRegretSummary.csv")) # save
ggArea <- plot_statistics(summary, col_name = "percent_area", y_axis = "% area", theme = "LR-approach")  + theme(axis.text = element_text(size = 25))
ggArea
ggsave(filename = "Area-ApproachTheme-Metrics-585.png",
plot = ggArea, width = 7, height = 5, dpi = 300,
path = "Figures/") # save plot
# Kappa
object_list <- list() # empty list
for (i in 1:length(names)) {
obj <- select_solution(solution_list[[i]], cols[i])
object_list[[i]] <- obj
}
# manually save corrplot
(matrix <- create_corrmatrix(object_list) %>%
plot_corrplot(., length(object_list)))
summary <- read_csv(paste0(output_summary, "ApproachTheme_Metric_LowRegretSummary.csv")) %>% dplyr::select(-1)
<
ggArea <- plot_statistics(summary, col_name = "percent_area", y_axis = "% area", theme = "metric")  + theme(axis.text = element_text(size = 25))
ggArea
ggsave(filename = "Area-ApproachTheme-Metrics-585.png",
plot = ggArea, width = 7, height = 5, dpi = 300,
path = "Figures/") # save plot
qnorm(0.85)
(qnorm(0.85) * 0.25) + 35
(qnorm(0.85) * 2.5) + 35
pnorm(1)
pnorm(1)*2500
pnorm(2)-pnorm(-1.2)
pnorm(1, lower.tail = FALSE)
qnorm(0.10)
qnorm(0.90, lower.tail = FALSE)
qnorm(0.90, lower.tail = TRUE)
(qnorm(0.10) * 2) + 14
(qnorm(0.90, lower.tail = TRUE) * 2) + 14
qnorm(0.97)
qnorm(0.97, lower.tail = TRUE)
qnorm(0.97, lower.tail = FALSE)
(480-500)/qnorm(0.97, lower.tail = FALSE)
37.25-35
(37.25-35)/2.5
pnorm(0.9)
pnorm(0.9)*2500
# Third species:
sp3 <- aqua_sf %>% dplyr::select(colnames(aqua_sf)[7752]) %>%
dplyr::mutate(Stenella_coeruleoalba = as.logical(Stenella_coeruleoalba))
sp3
sp3_ImportantFeature <- create_ImportantFeatureLayer(sp3, metric_name = "tos", colname = "transformed", metric_df = roc_tos_SSP585) %>%
dplyr::mutate(Stenella_coeruleoalba = as.logical(Stenella_coeruleoalba))
sp3_ImportantFeaturePlot <- plot_AQMFeatures(sp3_ImportantFeature, PUs, land, column = "Stenella_coeruleoalba") + ggtitle("Species Distribution #3", subtitle = "Stenella_coeruleoalba") + theme(axis.text = element_text(size = 25))
sp3_ImportantFeaturePlot
ggsave(filename = "Workflow-ClimatePriorityArea-sp3ImptFeat.png",
plot = sp3_ImportantFeaturePlot, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
sp3_RepresentationFeature <- create_RepresentationFeature(sp3_ImportantFeature, sp3) %>%
dplyr::mutate(Stenella_coeruleoalba = as.logical(Stenella_coeruleoalba))
sp3_RepresentationFeaturePlot <- plot_AQMFeatures(sp3_RepresentationFeature, PUs, land, column = "Stenella_coeruleoalba") + ggtitle("Species Distribution #3", subtitle = "Stenella_coeruleoalba") + theme(axis.text = element_text(size = 25))
sp3_RepresentationFeaturePlot
ggsave(filename = "Workflow-CLimatePriorityArea-sp3RepFeat.png",
plot = sp3_RepresentationFeaturePlot, width = 21, height = 29.7, dpi = 300,
path = "Figures/") # save plot
reprocess <- FALSE # Do we want to reprocess the PUs/AquaMaps data or use saved versions
#### Setting user parameters ####
# Calling the region
Region <- "WestPacific"
save_name <- "WestPacific"
PU_size = 669.9 # km2 (0.25 deg at equator)
Shape <- "Hexagon" # "Shape of PUs
MinDepth <- 0
MaxDepth <- 200
CO <- 0.5
# Choose CRS for analysis (Robinson: Pacific-centered)
cCRS <- "+proj=robin +lon_0=180 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
land <- ne_countries(scale = 'large', returnclass = 'sf') %>%
fSpatPlan_Convert2PacificRobinson()
