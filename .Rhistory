climateLayer_list
df <- LRFeature %>%
dplyr::select(selection, cellID) %>%
dplyr::rename(solution_1 = selection)
# Check the Climate Metrics of the Low-Regret Areas
climateLayer_list <- list(roc_tos_SSP585, roc_phos_SSP585, roc_o2os_SSP585, velocity_SSP585)
get_ClimateSummary(solution_list = list(df), climate_layer = climateLayer_list, metric = metric_list, col_scenario = "585", col_approach = "feature", col_run = names, climateLayer = "multiple")
names <- c("Feature", "Percentile", "Penalty", "ClimatePriorityArea")
get_ClimateSummary(solution_list = list(df), climate_layer = climateLayer_list, metric = metric_list, col_scenario = "585", col_approach = "feature", col_run = names, climateLayer = "multiple")
# Check the Climate Metrics of the Low-Regret Areas
climateLayer_list <- list(roc_tos_SSP585, roc_phos_SSP585, roc_o2os_SSP585, velocity_SSP585)
metric_list <- c("tos", "phos", "o2os", "velocity")
get_ClimateSummary(solution_list = list(df), climate_layer = climateLayer_list, metric = metric_list, col_scenario = "585", col_approach = "feature", col_run = names, climateLayer = "multiple")
solution_list = list(df)
solution_list
climate_layer = climateLayer_list
metric = metric_list
col_scenario = "585"
col_approach = "feature"
col_run = names
col_run
climateLayer = "multiple"
get_mean <- function(s, metric) {
df <- s %>% as_tibble() %>%
dplyr::select(solution_1, geometry) %>%
left_join(., metric) %>%
filter(solution_1 == 1)
}
df <- list() # create empty list
for(i in 1:length(metric_list)) {
get_ClimateSummary(solution_list = list(df), climate_layer = climateLayer_list[[i]], metric = metric_list[i], col_scenario = "585", col_approach = "feature", col_run = "bla", climateLayer = "single")
}
df <- LRFeature %>%
dplyr::select(selection, cellID) %>%
dplyr::rename(solution_1 = selection)
list(df)
for(i in 1:length(metric_list)) {
get_ClimateSummary(solution_list = list(df), climate_layer = climateLayer_list[[i]], metric = metric_list[i], col_scenario = "585", col_approach = "feature", col_run = "bla", climateLayer = "single")
}
x <- get_ClimateSummary(solution_list = list(df), climate_layer = climateLayer_list[[i]], metric = metric_list[i], col_scenario = "585", col_approach = "feature", col_run = "bla", climateLayer = "single")
x[[i]] <- get_ClimateSummary(solution_list = list(df), climate_layer = climateLayer_list[[i]], metric = metric_list[i], col_scenario = "585", col_approach = "feature", col_run = "bla", climateLayer = "single")
for(i in 1:length(metric_list)) {
x[[i]] <- get_ClimateSummary(solution_list = list(df), climate_layer = climateLayer_list[[i]], metric = metric_list[i], col_scenario = "585", col_approach = "feature", col_run = "bla", climateLayer = "single")
}
x
x <- list()
for(i in 1:length(metric_list)) {
x[[i]] <- get_ClimateSummary(solution_list = list(df), climate_layer = climateLayer_list[[i]], metric = metric_list[i], col_scenario = "585", col_approach = "feature", col_run = "bla", climateLayer = "single")
}
x
x <- list()
for(i in 1:length(metric_list)) {
x[[i]] <- get_ClimateSummary(solution_list = list(df), climate_layer = climateLayer_list[[i]], metric = metric_list[i], col_scenario = "585", col_approach = "feature", col_run = "LRFeature", climateLayer = "single")
}
x <- tibble(run = character()) # empty tibble
x
x <- tibble(run = character()) # empty tibble
for(i in 1:length(metric_list)) {
tmp <- get_ClimateSummary(solution_list = list(df), climate_layer = climateLayer_list[[i]], metric = metric_list[i], col_scenario = "585", col_approach = "feature", col_run = "LRFeature", climateLayer = "single")
x <- left_join(tmp, x, by = "run")
}
x
x <- tibble(run = character()) # empty tibble
for(i in 1:length(metric_list)) {
tmp <- get_ClimateSummary(solution_list = list(df), climate_layer = climateLayer_list[[i]], metric = metric_list[i], col_scenario = "585", col_approach = "feature", col_run = "LRFeature", climateLayer = "single")
x <- left_join(tmp, x)
}
x
?do.call
# Creates the summaries of the climate metrics for low-regret areas
lowRegret_ClimateSummary <- function(solution, run, metric, climate, scenario, approach) {
list <- list() # empty list
for(i in 1:length(run)) {
df <- solution[[i]] %>%
dplyr::select(selection, cellID) %>%
dplyr::rename(solution_1 = selection)
x <- tibble(run = character()) # empty tibble
for(j in 1:length(metric)) {
tmp <- get_ClimateSummary(solution_list = list(df), climate_layer = climate[[j]],
metric = metric[j], col_scenario = scenario,
col_approach = approach[i], col_run = run[i],
climateLayer = "single")
x <- left_join(tmp, x)
}
list[[i]] <- x
}
complete <- do.call(rbind, list)
return(complete)
}
# Kappa
solution_list <- list(LRFeature, LRPercentile, LRPenalty, LRClimatePriorityArea)
# Kappa
solution_list <- list(LRFeature, LRPercentile, LRPenalty, LRClimatePriorityArea)
names <- c("Feature", "Percentile", "Penalty", "ClimatePriorityArea")
# Check the Climate Metrics of the Low-Regret Areas
run_list <- c("LRFeature", "LRPercentile", "LRPenalty", "LRClimatePriorityArea")
climateLayer_list <- list(roc_tos_SSP585, roc_phos_SSP585, roc_o2os_SSP585, velocity_SSP585)
metric_list <- c("tos", "phos", "o2os", "velocity")
lowRegret_ClimateSummary(solution = solution_list, run = run_list, metric = metric_list,
climate = climateLayer_list, scenario = "585", approach = names)
climate <- lowRegret_ClimateSummary(solution = solution_list, run = run_list, metric = metric_list,
climate = climateLayer_list, scenario = "585", approach = names)
LRPercentile
LRPercentile$geometry
class(LRPercentile$geometry)
# intersection of all low-regret areas
intersect_lowregret <- function(solution, run) {
tibble <- tibble(cellID = integer()) #empty tibble
for(i in 1:length(run)) {
df <- solution[[i]] %>%
dplyr::select(selection, cellID) %>%
dplyr::rename(!!sym(run[i]) := selection)
tibble <- left_join(df, tibble)
}
}
# Get intersection of all low-regret areas
intersect_lowregret(solution_list, run_list)
# intersection of all low-regret areas
intersect_lowregret <- function(solution, run) {
tibble <- tibble(cellID = integer()) #empty tibble
for(i in 1:length(run)) {
df <- solution[[i]] %>%
as_tibble() %>%
dplyr::select(selection, cellID) %>%
dplyr::rename(!!sym(run[i]) := selection)
tibble <- left_join(df, tibble)
}
}
# Get intersection of all low-regret areas
intersect_lowregret(solution_list, run_list)
# Get intersection of all low-regret areas
x<- intersect_lowregret(solution_list, run_list)
x
run = run_list
solution = solution_list
i = 1
df <- solution[[i]] %>%
as_tibble() %>%
dplyr::select(selection, cellID) %>%
dplyr::rename(!!sym(run[i]) := selection)
df
tibble <- left_join(df, tibble)
tibble <- tibble(cellID = integer()) #empty tibble
tibble <- left_join(df, tibble)
tibble
# intersection of all low-regret areas
intersect_lowregret <- function(solution, run) {
tibble <- tibble(cellID = integer()) #empty tibble
for(i in 1:length(run)) {
df <- solution[[i]] %>%
as_tibble() %>%
dplyr::select(selection, cellID) %>%
dplyr::rename(!!sym(run[i]) := selection)
tibble <- left_join(df, tibble)
}
return(tibble)
}
# Get intersection of all low-regret areas
x<- intersect_lowregret(solution_list, run_list)
x
tibble %<>% left_join(., PUs)
PUs
tmp <- PUs %>%
dplyr::mutate(cellID = row_number())
tmp
?st_as_sf
tibble %<>% left_join(., PUs, by = cellID) %>%
st_as_sf(sf_column_name = "geometry")
tmp <- PUs %>%
dplyr::mutate(cellID = row_number()) %>%
as_tibble()
tmp
tibble %<>% left_join(., tmp, by = cellID) %>%
st_as_sf(sf_column_name = "geometry")
tibble
tibble <- tibble(cellID = integer()) #empty tibble
for(i in 1:length(run)) {
df <- solution[[i]] %>%
as_tibble() %>%
dplyr::select(selection, cellID) %>%
dplyr::rename(!!sym(run[i]) := selection)
tibble <- left_join(df, tibble)
}
tibble %<>% left_join(., tmp, by = cellID) %>%
st_as_sf(sf_column_name = "geometry")
tmp
tibble
tibble %<>% left_join(., tmp, by = "cellID") %>%
st_as_sf(sf_column_name = "geometry")
tibble
solution_list[[1]]
tibble <- tibble(cellID = integer()) #empty tibble
for(i in 1:length(run)) {
df <- solution[[i]] %>%
as_tibble() %>%
dplyr::select(selection, cellID) %>%
dplyr::rename(!!sym(run[i]) := selection)
tibble <- left_join(df, tibble)
}
tmp <- PUs %>%
dplyr::mutate(cellID = row_number()) %>%
as_tibble()
tibble %<>% dplyr::mutate(selection = rowSums(., na.rm = TRUE)) %>%
left_join(., tmp, by = "cellID") %>%
st_as_sf(sf_column_name = "geometry")
tibble
# intersection of all low-regret areas
intersect_lowregret <- function(solution, run) {
tibble <- tibble(cellID = integer()) #empty tibble
for(i in 1:length(run)) {
df <- solution[[i]] %>%
as_tibble() %>%
dplyr::select(selection, cellID) %>%
dplyr::rename(!!sym(run[i]) := selection)
tibble <- left_join(df, tibble)
}
tmp <- PUs %>%
dplyr::mutate(cellID = row_number()) %>%
as_tibble()
tibble %<>% dplyr::mutate(selection = rowSums(., na.rm = TRUE)) %>%
left_join(., tmp, by = "cellID") %>%
st_as_sf(sf_column_name = "geometry")
return(tibble)
}
# Get intersection of all low-regret areas
intersection <- intersect_lowregret(solution_list, run_list)
intersection
# Creates the summaries of the climate metrics for low-regret areas
lowRegret_ClimateSummary <- function(solution, run, metric, climate, scenario, approach) {
list <- list() # empty list
for(i in 1:length(run)) {
df <- solution[[i]] %>%
dplyr::select(selection, cellID) %>%
dplyr::rename(solution_1 = selection)
x <- tibble(run = character()) # empty tibble
for(j in 1:length(metric)) {
tmp <- get_ClimateSummary(solution_list = list(df), climate_layer = climate[[j]],
metric = metric[j], col_scenario = scenario,
col_approach = approach[i], col_run = run[i],
climateLayer = "single")
x <- left_join(tmp, x)
}
list[[i]] <- x
}
complete <- do.call(rbind, list)
return(complete)
}
# Get intersection of all low-regret areas
intersection <- intersect_lowregret(solution_list, run_list)
intersection
# intersection of all low-regret areas
intersect_lowregret <- function(solution, run) {
tibble <- tibble(cellID = integer()) #empty tibble
for(i in 1:length(run)) {
df <- solution[[i]] %>%
as_tibble() %>%
dplyr::select(selection, cellID) %>%
dplyr::rename(!!sym(run[i]) := selection)
tibble <- left_join(df, tibble)
}
tmp <- PUs %>%
dplyr::mutate(cellID = row_number()) %>%
as_tibble()
tibble %<>% dplyr::mutate(selection = rowSums(select(., -"cellID"), na.rm = TRUE)) %>%
left_join(., tmp, by = "cellID") %>%
st_as_sf(sf_column_name = "geometry")
return(tibble)
}
# Get intersection of all low-regret areas
intersection <- intersect_lowregret(solution_list, run_list)
# intersection of all low-regret areas
intersect_lowregret <- function(solution, run) {
tibble <- tibble(cellID = integer()) #empty tibble
for(i in 1:length(run)) {
df <- solution[[i]] %>%
as_tibble() %>%
dplyr::select(selection, cellID) %>%
dplyr::rename(!!sym(run[i]) := selection)
tibble <- left_join(df, tibble)
}
tmp <- PUs %>%
dplyr::mutate(cellID = row_number()) %>%
as_tibble()
tibble %<>% dplyr::mutate(selection = rowSums(select(., -c("cellID")), na.rm = TRUE)) %>%
left_join(., tmp, by = "cellID") %>%
st_as_sf(sf_column_name = "geometry")
return(tibble)
}
# Get intersection of all low-regret areas
intersection <- intersect_lowregret(solution_list, run_list)
# intersection of all low-regret areas
intersect_lowregret <- function(solution, run) {
tibble <- tibble(cellID = integer()) #empty tibble
for(i in 1:length(run)) {
df <- solution[[i]] %>%
as_tibble() %>%
dplyr::select(selection, cellID) %>%
dplyr::rename(!!sym(run[i]) := selection)
tibble <- left_join(df, tibble)
}
tmp <- PUs %>%
dplyr::mutate(cellID = row_number()) %>%
as_tibble()
tibble %<>% dplyr::mutate(selection = rowSums(select(., -cellID), na.rm = TRUE)) %>%
left_join(., tmp, by = "cellID") %>%
st_as_sf(sf_column_name = "geometry")
return(tibble)
}
# Get intersection of all low-regret areas
intersection <- intersect_lowregret(solution_list, run_list)
# intersection of all low-regret areas
intersect_lowregret <- function(solution, run) {
tibble <- tibble(cellID = integer()) #empty tibble
for(i in 1:length(run)) {
df <- solution[[i]] %>%
as_tibble() %>%
dplyr::select(selection, cellID) %>%
dplyr::rename(!!sym(run[i]) := selection)
tibble <- left_join(df, tibble)
}
tmp <- PUs %>%
dplyr::mutate(cellID = row_number()) %>%
as_tibble()
tibble %<>% dplyr::mutate(selection = rowSums(select(-cellID), na.rm = TRUE)) %>%
left_join(., tmp, by = "cellID") %>%
st_as_sf(sf_column_name = "geometry")
return(tibble)
}
# Get intersection of all low-regret areas
intersection <- intersect_lowregret(solution_list, run_list)
# intersection of all low-regret areas
intersect_lowregret <- function(solution, run) {
tibble <- tibble(cellID = integer()) #empty tibble
for(i in 1:length(run)) {
df <- solution[[i]] %>%
as_tibble() %>%
dplyr::select(selection, cellID) %>%
dplyr::rename(!!sym(run[i]) := selection)
tibble <- left_join(df, tibble)
}
tmp <- PUs %>%
dplyr::mutate(cellID = row_number()) %>%
as_tibble()
tibble %<>% dplyr::mutate(selection = rowSums(., na.rm = TRUE) - cellID) %>%
left_join(., tmp, by = "cellID") %>%
st_as_sf(sf_column_name = "geometry")
return(tibble)
}
# Get intersection of all low-regret areas
intersection <- intersect_lowregret(solution_list, run_list)
intersection
# Get intersection of all low-regret areas
intersection <- intersect_lowregret(solution_list, run_list) %>%
dplyr::mutate(selection_all = ifelse(selection = length(run_list)*4, yes = 1, no = 0)) #*4 because 4 metrics TODO: Change it to 5 once including marine heatwaves
length(run_list)*4
# Get intersection of all low-regret areas
intersection <- intersect_lowregret(solution_list, run_list) %>%
dplyr::mutate(selection_all = ifelse(selection = (length(run_list)*4), yes = 1, no = 0)) #*4 because 4 metrics TODO: Change it to 5 once including marine heatwaves
# Get intersection of all low-regret areas
intersection <- intersect_lowregret(solution_list, run_list) %>%
dplyr::mutate(selection_all = ifelse(selection == (length(run_list)*4), yes = 1, no = 0)) #*4 because 4 metrics TODO: Change it to 5 once including marine heatwaves
intersection
intersection <- intersect_lowregret(solution_list, run_list)
intersection
# Get intersection of all low-regret areas
intersection <- intersect_lowregret(solution_list, run_list) %>%
dplyr::mutate(selection_all = ifelse(selection == (length(run_list)*4), yes = 1, no = 0)) #*4 because 4 metrics TODO: Change it to 5 once including marine heatwaves
intersection
intersection$selection_all
sum(intersection$selection_all == 1)
compute_summary(intersection, total_area, PU_size, run_name = "LR-Approaches", Cost = "cost")
# Get intersection of all low-regret areas
intersection <- intersect_lowregret(solution_list, run_list) %>%
dplyr::mutate(selection_all = ifelse(solution_1 == (length(run_list)*4), yes = 1, no = 0)) #*4 because 4 metrics TODO: Change it to 5 once including marine heatwaves
intersection
# Get intersection of all low-regret areas
intersection <- intersect_lowregret(solution_list, run_list) %>%
dplyr::mutate(solution_1 = ifelse(selection == (length(run_list)*4), yes = 1, no = 0)) #*4 because 4 metrics TODO: Change it to 5 once including marine heatwaves
compute_summary(intersection, total_area, PU_size, run_name = "LR-Approaches", Cost = "cost")
# Uniform Cost (Using the Area)
UniformCost <- PUs %>%
dplyr::mutate(cost = PU_size)
compute_summary(intersection, total_area, PU_size, run_name = "LR-Approaches", Cost = "cost")
UniformCost
tmp_cost <- UniformCost %>%
dplyr::mutate(cellID = row_number()) %>%
as_tibble()
tmp_cost
PU_size
# intersection of all low-regret areas
intersect_lowregret <- function(solution, run) {
tibble <- tibble(cellID = integer()) #empty tibble
for(i in 1:length(run)) {
df <- solution[[i]] %>%
as_tibble() %>%
dplyr::select(selection, cellID) %>%
dplyr::rename(!!sym(run[i]) := selection)
tibble <- left_join(df, tibble)
}
tmp <- PUs %>%
dplyr::mutate(cellID = row_number()) %>%
as_tibble()
tibble %<>% dplyr::mutate(selection = rowSums(., na.rm = TRUE) - cellID) %>%
left_join(., tmp, by = "cellID") %>%
dplyr::mutate(cost = PU_size) %>%
st_as_sf(sf_column_name = "geometry")
return(tibble)
}
compute_summary(intersection, total_area, PU_size, run_name = "LR-Approaches", Cost = "cost")
# Get intersection of all low-regret areas
intersection <- intersect_lowregret(solution_list, run_list) %>%
dplyr::mutate(solution_1 = ifelse(selection == (length(run_list)*4), yes = 1, no = 0)) #*4 because 4 metrics TODO: Change it to 5 once including marine heatwaves
compute_summary(intersection, total_area, PU_size, run_name = "LR-Approaches", Cost = "cost")
climate <- list() # empty list
climate <- get_ClimateSummary(list(intersection), climateLayer_list, metric_list, col_scenario = "585", col_approach = "LR-Approaches", col_run = "LR-Approaches", climateLayer = "multiple")
climate
metric_list
climate <- list() # empty list
for (i in 1:length(metric_list)) {
climate[[i]] <- get_ClimateSummary(list(intersection), climateLayer_list[[i]], metric_list[i], col_scenario = "585", col_approach = "LR-Approaches", col_run = "LR-Approaches", climateLayer = "single")
}
climate
climate <- plyr::join_all(climate, by=c("run", "scenario", "approach"), type='left')
climate
summary <- left_join(climate, df, by = "run")
summary
# Get summary
summary <- compute_summary(intersection, total_area, PU_size, run_name = "LR-Approaches", Cost = "cost")
summary
summary <- left_join(climate, df, by = "run")
summary <- left_join(climate, summary, by = "run")
summary
write.csv(summary, paste0(output_summary, "ApproachTheme_Approaches_LowRegretSummary.csv")) # save
LRFeature
?read_csv
# Load summaries
LRFeature_summary <- read_csv("Output/summary/MetricTheme_Feature_LowRegretSummary.csv")
LRPercentile_summary <- read_csv("Output/summary/MetricTheme_Percentile_LowRegretSummary.csv") %>%
dplyr::select(-1)
# Load summaries
LRFeature_summary <- read_csv("Output/summary/MetricTheme_Feature_LowRegretSummary.csv") %>%
dplyr::select(-1)
LRPercentile_summary <- read_csv("Output/summary/MetricTheme_Percentile_LowRegretSummary.csv") %>%
dplyr::select(-1)
LRPenalty_summary <- read_csv("Output/summary/MetricTheme_Penalty_LowRegretSummary.csv") %>%
dplyr::select(-1)
LRClimatePriorityArea_summary <- read_csv("Output/summary/MetricTheme_ClimatePriorityArea_LowRegretSummary.csv") %>%
dplyr::select(-1)
LRClimatePriorityArea_summary
# Compare cost of each
summary <- rbind(LRFeature_summary, LRPercentile_summary, LRPenalty_summary, LRClimatePriorityArea_summary)
summary
ggArea <- plot_LowRegretStatistics(summary, col_name = "percent_area", y_axis = "% area")  + theme(axis.text = element_text(size = 25))
ggArea
# Plot statistics
plot_statistics <- function(summary, col_name, y_axis, theme) {
if (theme == "ensemble"){
color_legend <- c("#289E3D", "#E6C173", "#855600", "#5075BA", "#81B0CC", "#5A9E67")
string <- "as.factor(run)"
} else if (theme == "scenario"){
color_legend <- c("126" = "#289E3D", "245" = "#E6C173", "585" = "#855600")
string <- "as.factor(scenario)"
} else if (theme == "metric") {
color_legend <- c("#289E3D", "#E6C173", "#81B0CC", "#855600")
string <- "as.factor(run)"
} else if (theme == "LR-approach"){
color_legend = c("#E6BA7E", "#4D3B2A", "#6984BF", "#2B8142")
string <- "as.factor(run)"
}
plot <- ggplot(data = summary, aes_string(x = string)) + # TODO: add in aes (later on) group = scenario
geom_bar(aes_string(y = col_name, fill = string), stat = 'identity', position = position_dodge()) +
scale_fill_manual(name = 'Run',
values = color_legend) +
xlab("Run") +
ylab(y_axis) +
theme(legend.position = "bottom") +
theme_classic()
return(plot)
#  if (color == 1) { # For plotting related to RQ2
#    color_legend <- c("tos" = "#289E3D", "phos" = "#E6C173", "o2os" = "#81B0CC", "velocity" = "#855600")
#    summary %<>% dplyr::mutate(approach = case_when(str_detect(run, pattern = "tos") ~ "tos",
#                                                    str_detect(run, pattern = "phos") ~ "phos",
#                                                    str_detect(run, pattern = "o2os") ~ "o2os",
#                                                    str_detect(run, pattern = "velocity") ~ "velocity"))
#  } else if (color == 2) { # For plotting related to RQ1
#    color_legend <- c("uninformed" = "#a6611a", "tos" = "#dfc27d")
#    summary %<>% dplyr::mutate(approach = case_when(str_detect(run, pattern = "uninformed") ~ "uninformed",
#                      str_detect(run, pattern = "tos") ~ "tos"))
#  } else if (color == 3) { # For plotting vs scenarios
#    summary %<>% dplyr::mutate(approach = case_when(run == "percentile_tos_585" ~ "SSP 5-8.5",
#                                                    run == "percentile_tos_126" ~ "SSP 1-2.6",
#                                                   run == "percentile_tos_245" ~ "SSP 2-4.5"))
#
# color_legend <- c("SSP 1-2.6" = "#289E3D", "SSP 2-4.5" = "#E6C173", "SSP 5-8.5" = "#855600")
#  } else {
#   color_legend <- c("#289E3D", "#E6C173", "#81B0CC", "#855600", "#5075BA")
#  }
#plot <- ggplot(data = summary, aes(x = as.factor(approach))) + # TODO: add in aes (later on) group = scenario
# geom_bar(aes_string(y = col_name, fill = "as.factor(approach)"), stat = 'identity', position = position_dodge()) +
#  scale_fill_manual(name = 'Run',
#                   values = color_legend) +
#xlab("Run") +
#ylab(y_axis) +
#theme(legend.position = "bottom") +
#theme_classic()
}
ggArea <- plot_statistics(summary, col_name = "percent_area", y_axis = "% area")  + theme(axis.text = element_text(size = 25))
ggArea <- plot_statistics(summary, col_name = "percent_area", y_axis = "% area", theme = "LR-approach")  + theme(axis.text = element_text(size = 25))
ggArea
ggsave(filename = "Area-ApproachTheme-Approaches-585.png",
plot = ggArea, width = 7, height = 5, dpi = 300,
path = "Figures/") # save plot
